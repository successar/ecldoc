<?xml version='1.0' encoding='UTF-8'?>
<Meta>
 <Source name="PBblas.performance.SolvePerfPrep" sourcePath="/media/sarthak/Data/ecldoc/testing/eclbundles/ml-bundles/PBblas/performance/SolvePerfPrep.ecl" target="solveperfprep.ecl.xml">
  <Import body="0" end="300" fullname="PBblas" inherit_type="local" line="6" name="PBblas" ref="pbblas" start="300" target="../pkg.toc.xml">
   <Type>attribute</Type>
  </Import>
  <Import body="0" end="322" fullname="PBblas.internal" inherit_type="local" line="7" name="int" ref="pbblas.internal" remotescope="1" start="322" target="../internal/pkg.toc.xml">
   <Type>attribute</Type>
  </Import>
  <Import body="0" end="353" fullname="PBblas.MatUtils" inherit_type="local" line="8" name="MatUtils" ref="pbblas.matutils" start="353" target="../matutils.ecl.xml">
   <Type>attribute</Type>
   <Documentation> <see>Std/PBblas/Types.Layout_Cell</see>
    <content>Provides various utility attributes for manipulating cell-based matrixes</content>
   </Documentation>
  </Import>
  <Import body="0" end="377" fullname="PBblas.Types" inherit_type="local" line="9" name="Types" ref="pbblas.types" start="377" target="../types.ecl.xml">
   <Type>attribute</Type>
   <Documentation> <content>Types for the Parallel Block Basic Linear Algebra Sub-programs support WARNING: attributes marked with WARNING can not be changed without making corresponding changes to the C++ attributes.</content>
   </Documentation>
  </Import>
  <Import body="0" end="398" fullname="PBblas.internal.Types" inherit_type="local" line="10" name="iTypes" ref="pbblas.internal.types" start="398" target="../internal/types.ecl.xml">
   <Type>attribute</Type>
   <Documentation> <content>Internal Types for the Parallel Block Basic Linear Algebra Sub-programs support WARNING: attributes marked with WARNING can not be changed without making corresponding changes to the C++ attributes.</content>
   </Documentation>
  </Import>
  <Import body="0" end="426" fullname="PBblas.test" inherit_type="local" line="11" name="Tests" ref="pbblas.test" remotescope="1" start="426" target="../test/pkg.toc.xml">
   <Type>attribute</Type>
  </Import>
  <Import body="0" end="455" fullname="PBblas.test.MakeTestMatrix" inherit_type="local" line="12" name="tm" ref="pbblas.test.maketestmatrix" start="455" target="../test/maketestmatrix.ecl.xml">
   <Type>attribute</Type>
  </Import>
  <Definition body="495" end="512" fullname="pbblas.performance.matrix_t" inherit_type="local" line="14" name="matrix_t" source="/media/sarthak/Data/ecldoc/testing/eclbundles/ml-bundles/PBblas/performance/SolvePerfPrep.ecl" start="484">
   <Signature pre="" post="" name="matrix_t">matrix_t</Signature><Type>attribute</Type>
  </Definition>
  <Definition body="524" end="540" inherit_type="local" line="15" name="Triangle" source="/media/sarthak/Data/ecldoc/testing/eclbundles/ml-bundles/PBblas/performance/SolvePerfPrep.ecl" start="513" fullname="ecldoc-Triangle">
   <Type>attribute</Type>
   <Signature pre="" post="" name="Triangle">Triangle</Signature><Documentation> <content>Enumeration for Triangle type WARNING: type used in C++ attribute</content>
   </Documentation>
  </Definition>
  <Definition body="552" end="568" inherit_type="local" line="16" name="Diagonal" source="/media/sarthak/Data/ecldoc/testing/eclbundles/ml-bundles/PBblas/performance/SolvePerfPrep.ecl" start="541" fullname="ecldoc-Diagonal">
   <Type>attribute</Type>
   <Signature pre="" post="" name="Diagonal">Diagonal</Signature><Documentation> <content>Enumeration for Diagonal type WARNING: type used in C++ attribute</content>
   </Documentation>
  </Definition>
  <Definition body="578" end="594" fullname="pbblas.performance.upper" inherit_type="local" line="17" name="Upper" source="/media/sarthak/Data/ecldoc/testing/eclbundles/ml-bundles/PBblas/performance/SolvePerfPrep.ecl" start="569">
   <Signature pre="" post="" name="Upper">Upper</Signature><Type>attribute</Type>
  </Definition>
  <Definition body="604" end="620" fullname="pbblas.performance.lower" inherit_type="local" line="18" name="Lower" source="/media/sarthak/Data/ecldoc/testing/eclbundles/ml-bundles/PBblas/performance/SolvePerfPrep.ecl" start="595">
   <Signature pre="" post="" name="Lower">Lower</Signature><Type>attribute</Type>
  </Definition>
  <Definition body="635" end="655" fullname="pbblas.performance.layout_part" inherit_type="local" line="19" name="Layout_Part" source="/media/sarthak/Data/ecldoc/testing/eclbundles/ml-bundles/PBblas/performance/SolvePerfPrep.ecl" start="621">
   <Type>record</Type>
   <Field name="m_label"/>
   <Field name="wi_id"/>
   <Field name="partition_id"/>
   <Field name="node_id"/>
   <Field name="m_rows"/>
   <Field name="m_cols"/>
   <Field name="row_blocks"/>
   <Field name="col_blocks"/>
   <Field name="block_row"/>
   <Field name="block_col"/>
   <Field name="part_rows"/>
   <Field name="part_cols"/>
   <Field name="first_row"/>
   <Field name="first_col"/>
   <Field name="mat_part"/>
   <Signature pre="" post="" name="Layout_Part">Layout_Part</Signature><Documentation> <field><name>wi_id</name><desc>Work Item Number -- An identifier from 1 to 64K-1 that separates and identifies individual matrixes</desc></field>
    <field><name>m_label</name><desc>A user provided label indicating to which matrix the dimensions apply, when used to describe a set of related matrixes (e.g., 'A', 'B', and 'C') for the same work item used in an operation. * @field partition_id A unique ID for this partition within the matrix</desc></field>
    <field><name>partition_id</name><desc>The 1-based id of this partition, unique within a work-item</desc></field>
    <field><name>node_id</name><desc>The node on which this partition is stored</desc></field>
    <field><name>m_rows</name><desc>The number of rows in the full matrix</desc></field>
    <field><name>m_cols</name><desc>The number of columns in the full matrix</desc></field>
    <field><name>row_blocks</name><desc>The number of row partitions in use</desc></field>
    <field><name>col_blocks</name><desc>The number of column partitions in use</desc></field>
    <field><name>block_row</name><desc>The row of this partition within the block partition matrix</desc></field>
    <field><name>block_col</name><desc>The column of this partition "</desc></field>
    <field><name>part_rows</name><desc>The number of rows stored within this partition</desc></field>
    <field><name>part_cols</name><desc>The number of columns stored within this partition</desc></field>
    <field><name>first_row</name><desc>The first row of the original matrix stored within this partition</desc></field>
    <field><name>first_col</name><desc>The first column of the original matrix stored within this partition</desc></field>
    <field><name>mat_part</name><desc>The dense representation of the cells values within this partition (see matrix_t)</desc></field>
    <see>matrix_t</see>
    <see>Layout_Cell</see>
    <see>Std/PBblas/Converted</see>
    <content>Alternate form for storage of large matrixes as a set of partitions Each partition holds the dense form of a piece of the matrix (see matrix_t) as well as information about its relationship to the larger matrix. The full matrix is then carried as DATASET(Layout_Part). Utility module Converted provides functions for converting a matrix in cell form (see Layout_cell) to partitions and vice versa. This form is primarily used internally to PBblas functions, but can also be used as an intermediate form to avoid repeated conversions from cell form. A work-item id field allows multiple matrixes to be carried in the same dataset. This supports the "myriad" style interface whereby the same operation can be performed on multiple sets of matrixes at once. The m_label field allows for the separation of multiple matrixes with the same wi_id for operations requiring multiple matrixes. This allows multiple work-items with multiple matrixes each to be carried in the same dataset.</content>
   </Documentation>
  </Definition>
  <Definition body="663" end="675" inherit_type="local" line="20" name="Side" source="/media/sarthak/Data/ecldoc/testing/eclbundles/ml-bundles/PBblas/performance/SolvePerfPrep.ecl" start="656" fullname="ecldoc-Side">
   <Type>attribute</Type>
   <Signature pre="" post="" name="Side">Side</Signature><Documentation> <content>Enumeration for Side type WARNING: type used in C++ attribute</content>
   </Documentation>
  </Definition>
  <Definition body="690" end="709" fullname="pbblas.performance.layout_cell" inherit_type="local" line="21" name="Layout_Cell" source="/media/sarthak/Data/ecldoc/testing/eclbundles/ml-bundles/PBblas/performance/SolvePerfPrep.ecl" start="676">
   <Type>record</Type>
   <Field name="wi_id"/>
   <Field name="x"/>
   <Field name="y"/>
   <Field name="v"/>
   <Signature pre="" post="" name="Layout_Cell">Layout_Cell</Signature><Documentation> <field><name>wi_id</name><desc>Work Item Number -- An identifier from 1 to 64K-1 that separates and identifies individual matrixes</desc></field>
    <field><name>x</name><desc>1-based row position within the matrix</desc></field>
    <field><name>y</name><desc>1-based column position within the matrix</desc></field>
    <field><name>v</name><desc>Real value for the cell</desc></field>
    <see>matrix_t</see>
    <see>Std/PBblas/MakeR8Set.ecl</see>
    <see>Std/PBblas/Converted.ecl WARNING: Used as C++ attribute. Do not change without corresponding changes to MakeR8Set.</see>
    <content>Layout for Matrix Cell Main representation of Matrix cell at interface to all PBBlas functions. Matrixes are represented as DATASET(Layout_Cell), where each cell describes the row and column position of the cell as well as its value. Only the non-zero cells need to be contained in the dataset in order to describe the matrix since all unspecified cells are considered to have a value of zero. The cell also contains a work-item number that allows multiple separate matrixes to be carried in the same dataset. This supports the "myriad" style interface that allows the same operations to be performed on many different sets of data at once. Note that these matrixes do not have an explicit size. They are sized implicitly, based on the maximum row and column presented in the data. A matrix can be converted to an explicit dense form (see matrix_t) by using the utility module MakeR8Set. This module should only be used for known small matrixes (&lt; 1M cells) or for partitions of a larger matrix. The Converted module provides utility functions to convert to and from a set of partitions (See Layout_parts).</content>
   </Documentation>
  </Definition>
  <Definition body="896" end="921" fullname="pbblas.performance.test_size" inherit_type="local" line="27" name="test_size" source="/media/sarthak/Data/ecldoc/testing/eclbundles/ml-bundles/PBblas/performance/SolvePerfPrep.ecl" start="875">
   <Signature pre="" post="" name="UNSIGNED test_size">UNSIGNED test_size</Signature><Type>attribute</Type>
  </Definition>
  <Definition body="1062" end="1068" fullname="pbblas.performance.n1" inherit_type="local" line="32" name="N1" source="/media/sarthak/Data/ecldoc/testing/eclbundles/ml-bundles/PBblas/performance/SolvePerfPrep.ecl" start="1057">
   <Signature pre="" post="" name="N1">N1</Signature><Type>attribute</Type>
  </Definition>
  <Definition body="1074" end="1081" fullname="pbblas.performance.n2" inherit_type="local" line="33" name="N2" source="/media/sarthak/Data/ecldoc/testing/eclbundles/ml-bundles/PBblas/performance/SolvePerfPrep.ecl" start="1069">
   <Signature pre="" post="" name="N2">N2</Signature><Type>attribute</Type>
  </Definition>
  <Definition body="1087" end="1094" fullname="pbblas.performance.n3" inherit_type="local" line="34" name="N3" source="/media/sarthak/Data/ecldoc/testing/eclbundles/ml-bundles/PBblas/performance/SolvePerfPrep.ecl" start="1082">
   <Signature pre="" post="" name="N3">N3</Signature><Type>attribute</Type>
  </Definition>
  <Definition body="1185" end="1191" fullname="pbblas.performance.m1" inherit_type="local" line="36" name="M1" source="/media/sarthak/Data/ecldoc/testing/eclbundles/ml-bundles/PBblas/performance/SolvePerfPrep.ecl" start="1180">
   <Signature pre="" post="" name="M1">M1</Signature><Type>attribute</Type>
  </Definition>
  <Definition body="1197" end="1204" fullname="pbblas.performance.m2" inherit_type="local" line="37" name="M2" source="/media/sarthak/Data/ecldoc/testing/eclbundles/ml-bundles/PBblas/performance/SolvePerfPrep.ecl" start="1192">
   <Signature pre="" post="" name="M2">M2</Signature><Type>attribute</Type>
  </Definition>
  <Definition body="1210" end="1218" fullname="pbblas.performance.m3" inherit_type="local" line="38" name="M3" source="/media/sarthak/Data/ecldoc/testing/eclbundles/ml-bundles/PBblas/performance/SolvePerfPrep.ecl" start="1205">
   <Signature pre="" post="" name="M3">M3</Signature><Type>attribute</Type>
  </Definition>
  <Definition body="1226" end="1259" fullname="pbblas.performance.a_s" inherit_type="local" line="40" name="A_s" source="/media/sarthak/Data/ecldoc/testing/eclbundles/ml-bundles/PBblas/performance/SolvePerfPrep.ecl" start="1220">
   <Signature pre="" post="" name="A_s">A_s</Signature><Type>attribute</Type>
  </Definition>
  <Definition body="1266" end="1299" fullname="pbblas.performance.a_m" inherit_type="local" line="41" name="A_m" source="/media/sarthak/Data/ecldoc/testing/eclbundles/ml-bundles/PBblas/performance/SolvePerfPrep.ecl" start="1260">
   <Signature pre="" post="" name="A_m">A_m</Signature><Type>attribute</Type>
  </Definition>
  <Definition body="1306" end="1339" fullname="pbblas.performance.a_l" inherit_type="local" line="42" name="A_l" source="/media/sarthak/Data/ecldoc/testing/eclbundles/ml-bundles/PBblas/performance/SolvePerfPrep.ecl" start="1300">
   <Signature pre="" post="" name="A_l">A_l</Signature><Type>attribute</Type>
  </Definition>
  <Definition body="1350" end="1383" fullname="pbblas.performance.x_ax_s" inherit_type="local" line="44" name="X_ax_s" source="/media/sarthak/Data/ecldoc/testing/eclbundles/ml-bundles/PBblas/performance/SolvePerfPrep.ecl" start="1341">
   <Signature pre="" post="" name="X_ax_s">X_ax_s</Signature><Type>attribute</Type>
  </Definition>
  <Definition body="1393" end="1426" fullname="pbblas.performance.x_xa_s" inherit_type="local" line="45" name="X_xa_s" source="/media/sarthak/Data/ecldoc/testing/eclbundles/ml-bundles/PBblas/performance/SolvePerfPrep.ecl" start="1384">
   <Signature pre="" post="" name="X_xa_s">X_xa_s</Signature><Type>attribute</Type>
  </Definition>
  <Definition body="1436" end="1469" fullname="pbblas.performance.x_ax_m" inherit_type="local" line="46" name="X_ax_m" source="/media/sarthak/Data/ecldoc/testing/eclbundles/ml-bundles/PBblas/performance/SolvePerfPrep.ecl" start="1427">
   <Signature pre="" post="" name="X_ax_m">X_ax_m</Signature><Type>attribute</Type>
  </Definition>
  <Definition body="1479" end="1512" fullname="pbblas.performance.x_xa_m" inherit_type="local" line="47" name="X_xa_m" source="/media/sarthak/Data/ecldoc/testing/eclbundles/ml-bundles/PBblas/performance/SolvePerfPrep.ecl" start="1470">
   <Signature pre="" post="" name="X_xa_m">X_xa_m</Signature><Type>attribute</Type>
  </Definition>
  <Definition body="1522" end="1555" fullname="pbblas.performance.x_ax_l" inherit_type="local" line="48" name="X_ax_l" source="/media/sarthak/Data/ecldoc/testing/eclbundles/ml-bundles/PBblas/performance/SolvePerfPrep.ecl" start="1513">
   <Signature pre="" post="" name="X_ax_l">X_ax_l</Signature><Type>attribute</Type>
  </Definition>
  <Definition body="1565" end="1598" fullname="pbblas.performance.x_xa_l" inherit_type="local" line="49" name="X_xa_l" source="/media/sarthak/Data/ecldoc/testing/eclbundles/ml-bundles/PBblas/performance/SolvePerfPrep.ecl" start="1556">
   <Signature pre="" post="" name="X_xa_l">X_xa_l</Signature><Type>attribute</Type>
  </Definition>
  <Definition body="1610" end="1668" fullname="pbblas.performance.b_ax_s" inherit_type="local" line="52" name="B_ax_s" source="/media/sarthak/Data/ecldoc/testing/eclbundles/ml-bundles/PBblas/performance/SolvePerfPrep.ecl" start="1601">
   <Type>attribute</Type>
   <Signature pre="" post="" name="B_ax_s">B_ax_s</Signature><Documentation> <see>PBblas/Types.Layout_Cell</see>
    <return>Result matrix in Layout_Cell format.</return>
    <param><name>transposeA</name><desc>Boolean indicating whether matrix A should be transposed before multiplying</desc></param>
    <param><name>transposeB</name><desc>Same as above but for matrix B</desc></param>
    <param><name>alpha</name><desc>Scalar multiplier for alpha * A * B</desc></param>
    <param><name>A_in</name><desc>'A' matrix (multiplier) in Layout_Cell format</desc></param>
    <param><name>B_in</name><desc>Same as above for the 'B' matrix (multiplicand)</desc></param>
    <param><name>C_in</name><desc>Same as above for the 'C' matrix (addend). May be omitted.</desc></param>
    <param><name>beta</name><desc>A scalar multiplier for beta * C, scales the C matrix before addition. May be omitted.</desc></param>
    <content>Extended Parallel Block Matrix Multiplication Module Implements: Result &lt;- alpha * op(A)op(B) + beta * C. op is No Transpose or Transpose. Multiplies two matrixes A and B, with an optional pre-multiply transpose for each Optionally scales the product by the scalar "alpha". Then adds an optional C matrix to the product after scaling C by the scalar "beta". A, B, and C are specified as DATASET(Layout_Cell), as is the Resulting matrix. Layout_Cell describes a sparse matrix stored as a list of x, y, and value. This interface also provides a "Myriad" capability allowing multiple similar operations to be performed on independent sets of matrixes in parallel. This is done by use of the work-item id (wi_id) in each cell of the matrixes. Cells with the same wi_id are considered part of the same matrix. In the myriad form, each input matrix A, B, and (optionally) C can contain many independent matrixes. The wi_ids are matched up such that each operation involves the A, B, and C with the same wi_id. A and B must therefore contain the same set of wi_ids, while C is optional for any wi_id. The same parameters: alpha, beta, transposeA, and transposeB are used for all work-items. The result will contain cells from all provided work-items. Result has same shape as C if provided. Note that matrixes are not explicitly dimensioned. The shape is determined by the highest value of x and y for each work-item.</content>
   </Documentation>
  </Definition>
  <Definition body="1678" end="1736" fullname="pbblas.performance.b_xa_s" inherit_type="local" line="54" name="B_xa_s" source="/media/sarthak/Data/ecldoc/testing/eclbundles/ml-bundles/PBblas/performance/SolvePerfPrep.ecl" start="1669">
   <Type>attribute</Type>
   <Signature pre="" post="" name="B_xa_s">B_xa_s</Signature><Documentation> <see>PBblas/Types.Layout_Cell</see>
    <return>Result matrix in Layout_Cell format.</return>
    <param><name>transposeA</name><desc>Boolean indicating whether matrix A should be transposed before multiplying</desc></param>
    <param><name>transposeB</name><desc>Same as above but for matrix B</desc></param>
    <param><name>alpha</name><desc>Scalar multiplier for alpha * A * B</desc></param>
    <param><name>A_in</name><desc>'A' matrix (multiplier) in Layout_Cell format</desc></param>
    <param><name>B_in</name><desc>Same as above for the 'B' matrix (multiplicand)</desc></param>
    <param><name>C_in</name><desc>Same as above for the 'C' matrix (addend). May be omitted.</desc></param>
    <param><name>beta</name><desc>A scalar multiplier for beta * C, scales the C matrix before addition. May be omitted.</desc></param>
    <content>Extended Parallel Block Matrix Multiplication Module Implements: Result &lt;- alpha * op(A)op(B) + beta * C. op is No Transpose or Transpose. Multiplies two matrixes A and B, with an optional pre-multiply transpose for each Optionally scales the product by the scalar "alpha". Then adds an optional C matrix to the product after scaling C by the scalar "beta". A, B, and C are specified as DATASET(Layout_Cell), as is the Resulting matrix. Layout_Cell describes a sparse matrix stored as a list of x, y, and value. This interface also provides a "Myriad" capability allowing multiple similar operations to be performed on independent sets of matrixes in parallel. This is done by use of the work-item id (wi_id) in each cell of the matrixes. Cells with the same wi_id are considered part of the same matrix. In the myriad form, each input matrix A, B, and (optionally) C can contain many independent matrixes. The wi_ids are matched up such that each operation involves the A, B, and C with the same wi_id. A and B must therefore contain the same set of wi_ids, while C is optional for any wi_id. The same parameters: alpha, beta, transposeA, and transposeB are used for all work-items. The result will contain cells from all provided work-items. Result has same shape as C if provided. Note that matrixes are not explicitly dimensioned. The shape is determined by the highest value of x and y for each work-item.</content>
   </Documentation>
  </Definition>
  <Definition body="1746" end="1804" fullname="pbblas.performance.b_ax_m" inherit_type="local" line="56" name="B_ax_m" source="/media/sarthak/Data/ecldoc/testing/eclbundles/ml-bundles/PBblas/performance/SolvePerfPrep.ecl" start="1737">
   <Type>attribute</Type>
   <Signature pre="" post="" name="B_ax_m">B_ax_m</Signature><Documentation> <see>PBblas/Types.Layout_Cell</see>
    <return>Result matrix in Layout_Cell format.</return>
    <param><name>transposeA</name><desc>Boolean indicating whether matrix A should be transposed before multiplying</desc></param>
    <param><name>transposeB</name><desc>Same as above but for matrix B</desc></param>
    <param><name>alpha</name><desc>Scalar multiplier for alpha * A * B</desc></param>
    <param><name>A_in</name><desc>'A' matrix (multiplier) in Layout_Cell format</desc></param>
    <param><name>B_in</name><desc>Same as above for the 'B' matrix (multiplicand)</desc></param>
    <param><name>C_in</name><desc>Same as above for the 'C' matrix (addend). May be omitted.</desc></param>
    <param><name>beta</name><desc>A scalar multiplier for beta * C, scales the C matrix before addition. May be omitted.</desc></param>
    <content>Extended Parallel Block Matrix Multiplication Module Implements: Result &lt;- alpha * op(A)op(B) + beta * C. op is No Transpose or Transpose. Multiplies two matrixes A and B, with an optional pre-multiply transpose for each Optionally scales the product by the scalar "alpha". Then adds an optional C matrix to the product after scaling C by the scalar "beta". A, B, and C are specified as DATASET(Layout_Cell), as is the Resulting matrix. Layout_Cell describes a sparse matrix stored as a list of x, y, and value. This interface also provides a "Myriad" capability allowing multiple similar operations to be performed on independent sets of matrixes in parallel. This is done by use of the work-item id (wi_id) in each cell of the matrixes. Cells with the same wi_id are considered part of the same matrix. In the myriad form, each input matrix A, B, and (optionally) C can contain many independent matrixes. The wi_ids are matched up such that each operation involves the A, B, and C with the same wi_id. A and B must therefore contain the same set of wi_ids, while C is optional for any wi_id. The same parameters: alpha, beta, transposeA, and transposeB are used for all work-items. The result will contain cells from all provided work-items. Result has same shape as C if provided. Note that matrixes are not explicitly dimensioned. The shape is determined by the highest value of x and y for each work-item.</content>
   </Documentation>
  </Definition>
  <Definition body="1814" end="1872" fullname="pbblas.performance.b_xa_m" inherit_type="local" line="58" name="B_xa_m" source="/media/sarthak/Data/ecldoc/testing/eclbundles/ml-bundles/PBblas/performance/SolvePerfPrep.ecl" start="1805">
   <Type>attribute</Type>
   <Signature pre="" post="" name="B_xa_m">B_xa_m</Signature><Documentation> <see>PBblas/Types.Layout_Cell</see>
    <return>Result matrix in Layout_Cell format.</return>
    <param><name>transposeA</name><desc>Boolean indicating whether matrix A should be transposed before multiplying</desc></param>
    <param><name>transposeB</name><desc>Same as above but for matrix B</desc></param>
    <param><name>alpha</name><desc>Scalar multiplier for alpha * A * B</desc></param>
    <param><name>A_in</name><desc>'A' matrix (multiplier) in Layout_Cell format</desc></param>
    <param><name>B_in</name><desc>Same as above for the 'B' matrix (multiplicand)</desc></param>
    <param><name>C_in</name><desc>Same as above for the 'C' matrix (addend). May be omitted.</desc></param>
    <param><name>beta</name><desc>A scalar multiplier for beta * C, scales the C matrix before addition. May be omitted.</desc></param>
    <content>Extended Parallel Block Matrix Multiplication Module Implements: Result &lt;- alpha * op(A)op(B) + beta * C. op is No Transpose or Transpose. Multiplies two matrixes A and B, with an optional pre-multiply transpose for each Optionally scales the product by the scalar "alpha". Then adds an optional C matrix to the product after scaling C by the scalar "beta". A, B, and C are specified as DATASET(Layout_Cell), as is the Resulting matrix. Layout_Cell describes a sparse matrix stored as a list of x, y, and value. This interface also provides a "Myriad" capability allowing multiple similar operations to be performed on independent sets of matrixes in parallel. This is done by use of the work-item id (wi_id) in each cell of the matrixes. Cells with the same wi_id are considered part of the same matrix. In the myriad form, each input matrix A, B, and (optionally) C can contain many independent matrixes. The wi_ids are matched up such that each operation involves the A, B, and C with the same wi_id. A and B must therefore contain the same set of wi_ids, while C is optional for any wi_id. The same parameters: alpha, beta, transposeA, and transposeB are used for all work-items. The result will contain cells from all provided work-items. Result has same shape as C if provided. Note that matrixes are not explicitly dimensioned. The shape is determined by the highest value of x and y for each work-item.</content>
   </Documentation>
  </Definition>
  <Definition body="1882" end="1940" fullname="pbblas.performance.b_ax_l" inherit_type="local" line="60" name="B_ax_l" source="/media/sarthak/Data/ecldoc/testing/eclbundles/ml-bundles/PBblas/performance/SolvePerfPrep.ecl" start="1873">
   <Type>attribute</Type>
   <Signature pre="" post="" name="B_ax_l">B_ax_l</Signature><Documentation> <see>PBblas/Types.Layout_Cell</see>
    <return>Result matrix in Layout_Cell format.</return>
    <param><name>transposeA</name><desc>Boolean indicating whether matrix A should be transposed before multiplying</desc></param>
    <param><name>transposeB</name><desc>Same as above but for matrix B</desc></param>
    <param><name>alpha</name><desc>Scalar multiplier for alpha * A * B</desc></param>
    <param><name>A_in</name><desc>'A' matrix (multiplier) in Layout_Cell format</desc></param>
    <param><name>B_in</name><desc>Same as above for the 'B' matrix (multiplicand)</desc></param>
    <param><name>C_in</name><desc>Same as above for the 'C' matrix (addend). May be omitted.</desc></param>
    <param><name>beta</name><desc>A scalar multiplier for beta * C, scales the C matrix before addition. May be omitted.</desc></param>
    <content>Extended Parallel Block Matrix Multiplication Module Implements: Result &lt;- alpha * op(A)op(B) + beta * C. op is No Transpose or Transpose. Multiplies two matrixes A and B, with an optional pre-multiply transpose for each Optionally scales the product by the scalar "alpha". Then adds an optional C matrix to the product after scaling C by the scalar "beta". A, B, and C are specified as DATASET(Layout_Cell), as is the Resulting matrix. Layout_Cell describes a sparse matrix stored as a list of x, y, and value. This interface also provides a "Myriad" capability allowing multiple similar operations to be performed on independent sets of matrixes in parallel. This is done by use of the work-item id (wi_id) in each cell of the matrixes. Cells with the same wi_id are considered part of the same matrix. In the myriad form, each input matrix A, B, and (optionally) C can contain many independent matrixes. The wi_ids are matched up such that each operation involves the A, B, and C with the same wi_id. A and B must therefore contain the same set of wi_ids, while C is optional for any wi_id. The same parameters: alpha, beta, transposeA, and transposeB are used for all work-items. The result will contain cells from all provided work-items. Result has same shape as C if provided. Note that matrixes are not explicitly dimensioned. The shape is determined by the highest value of x and y for each work-item.</content>
   </Documentation>
  </Definition>
  <Definition body="1950" end="2008" fullname="pbblas.performance.b_xa_l" inherit_type="local" line="62" name="B_xa_l" source="/media/sarthak/Data/ecldoc/testing/eclbundles/ml-bundles/PBblas/performance/SolvePerfPrep.ecl" start="1941">
   <Type>attribute</Type>
   <Signature pre="" post="" name="B_xa_l">B_xa_l</Signature><Documentation> <see>PBblas/Types.Layout_Cell</see>
    <return>Result matrix in Layout_Cell format.</return>
    <param><name>transposeA</name><desc>Boolean indicating whether matrix A should be transposed before multiplying</desc></param>
    <param><name>transposeB</name><desc>Same as above but for matrix B</desc></param>
    <param><name>alpha</name><desc>Scalar multiplier for alpha * A * B</desc></param>
    <param><name>A_in</name><desc>'A' matrix (multiplier) in Layout_Cell format</desc></param>
    <param><name>B_in</name><desc>Same as above for the 'B' matrix (multiplicand)</desc></param>
    <param><name>C_in</name><desc>Same as above for the 'C' matrix (addend). May be omitted.</desc></param>
    <param><name>beta</name><desc>A scalar multiplier for beta * C, scales the C matrix before addition. May be omitted.</desc></param>
    <content>Extended Parallel Block Matrix Multiplication Module Implements: Result &lt;- alpha * op(A)op(B) + beta * C. op is No Transpose or Transpose. Multiplies two matrixes A and B, with an optional pre-multiply transpose for each Optionally scales the product by the scalar "alpha". Then adds an optional C matrix to the product after scaling C by the scalar "beta". A, B, and C are specified as DATASET(Layout_Cell), as is the Resulting matrix. Layout_Cell describes a sparse matrix stored as a list of x, y, and value. This interface also provides a "Myriad" capability allowing multiple similar operations to be performed on independent sets of matrixes in parallel. This is done by use of the work-item id (wi_id) in each cell of the matrixes. Cells with the same wi_id are considered part of the same matrix. In the myriad form, each input matrix A, B, and (optionally) C can contain many independent matrixes. The wi_ids are matched up such that each operation involves the A, B, and C with the same wi_id. A and B must therefore contain the same set of wi_ids, while C is optional for any wi_id. The same parameters: alpha, beta, transposeA, and transposeB are used for all work-items. The result will contain cells from all provided work-items. Result has same shape as C if provided. Note that matrixes are not explicitly dimensioned. The shape is determined by the highest value of x and y for each work-item.</content>
   </Documentation>
  </Definition>
 </Source>
 <Depends sourcePath="/media/sarthak/Data/ecldoc/testing/eclbundles/ml-bundles/PBblas/MatUtils.ecl" name="PBblas.MatUtils" target="../matutils.ecl.xml"/><Depends sourcePath="/media/sarthak/Data/ecldoc/testing/eclbundles/ml-bundles/PBblas/Types.ecl" name="PBblas.Types" target="../types.ecl.xml"/><Depends sourcePath="/media/sarthak/Data/ecldoc/testing/eclbundles/ml-bundles/ML_Core/Types.ecl" name="ML_Core.Types" target="../../ml_core/types.ecl.xml"/><Depends sourcePath="/media/sarthak/Data/ecldoc/testing/eclbundles/ml-bundles/PBblas/internal/Types.ecl" name="PBblas.internal.Types" target="../internal/types.ecl.xml"/><Depends sourcePath="/media/sarthak/Data/ecldoc/testing/eclbundles/ml-bundles/PBblas/internal/MatDims.ecl" name="PBblas.internal.MatDims" target="../internal/matdims.ecl.xml"/><Depends sourcePath="/media/sarthak/Data/ecldoc/testing/eclbundles/ml-bundles/PBblas/internal/BlockDimensions.ecl" name="PBblas.internal.BlockDimensions" target="../internal/blockdimensions.ecl.xml"/><Depends sourcePath="/home/sarthak/runtime/opt/HPCCSystems/6.5.0/clienttools/share/ecllibrary/std/system/Thorlib.ecl" name="std.system.Thorlib" target="/home/sarthak/runtime/opt/HPCCSystems/6.5.0/clienttools/share/ecllibrary/std/system/Thorlib.ecl"/><Depends sourcePath="/media/sarthak/Data/ecldoc/testing/eclbundles/ml-bundles/PBblas/internal/BlockDimensionsMultiply.ecl" name="PBblas.internal.BlockDimensionsMultiply" target="../internal/blockdimensionsmultiply.ecl.xml"/><Depends sourcePath="/media/sarthak/Data/ecldoc/testing/eclbundles/ml-bundles/PBblas/internal/BlockDimensionsSolve.ecl" name="PBblas.internal.BlockDimensionsSolve" target="../internal/blockdimensionssolve.ecl.xml"/><Depends sourcePath="/media/sarthak/Data/ecldoc/testing/eclbundles/ml-bundles/PBblas/test/MakeTestMatrix.ecl" name="PBblas.test.MakeTestMatrix" target="../test/maketestmatrix.ecl.xml"/><Depends sourcePath="/media/sarthak/Data/ecldoc/testing/eclbundles/ml-bundles/PBblas/gemm.ecl" name="PBblas.gemm" target="../gemm.ecl.xml"/><Depends sourcePath="/home/sarthak/runtime/opt/HPCCSystems/6.5.0/clienttools/share/ecllibrary/std/BLAS.ecl" name="std.BLAS" target="/home/sarthak/runtime/opt/HPCCSystems/6.5.0/clienttools/share/ecllibrary/std/BLAS.ecl"/><Depends sourcePath="/home/sarthak/runtime/opt/HPCCSystems/6.5.0/clienttools/plugins/lib_eclblas.ecllib" target="/home/sarthak/runtime/opt/HPCCSystems/6.5.0/clienttools/plugins/lib_eclblas.ecllib"/><Depends sourcePath="/media/sarthak/Data/ecldoc/testing/eclbundles/ml-bundles/PBblas/internal/MakeR8Set.ecl" name="PBblas.internal.MakeR8Set" target="../internal/maker8set.ecl.xml"/><Depends sourcePath="/media/sarthak/Data/ecldoc/testing/eclbundles/ml-bundles/PBblas/internal/Converted.ecl" name="PBblas.internal.Converted" target="../internal/converted.ecl.xml"/></Meta>