<Meta>
 <Source sourcePath="/home/sarthak/runtime/opt/HPCCSystems/6.5.0/clienttools/plugins/lib_eclblas.ecllib"/>
 <Source name="std.BLAS" sourcePath="/home/sarthak/runtime/opt/HPCCSystems/6.5.0/clienttools/share/ecllibrary/std/BLAS.ecl">
  <Definition body="853"
              end="11458"
              exported="1"
              fullname="std.BLAS"
              inherit_type="local"
              line="19"
              name="BLAS"
              source="/home/sarthak/runtime/opt/HPCCSystems/6.5.0/clienttools/share/ecllibrary/std/BLAS.ecl"
              start="839">
   <Type>module</Type>
   <Definition body="947"
               end="1456"
               exported="1"
               fullname="std.BLAS.Types"
               inherit_type="local"
               line="21"
               name="Types"
               source="/home/sarthak/runtime/opt/HPCCSystems/6.5.0/clienttools/share/ecllibrary/std/BLAS.ecl"
               start="932">
    <Type>module</Type>
    <Definition body="982"
                end="1008"
                exported="1"
                fullname="std.blas.types.value_t"
                inherit_type="local"
                line="22"
                name="value_t"
                source="/home/sarthak/runtime/opt/HPCCSystems/6.5.0/clienttools/share/ecllibrary/std/BLAS.ecl"
                start="960">
     <Type>attribute</Type>
    </Definition>
    <Definition body="1049"
                end="1079"
                exported="1"
                fullname="std.blas.types.dimension_t"
                inherit_type="local"
                line="23"
                name="dimension_t"
                source="/home/sarthak/runtime/opt/HPCCSystems/6.5.0/clienttools/share/ecllibrary/std/BLAS.ecl"
                start="1027">
     <Type>attribute</Type>
    </Definition>
    <Definition body="1120"
                end="1147"
                exported="1"
                fullname="std.blas.types.matrix_t"
                inherit_type="local"
                line="24"
                name="matrix_t"
                source="/home/sarthak/runtime/opt/HPCCSystems/6.5.0/clienttools/share/ecllibrary/std/BLAS.ecl"
                start="1098">
     <Type>attribute</Type>
    </Definition>
    <Definition body="1193"
                end="1220"
                exported="1"
                inherit_type="local"
                line="25"
                name="Triangle"
                source="/home/sarthak/runtime/opt/HPCCSystems/6.5.0/clienttools/share/ecllibrary/std/BLAS.ecl"
                start="1171">
     <Type>attribute</Type>
    </Definition>
    <Definition body="1287"
                end="1314"
                exported="1"
                inherit_type="local"
                line="26"
                name="Diagonal"
                source="/home/sarthak/runtime/opt/HPCCSystems/6.5.0/clienttools/share/ecllibrary/std/BLAS.ecl"
                start="1265">
     <Type>attribute</Type>
    </Definition>
    <Definition body="1388"
                end="1411"
                exported="1"
                inherit_type="local"
                line="27"
                name="Side"
                source="/home/sarthak/runtime/opt/HPCCSystems/6.5.0/clienttools/share/ecllibrary/std/BLAS.ecl"
                start="1366">
     <Type>attribute</Type>
    </Definition>
    <Parents/>
   </Definition>
   <Definition body="1799"
               end="1802"
               exported="1"
               fullname="std.blas.icellfunc"
               inherit_type="local"
               line="37"
               name="ICellFunc"
               source="/home/sarthak/runtime/opt/HPCCSystems/6.5.0/clienttools/share/ecllibrary/std/BLAS.ecl"
               start="1639">
    <Type>function</Type>
    <Documentation>
     <content>&#13;&#10;&#32;&#32;&#32;* Function prototype for Apply2Cell.
   * @param v the value
   * @param r the row ordinal
   * @param c the column ordinal
   * @return the updated value&#13;&#10;&#32;&#32;&#32;</content>
    </Documentation>
    <Params>
     <Param name="v"/>
     <Param name="r"/>
     <Param name="c"/>
    </Params>
   </Definition>
   <Definition body="2237"
               end="2557"
               exported="1"
               fullname="std.blas.apply2cells"
               inherit_type="local"
               line="49"
               name="Apply2Cells"
               source="/home/sarthak/runtime/opt/HPCCSystems/6.5.0/clienttools/share/ecllibrary/std/BLAS.ecl"
               start="2017">
    <Type>function</Type>
    <Documentation>
     <content>&#13;&#10;&#32;&#32;&#32;* Iterate matrix and apply function to each cell
   *@param m number of rows
   *@param n number of columns
   *@param x matrix
   *@param f function to apply
   *@return updated matrix&#13;&#10;&#32;&#32;&#32;</content>
    </Documentation>
    <Params>
     <Param name="m"/>
     <Param name="n"/>
     <Param name="x"/>
     <Param name="f"/>
    </Params>
   </Definition>
   <Definition body="3082"
               end="3130"
               exported="1"
               fullname="std.blas.dasum"
               inherit_type="local"
               line="73"
               name="dasum"
               source="/home/sarthak/runtime/opt/HPCCSystems/6.5.0/clienttools/share/ecllibrary/std/BLAS.ecl"
               start="2934">
    <Type>function</Type>
    <Documentation>
     <content>&#13;&#10;&#32;&#32;&#32;* Absolute sum, the 1 norm of a vector.
   *@param m the number of entries
   *@param x the column major matrix holding the vector
   *@param incx the increment for x, 1 in the case of an actual vector
   *@param skipped default is zero, the number of entries stepped over
   * to get to the first entry
   *@return the sum of the absolute values&#13;&#10;&#32;&#32;&#32;</content>
    </Documentation>
    <Params>
     <Param name="m"/>
     <Param name="x"/>
     <Param name="incx"/>
     <Param name="skipped"/>
    </Params>
   </Definition>
   <Definition body="3887"
               end="3964"
               exported="1"
               fullname="std.blas.daxpy"
               inherit_type="local"
               line="90"
               name="daxpy"
               source="/home/sarthak/runtime/opt/HPCCSystems/6.5.0/clienttools/share/ecllibrary/std/BLAS.ecl"
               start="3626">
    <Type>function</Type>
    <Documentation>
     <content>&#13;&#10;&#32;* alpha*X + Y
 * @param N number of elements in vector
 * @param alpha the scalar multiplier
 * @param X the column major matrix holding the vector X
 * @param incX the increment or stride for the vector
 * @param Y the column major matrix holding the vector Y
 * @param incY the increment or stride of Y
 * @param x_skipped number of entries skipped to get to the first X
 * @param y_skipped number of entries skipped to get to the first Y
 * @return the updated matrix&#13;&#10;&#32;</content>
    </Documentation>
    <Params>
     <Param name="N"/>
     <Param name="alpha"/>
     <Param name="X"/>
     <Param name="incX"/>
     <Param name="Y"/>
     <Param name="incY"/>
     <Param name="x_skipped"/>
     <Param name="y_skipped"/>
    </Params>
   </Definition>
   <Definition body="4764"
               end="4846"
               exported="1"
               fullname="std.blas.dgemm"
               inherit_type="local"
               line="109"
               name="dgemm"
               source="/home/sarthak/runtime/opt/HPCCSystems/6.5.0/clienttools/share/ecllibrary/std/BLAS.ecl"
               start="4465">
    <Type>function</Type>
    <Documentation>
     <content>&#13;&#10;&#32;&#32;&#32;* alpha*op(A) op(B) + beta*C where op() is transpose
   * @param transposeA true when transpose of A is used
   * @param transposeB true when transpose of B is used
   * @param M number of rows in product
   * @param N number of columns in product
   * @param K number of columns/rows for the multiplier/multiplicand
   * @param alpha scalar used on A
   * @param A matrix A
   * @param B matrix B
   * @param beta scalar for matrix C
   * @param C matrix C or empty&#13;&#10;&#32;&#32;&#32;</content>
    </Documentation>
    <Params>
     <Param name="transposeA"/>
     <Param name="transposeB"/>
     <Param name="M"/>
     <Param name="N"/>
     <Param name="K"/>
     <Param name="alpha"/>
     <Param name="A"/>
     <Param name="B"/>
     <Param name="beta"/>
     <Param name="C"/>
    </Params>
   </Definition>
   <Definition body="5261"
               end="5298"
               exported="1"
               fullname="std.blas.dgetf2"
               inherit_type="local"
               line="124"
               name="dgetf2"
               source="/home/sarthak/runtime/opt/HPCCSystems/6.5.0/clienttools/share/ecllibrary/std/BLAS.ecl"
               start="5153">
    <Type>function</Type>
    <Documentation>
     <content>&#13;&#10;&#32;&#32;&#32;* Compute LU Factorization of matrix A.
   * @param m number of rows of A
   * @param n number of columns of A
   * @return composite matrix of factors, lower triangle has an
   *         implied diagonal of ones.  Upper triangle has the diagonal of the
   *         composite.&#13;&#10;&#32;&#32;&#32;</content>
    </Documentation>
    <Params>
     <Param name="m"/>
     <Param name="n"/>
     <Param name="a"/>
    </Params>
   </Definition>
   <Definition body="6087"
               end="6133"
               exported="1"
               fullname="std.blas.dpotf2"
               inherit_type="local"
               line="143"
               name="dpotf2"
               source="/home/sarthak/runtime/opt/HPCCSystems/6.5.0/clienttools/share/ecllibrary/std/BLAS.ecl"
               start="5934">
    <Type>function</Type>
    <Documentation>
     <content>&#13;&#10;&#32;&#32;&#32;* DPOTF2 computes the Cholesky factorization of a real symmetric
   * positive definite matrix A.
   *The factorization has the form
   * A = U**T * U ,  if UPLO = &apos;U&apos;, or
   * A = L  * L**T,  if UPLO = &apos;L&apos;,
   * where U is an upper triangular matrix and L is lower triangular.
   * This is the unblocked version of the algorithm, calling Level 2 BLAS.
   * @param tri indicate whether upper or lower triangle is used
   * @param r number of rows/columns in the square matrix
   * @param A the square matrix
   * @param clear clears the unused triangle
   * @return the triangular matrix requested.&#13;&#10;&#32;&#32;&#32;</content>
    </Documentation>
    <Params>
     <Param name="tri"/>
     <Param name="r"/>
     <Param name="A"/>
     <Param name="clear"/>
    </Params>
   </Definition>
   <Definition body="6683"
               end="6738"
               exported="1"
               fullname="std.blas.dscal"
               inherit_type="local"
               line="157"
               name="dscal"
               source="/home/sarthak/runtime/opt/HPCCSystems/6.5.0/clienttools/share/ecllibrary/std/BLAS.ecl"
               start="6507">
    <Type>function</Type>
    <Documentation>
     <content>&#13;&#10;&#32;&#32;&#32;* Scale a vector alpha
   * @param N number of elements in the vector
   * @param alpha the scaling factor
   * @param X the column major matrix holding the vector
   * @param incX the stride to get to the next element in the vector
   * @param skipped the number of elements skipped to get to the first element
   * @return the updated matrix&#13;&#10;&#32;&#32;&#32;</content>
    </Documentation>
    <Params>
     <Param name="N"/>
     <Param name="alpha"/>
     <Param name="X"/>
     <Param name="incX"/>
     <Param name="skipped"/>
    </Params>
   </Definition>
   <Definition body="7689"
               end="7765"
               exported="1"
               fullname="std.blas.dsyrk"
               inherit_type="local"
               line="177"
               name="dsyrk"
               source="/home/sarthak/runtime/opt/HPCCSystems/6.5.0/clienttools/share/ecllibrary/std/BLAS.ecl"
               start="7415">
    <Type>function</Type>
    <Documentation>
     <content>&#13;&#10;&#32;&#32;&#32;* Implements symmetric rank update C &lt;- alpha A**T A + beta C or
   * c &lt;- alpha A A**T + beta C.  C is N x N.
   * @param tri update upper or lower triangle
   * @param transposeA Transpose the A matrix to be NxK
   * @param N number of rows
   * @param K number of columns in the update matrix or transpose
   * @param alpha the alpha scalar
   * @param A the update matrix, either NxK or KxN
   * @param beta the beta scalar
   * @param C the matrix to update
   * @param clear clear the triangle that is not updated.  BLAS assumes
   * that symmetric matrices have only one of the triangles and this
   * option lets you make that true.&#13;&#10;&#32;&#32;&#32;</content>
    </Documentation>
    <Params>
     <Param name="tri"/>
     <Param name="transposeA"/>
     <Param name="N"/>
     <Param name="K"/>
     <Param name="alpha"/>
     <Param name="A"/>
     <Param name="beta"/>
     <Param name="C"/>
     <Param name="clear"/>
    </Params>
   </Definition>
   <Definition body="8753"
               end="8833"
               exported="1"
               fullname="std.blas.dtrsm"
               inherit_type="local"
               line="199"
               name="dtrsm"
               source="/home/sarthak/runtime/opt/HPCCSystems/6.5.0/clienttools/share/ecllibrary/std/BLAS.ecl"
               start="8458">
    <Type>function</Type>
    <Documentation>
     <content>&#13;&#10;&#32;&#32;&#32;* Triangular matrix solver.  op(A) X = alpha B or X op(A) = alpha B
   * where op is Transpose, X and B is MxN
   * @param side side for A, Side.Ax is op(A) X = alpha B
   * @param tri Says whether A is Upper or Lower triangle
   * @param transposeA is op(A) the transpose of A
   * @param diag is the diagonal an implied unit diagonal or supplied
   * @param M number of rows
   * @param N number of columns
   * @param lda the leading dimension of the A matrix, either M or N
   * @param alpha the scalar multiplier for B
   * @param A a triangular matrix
   * @param B the matrix of values for the solve
   * @return the matrix of coefficients to get B.&#13;&#10;&#32;&#32;&#32;</content>
    </Documentation>
    <Params>
     <Param name="side"/>
     <Param name="tri"/>
     <Param name="transposeA"/>
     <Param name="diag"/>
     <Param name="M"/>
     <Param name="N"/>
     <Param name="lda"/>
     <Param name="alpha"/>
     <Param name="A"/>
     <Param name="B"/>
    </Params>
   </Definition>
   <Definition body="9216"
               end="9529"
               exported="1"
               fullname="std.blas.extract_diag"
               inherit_type="local"
               line="213"
               name="extract_diag"
               source="/home/sarthak/runtime/opt/HPCCSystems/6.5.0/clienttools/share/ecllibrary/std/BLAS.ecl"
               start="9043">
    <Type>function</Type>
    <Documentation>
     <content>&#13;&#10;&#32;&#32;&#32;* Extract the diagonal of he matrix
   * @param m number of rows
   * @param n number of columns
   * @param x matrix from which to extract the diagonal
   * @return diagonal matrix&#13;&#10;&#32;&#32;&#32;</content>
    </Documentation>
    <Params>
     <Param name="m"/>
     <Param name="n"/>
     <Param name="x"/>
    </Params>
   </Definition>
   <Definition body="10129"
               end="10180"
               exported="1"
               fullname="std.blas.extract_tri"
               inherit_type="local"
               line="236"
               name="extract_tri"
               source="/home/sarthak/runtime/opt/HPCCSystems/6.5.0/clienttools/share/ecllibrary/std/BLAS.ecl"
               start="9932">
    <Type>function</Type>
    <Documentation>
     <content>&#13;&#10;&#32;&#32;&#32;* Extract the upper or lower triangle.  Diagonal can be actual or implied
   * unit diagonal.
   * @param m number of rows
   * @param n number of columns
   * @param tri Upper or Lower specifier, Triangle.Lower or Triangle.Upper
   * @param dt Use Diagonal.NotUnitTri or Diagonal.UnitTri
   * @param a Matrix, usually a composite from factoring
   * @return the triangle&#13;&#10;&#32;&#32;&#32;</content>
    </Documentation>
    <Params>
     <Param name="m"/>
     <Param name="n"/>
     <Param name="tri"/>
     <Param name="dt"/>
     <Param name="a"/>
    </Params>
   </Definition>
   <Definition body="10545"
               end="10585"
               exported="1"
               fullname="std.blas.make_diag"
               inherit_type="local"
               line="249"
               name="make_diag"
               source="/home/sarthak/runtime/opt/HPCCSystems/6.5.0/clienttools/share/ecllibrary/std/BLAS.ecl"
               start="10418">
    <Type>function</Type>
    <Documentation>
     <content>&#13;&#10;&#32;&#32;&#32;* Generate a diagonal matrix.
   * @param m number of diagonal entries
   * @param v option value, defaults to 1
   * @param X optional input of diagonal values, multiplied by v.
   * @return a diagonal matrix&#13;&#10;&#32;&#32;&#32;</content>
    </Documentation>
    <Params>
     <Param name="m"/>
     <Param name="v"/>
     <Param name="X"/>
    </Params>
   </Definition>
   <Definition body="11071"
               end="11098"
               exported="1"
               fullname="std.blas.make_vector"
               inherit_type="local"
               line="268"
               name="make_vector"
               source="/home/sarthak/runtime/opt/HPCCSystems/6.5.0/clienttools/share/ecllibrary/std/BLAS.ecl"
               start="10967">
    <Type>function</Type>
    <Documentation>
     <content>&#13;&#10;&#32;&#32;&#32;* Make a vector of dimension m
   * @param m number of elements
   * @param v the values, defaults to 1
   * @return the vector&#13;&#10;&#32;&#32;&#32;</content>
    </Documentation>
    <Params>
     <Param name="m"/>
     <Param name="v"/>
    </Params>
   </Definition>
   <Definition body="11426"
               end="11452"
               exported="1"
               fullname="std.blas.trace"
               inherit_type="local"
               line="279"
               name="trace"
               source="/home/sarthak/runtime/opt/HPCCSystems/6.5.0/clienttools/share/ecllibrary/std/BLAS.ecl"
               start="11297">
    <Type>function</Type>
    <Documentation>
     <content>&#13;&#10;&#32;&#32;&#32;* The trace of the input matrix
   * @param m number of rows
   * @param n number of columns
   * @param x the matrix
   * @return the trace (sum of the diagonal entries)&#13;&#10;&#32;&#32;&#32;</content>
    </Documentation>
    <Params>
     <Param name="m"/>
     <Param name="n"/>
     <Param name="x"/>
    </Params>
   </Definition>
   <Parents/>
  </Definition>
  <Import body="0"
          end="808"
          fullname="lib_eclblas"
          inherit_type="local"
          line="17"
          name="LIB_ECLBLAS"
          ref="lib_eclblas"
          remotescope="1"
          start="808">
   <Type>attribute</Type>
  </Import>
 </Source>
 <Source name="LogisticRegression.dimm" sourcePath="/media/sarthak/Data/ecldoc/testing/eclbundles/ml-bundles/LogisticRegression/dimm.ecl">
  <Definition body="1031"
              end="2194"
              exported="1"
              fullname="logisticregression.dimm"
              inherit_type="local"
              line="21"
              name="dimm"
              source="/media/sarthak/Data/ecldoc/testing/eclbundles/ml-bundles/LogisticRegression/dimm.ecl"
              start="698">
   <Type>embed</Type>
   <Documentation>
    <content>&#10;&#32;* Matrix multiply when either A or B is a diagonal and is passed
 * as a vector.
 * alpha*op(A) op(B) + beta*C where op() is transpose
 * @param transposeA true when transpose of A is used
 * @param transposeB true when transpose of B is used
 * @param diagonalA true when A is the diagonal matrix
 * @param diagonalB true when B is the diagonal matrix
 * @param m number of rows in product
 * @param n number of columns in product
 * @param k number of columns/rows for the multiplier/multiplicand
 * @param alpha scalar used on A
 * @param A matrix A
 * @param B matrix B
 * @param beta scalar for matrix C
 * @param C matrix C or empty&#10;&#32;</content>
   </Documentation>
   <Params>
    <Param name="transposeA"/>
    <Param name="transposeB"/>
    <Param name="diagonalA"/>
    <Param name="diagonalB"/>
    <Param name="m"/>
    <Param name="n"/>
    <Param name="k"/>
    <Param name="alpha"/>
    <Param name="A"/>
    <Param name="B"/>
    <Param name="beta"/>
    <Param name="C"/>
   </Params>
  </Definition>
  <Import body="0"
          end="7"
          fullname="std.BLAS"
          inherit_type="local"
          line="1"
          name="BLAS"
          ref="std.BLAS"
          start="7">
   <Type>attribute</Type>
  </Import>
  <Import body="0"
          end="24"
          fullname="std.BLAS.Types"
          inherit_type="local"
          line="2"
          name="Types"
          ref="std.BLAS.Types"
          start="24">
   <Type>attribute</Type>
  </Import>
 </Source>
</Meta>
