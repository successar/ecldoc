IMPORTS
=======


PBblas </media/sarthak/Data/ecldoc/testing/eclbundles/ml-bundles-docs/txt/PBblas/pkg.toc.txt>
PBblas.Types <Types.ecl.txt>
std.blas </home/sarthak/runtime/opt/HPCCSystems/6.5.0/clienttools/share/ecllibrary/std/BLAS.ecl>
PBblas.internal <internal/pkg.toc.txt>
PBblas.internal.Types <internal/Types.ecl.txt>
PBblas.internal.MatDims <internal/MatDims.ecl.txt>
PBblas.internal.Converted <internal/Converted.ecl.txt>
std.system.Thorlib </home/sarthak/runtime/opt/HPCCSystems/6.5.0/clienttools/share/ecllibrary/std/system/Thorlib.ecl>

DESCRIPTIONS
============

----------------------------------------------------------------------------------------------------------------------------------
FUNCTION : DATASET(Layout_Cell) trsm(Side s, Triangle tri, BOOLEAN transposeA, Diagonal diag,
                                    value_t alpha, DATASET(Layout_Cell) A_in, DATASET(Layout_Cell) B_in)
----------------------------------------------------------------------------------------------------------------------------------

Partitioned block parallel triangular matrix solver. Solves for X using: AX
= B or XA = B A is is a square triangular matrix, X and B have the same
dimensions. A may be an upper triangular matrix (UX = B or XU = B), or a
lower triangular matrix (LX = B or XL = B). Allows optional transposing and
scaling of A. Partially based upon an approach discussed by MJ DAYDE, IS
DUFF, AP CERFACS. A Parallel Block implementation of Level-3 BLAS for MIMD
Vector Processors ACM Tran. Mathematical Software, Vol 20, No 2, June 1994
pp 178-193 and other papers about PB-BLAS by Choi and Dongarra This module
supports the "Myriad" style interface, allowing many independent problems
to be worked on at once. Corresponding A and B matrixes are related by a
common work-item identifier (wi_id) within each cell of the matrix. The
returned X matrix will contain cells for the same set of work-items as
specified for the A and B matrices.

Parameter : alpha REAL8 --- Multiplier to scale A

Parameter : transposeA BOOLEAN --- Boolean indicating whether or not to
                       transpose the A matrix before solving

Parameter : A_in TABLE ( Layout_Cell ) --- The A matrix in
                 Layout_Cell format

Parameter : tri UNSIGNED1 --- Types.Triangle enumeration
                indicating whether we are solving an Upper or
                Lower triangle.

Parameter : B_in TABLE ( Layout_Cell ) --- The B matrix in
                 Layout_Cell format

Parameter : diag UNSIGNED1 --- Types.Diagonal enumeration
                 indicating whether A is a unit matrix or not. This
                 is primarily used after factoring matrixes using
                 getrf (LU factorization). That module produces a
                 factored matrix stored within the same space as
                 the original matrix. Since the diagonal is used by
                 both factors, by convention, the Lower triangle
                 has a unit matrix (diagonal all 1's) while the
                 Upper triangle uses the diagonal cells. Setting
                 this to UnitTri, causes the contents of the
                 diagonal to be ignored, and assumed to be 1.
                 NotUnitTri should be used for most other cases.

Parameter : s UNSIGNED1 --- Types.Side enumeration indicating
              whether we are solving AX = B or XA = B

Return : TABLE ( { UNSIGNED2 wi_id , UNSIGNED4 x ,
         UNSIGNED4 y , REAL8 v } ) X solution matrix in
         Layout_Cell format

See : Types.Layout_Cell

See : Types.Triangle

See : Types.Side

