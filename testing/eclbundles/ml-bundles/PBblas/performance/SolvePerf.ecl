/*##############################################################################
## HPCC SYSTEMS software Copyright (C) 2016 HPCC Systems.  All rights reserved.
############################################################################## */

// Test the performance of the triangular solver
IMPORT $.^ as PBblas;
IMPORT PBblas.internal as int;
IMPORT PBblas.MatUtils;
IMPORT PBblas.Types;
IMPORT int.Types as iTypes;
IMPORT PBblas.test as Tests;
IMPORT Tests.MakeTestMatrix as tm;

matrix_t := iTypes.matrix_t;
Triangle := Types.Triangle;
Diagonal := Types.Diagonal;
Upper  := Triangle.Upper;
Lower  := Triangle.Lower;
Layout_Part := iTypes.Layout_Part;
Side := Types.Side;
Layout_Cell := Types.Layout_Cell;

// Performance test for a full (rectangular) matrix Solve.  Data should have been previously
// generated by SolvePerfPrep.ecl

// Test size is 1 (small), 2 (medium) or 3 (large)
UNSIGNED test_size := 1 : STORED('test_size'); // default is "small"


// Test sizes small: 1000 x 1000, medium: 10000 x 10000, large: 10000 x 100000
// Rows and columns of A matrix
N1 := 1000;
N2 := 10000;
N3 := 10000;
// Columns of B matrix and Result (side=Ax) or Rows of B matrix and result (side=xA)
M1 := 1000;
M2 := 10000;
M3 := 100000;

//which_side := Side.Ax;
which_side := Side.xA;

A_s := DATASET('SolvePerf_A_s.dat', Layout_Cell, FLAT);
A_m := DATASET('SolvePerf_A_m.dat', Layout_Cell, FLAT);
A_l := DATASET('SolvePerf_A_l.dat', Layout_Cell, FLAT);
A := MAP(test_size = 1 => A_s, test_size = 2 => A_m, A_l);

B_ax_s := DATASET('SolvePerf_B_ax_s.dat', Layout_Cell, FLAT);
B_xa_s := DATASET('SolvePerf_B_xa_s.dat', Layout_Cell, FLAT);
B_ax_m := DATASET('SolvePerf_B_ax_m.dat', Layout_Cell, FLAT);
B_xa_m := DATASET('SolvePerf_B_xa_m.dat', Layout_Cell, FLAT);
B_ax_l := DATASET('SolvePerf_B_ax_l.dat', Layout_Cell, FLAT);
B_xa_l := DATASET('SolvePerf_B_xa_l.dat', Layout_Cell, FLAT);

B_ax := MAP(test_size = 1 => B_ax_s, test_size = 2 => B_ax_m, B_ax_l);
B_xa := MAP(test_size = 1 => B_xa_s, test_size = 2 => B_xa_m, B_xa_l);

B := IF(which_side = Side.Ax, B_ax, B_xa);

LU := PBblas.getrf(A);

firstTri := IF(which_side = Side.Ax, Upper, Lower);
secondTri := IF(which_side = Side.Ax, Lower, Upper);
firstDiag := IF(which_side = Side.Ax, Diagonal.NotUnitTri, Diagonal.UnitTri);
secondDiag := IF(which_side = Side.Ax, Diagonal.UnitTri, Diagonal.NotUnitTri);

S := PBblas.trsm(which_side, firstTri, FALSE, firstDiag,
                      1.0, LU, B);
Xout := PBblas.trsm(which_side, secondTri, FALSE, secondDiag,
                      1.0, LU, S);

OUTPUT(COUNT(Xout), NAMED('XCount'));