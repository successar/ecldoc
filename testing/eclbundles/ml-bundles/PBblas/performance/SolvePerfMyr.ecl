/*##############################################################################
## HPCC SYSTEMS software Copyright (C) 2016 HPCC Systems.  All rights reserved.
############################################################################## */

// Test the performance of the triangular solver (Myriad).  This module consumes
// data generated by SolvePerfMyrPrep.ecl, which should always be run before this
// test to stage the data. Pass a test_size using eclcc -X<test_size>.  See test_size
// below.

IMPORT $.^ as PBblas;
IMPORT PBblas.internal as int;
IMPORT PBblas.MatUtils;
IMPORT PBblas.Types;
IMPORT int.Types as iTypes;
IMPORT PBblas.test as Tests;
IMPORT Tests.MakeTestMatrix as tm;

matrix_t := iTypes.matrix_t;
Triangle := Types.Triangle;
Diagonal := Types.Diagonal;
Upper  := Triangle.Upper;
Lower  := Triangle.Lower;
Layout_Cell := types.Layout_Cell;
Side := Types.Side;


// Performance test for a full (rectangular) matrix Solve

// Test size is 1 (small), 2 (medium) or 3 (large)
UNSIGNED1 test_size := 1 : STORED('test_size'); // default is "small"

A_s :=  DATASET('SolvePerfMyr_A_s.dat', Layout_Cell, FLAT);
B_s :=  DATASET('SolvePerfMyr_B_s.dat', Layout_Cell, FLAT);
A_m :=  DATASET('SolvePerfMyr_A_m.dat', Layout_Cell, FLAT);
B_m :=  DATASET('SolvePerfMyr_B_m.dat', Layout_Cell, FLAT);
A_l :=  DATASET('SolvePerfMyr_A_l.dat', Layout_Cell, FLAT);
B_l :=  DATASET('SolvePerfMyr_B_l.dat', Layout_Cell, FLAT);

A_myr := MAP(test_size = 1 => A_s, test_size = 2 => A_m, A_l);
B_myr := MAP(test_size = 1 => B_s, test_size = 2 => B_m, B_l);

L := PBblas.getrf(A_myr);

S := PBblas.trsm(Side.Ax, Lower, FALSE, Diagonal.UnitTri,
                      1.0, L, B_myr);
Xout := PBblas.trsm(Side.Ax, Upper, TRUE, Diagonal.UnitTri,
                      1.0, L, S);

result := COUNT(Xout);

EXPORT SolvePerfMyr := result;
