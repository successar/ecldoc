/*##############################################################################
## HPCC SYSTEMS software Copyright (C) 2017 HPCC Systems.  All rights reserved.
############################################################################## */
// This module provides different levels of Linear Regression using the OLS module
// and verifies that they can predict new values that are generated by a linear
// formula.
// It works off synthetic data that is generated by a linear formula with noise.

IMPORT $.^ as LROLS;
IMPORT ML_Core;
IMPORT ML_Core.Types as mlTypes;
IMPORT PBblas;
IMPORT PBBlas.test.MakeTestMatrix as tm;
IMPORT PBBlas.Types as pbbTypes;
IMPORT PBBlas.Converted as pbbConverted;
Layout_Cell := pbbTypes.Layout_Cell;
NumericField := mlTypes.NumericField;
two31 := POWER(2, 31);
REAL Noise := FUNCTION
  out := ((RANDOM()-two31)%1000)/10000;
  return out;
END;

test_rslt := RECORD
  STRING50 TestName;
  SET OF REAL X;
  REAL Y_indx := 1; // Which Y we are comparing when doing multi-variate
  REAL Y;
  REAL projY;
  REAL diff;
  REAL pctErr;
END;

// TEST 1 -- Simple Linear Regression
A1 := 3.123;  // Slope
B1 := -1.222; // Intercept
N1 := 10000;
M1 := 1;

mX1 := tm.RandomMatrix(N1, M1, 1.0, 1);

Layout_Cell makeY(Layout_Cell X) := TRANSFORM
  SELF.x := X.x;
  SELF.y := 1;
  SELF.wi_id := X.wi_id;
  SELF.v := A1 * X.v + B1 + Noise;
END;
mY1 := PROJECT(mX1, makeY(LEFT));
X1 := pbbConverted.MatrixToNF(mX1);
Y1 := pbbConverted.MatrixToNF(mY1);
lr1 := LROLS.OLS(X1, Y1);

newmX1 := tm.RandomMatrix(50, M1, 1.0, 1);

newX1 := pbbConverted.MatrixToNF(newmX1);
predY1 := lr1.Predict(newX1);
test_rslt formatRslt1(STRING32 tn, NumericField l, NumericField r) := TRANSFORM
  SELF.TestName := tn;
  SELF.X := [l.value];
  SELF.Y := r.value;
  SELF.projY := A1 * l.value + B1;
  SELF.diff := SELF.Y - SELF.projY;
  SELF.pctErr := SELF.diff / SELF.projY;
END;
rslt1 := JOIN(newX1, predY1, LEFT.id=RIGHT.id, formatRslt1('TEST 1 -- Simple Regression', LEFT, RIGHT));

// TEST2 -- Multiple Regression
compX2 := RECORD
  REAL wi;
  REAL id;
  REAL X1;
  REAL X2;
  REAL X3;
END;
compX2 makeComposite2(Layout_Cell l, DATASET(Layout_Cell) r) := TRANSFORM
  SELF.wi := l.wi_id;
  SELF.id := l.x;
  SELF.X1 := r(y=1)[1].v;
  SELF.X2 := r(y=2)[1].v;
  SELF.X3 := r(y=3)[1].v;
END;
A21 := -1.8;
A22 := -4.333;
A23 := 11.13;
B2 := -3.333;
N2 := 10000;
M2 := 3;

mX2 := tm.RandomMatrix(N2, M2, 1.0, 2);

sX2 := SORT(mX2, wi_id, x);
gX2 := GROUP(sX2, wi_id, x);
cX2 := ROLLUP(gX2,  GROUP, makeComposite2(LEFT, ROWS(LEFT)));
Layout_Cell makeY2(compX2 X) := TRANSFORM
  SELF.x := X.id;
  SELF.y := 1;
  SELF.wi_id := X.wi;
  SELF.v := A21* X.X1 + A22 * X.X2 + A23 * X.X3 + B2 + Noise;
END;
mY2 := PROJECT(cX2, makeY2(LEFT));
X2 := pbbConverted.MatrixToNF(mX2);
Y2 := pbbConverted.MatrixToNF(my2);
lr2 := LROLS.OLS(X2, Y2);

newmX2 := tm.RandomMatrix(50, M2, 1.0, 2);

newX2 := pbbConverted.MatrixToNF(newmX2);
predY2 := lr2.Predict(newX2);

sNewX2 := SORT(newmX2, wi_id, x);
gNewX2 := GROUP(sNewX2, wi_id, x);
cNewX2 := ROLLUP(gNewX2,  GROUP, makeComposite2(LEFT, ROWS(LEFT)));
test_rslt formatRslt2(STRING32 tn, compX2 l, NumericField r) := TRANSFORM
  SELF.TestName := tn;
  SELF.X := [l.X1, l.X2, l.X3];
  SELF.Y := r.value;
  SELF.projY := B2 + A21 * l.X1 + A22 * l.X2 + A23 * l.X3;
  SELF.diff := SELF.Y - SELF.projY;
  SELF.pctErr := ABS(SELF.diff / SELF.projY);
END;
DATASET(test_rslt) rslt2 := JOIN(cNewX2, predY2, LEFT.id=RIGHT.id, formatRslt2('TEST 2 -- Multiple Regression', LEFT, RIGHT));

// TEST 3 -- Myriad -- Test 1 and Test 2 simultaneously
lr3 := LROLS.OLS(X1 + X2, Y2 + Y1);

predY3 := lr3.Predict(newX2 + newX1);

predY31 := predY3(wi=1);
predY32 := predY3(wi=2);

rslt31 := JOIN(newX1, predY31, LEFT.id=RIGHT.id, formatRslt1('TEST 31 -- Myriad(1)', LEFT, RIGHT));
rslt32 := JOIN(cNewX2, predY32, LEFT.id=RIGHT.id, formatRslt2('TEST 32 -- Myriad(2)', LEFT, RIGHT));

// TEST 4 -- Same as test 3 but with saved model

lr4 := LROLS.OLS();
model4 := lr3.GetModel;

predY4 := lr4.Predict(newX2 + newX1, model4);

predY41 := predY4(wi=1);
predY42 := predY4(wi=2);

rslt41 := JOIN(newX1, predY41, LEFT.id=RIGHT.id, formatRslt1('TEST 41 -- Saved Model(1)', LEFT, RIGHT));
rslt42 := JOIN(cNewX2, predY42, LEFT.id=RIGHT.id, formatRslt2('TEST 42 -- Saved Model(2)', LEFT, RIGHT));

// TEST 5 -- Multi-variate regression.  Multiple Y values
compX5 := RECORD
  REAL wi;
  REAL id;
  REAL number;
  REAL X1;
  REAL X2;
  REAL X3;
END;
compX5 makeComposite5(Layout_Cell l, DATASET(Layout_Cell) r) := TRANSFORM
  SELF.wi := l.wi_id;
  SELF.id := l.x;
  SELF.number := l.y;
  SELF.X1 := r(y=1)[1].v;
  SELF.X2 := r(y=2)[1].v;
  SELF.X3 := r(y=3)[1].v;
END;
// Coefficients for Y1
A51_1 := -1.8;
A52_1 := -4.333;
A53_1 := 11.13;
B5_1 := -3.333;
// Coefficients for Y2
A51_2 := 2.123;
A52_2 := -7.508;
A53_2 := -1.765;
B5_2  := 2.654;
N5 := 10000;
M5 := 3;

mX5 := tm.RandomMatrix(N5, M5, 1.0, 1);

sX5 := SORT(mX5, wi_id, x);
gX5 := GROUP(sX5, wi_id, x);
cX5 := ROLLUP(gX5,  GROUP, makeComposite5(LEFT, ROWS(LEFT)));
Layout_Cell makeY5(compX5 X, UNSIGNED c) := TRANSFORM
  SELF.x := X.id;
  SELF.y := c;
  SELF.wi_id := X.wi;
  v1 := A51_1 * X.X1 + A52_1 * X.X2 + A53_1 * X.X3 + B5_1 + Noise;
  v2 := A51_2 * X.X1 + A52_2 * X.X2 + A53_2 * X.X3 + B5_2 + Noise;
  SELF.v := IF(c=1, v1, v2);
END;

mY5 := NORMALIZE(cX5, 2, makeY5(LEFT, COUNTER));
X5 := pbbConverted.MatrixToNF(mX5);
Y5 := pbbConverted.MatrixToNF(my5);
lr5 := LROLS.OLS(X5, Y5);

newmX5 := tm.RandomMatrix(50, M5, 1.0, 1);

newX5 := pbbConverted.MatrixToNF(newmX5);
predY5 := lr5.Predict(newX5);

sNewX5 := SORT(newmX5, wi_id, x);
gNewX5 := GROUP(sNewX5, wi_id, x);
cNewX5 := ROLLUP(gNewX5,  GROUP, makeComposite5(LEFT, ROWS(LEFT)));
test_rslt formatRslt5(STRING32 tn, compX5 l, NumericField r) := TRANSFORM
  SELF.TestName := tn;
  SELF.X := [l.X1, l.X2, l.X3];
  SELF.Y := r.value;
  SELF.Y_indx := r.number;
  projY1 := B5_1 + A51_1 * l.X1 + A52_1 * l.X2 + A53_1 * l.X3;
  projY2 := B5_2 + A51_2 * l.X1 + A52_2 * l.X2 + A53_2 * l.X3;
  SELF.projY := IF(SELF.Y_indx = 1, projY1, projY2);
  SELF.diff := SELF.Y - SELF.projY;
  SELF.pctErr := ABS(SELF.diff / SELF.projY);
END;

DATASET(test_rslt) rslt51 := JOIN(cNewX5(number=1), predY5(number=1), LEFT.id=RIGHT.id, formatRslt5('TEST 51 -- Multi-variate Y1', LEFT, RIGHT));
DATASET(test_rslt) rslt52 := JOIN(cNewX5(number=2), predY5(number=2), LEFT.id=RIGHT.id, formatRslt5('TEST 52 -- Multi-variate Y2', LEFT, RIGHT));

details0 := rslt1 + rslt2 + rslt31 + rslt32 + rslt41 + rslt42 + rslt51 + rslt52;

details := SORT(details0, testname);
Epsilon := .00001;
test_summary := RECORD
  STRING50   testname := details.testname;
  REAL     maxErr := MAX(GROUP, details.pctErr);
  REAL     avgErr := AVE(GROUP, details.pctErr);
  STRING8  status := IF(AVE(GROUP, details.pctErr) > Epsilon, 'FAIL', 'SUCCESS');
END;
summary := TABLE(details, test_summary, testname);


OUTPUT(details0, NAMED('Details'));
OUTPUT(summary, NAMED('Summary'));
