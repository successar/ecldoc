<?xml version='1.0' encoding='UTF-8'?>
<Meta>
 <Depends sourcePath="lib_fileservices" target="lib_fileservices"/><Source name="File" sourcePath="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/File.ecl" target="File.ecl.xml">
  <Import body="0" end="274" fullname="lib_fileservices" inherit_type="local" line="7" name="lib_fileservices" ref="lib_fileservices" remotescope="1" start="274" target="lib_fileservices/pkg.toc.xml">
   <Type>attribute</Type>
  </Import>
  <Definition body="258" end="54648" exported="1" fullname="File" inherit_type="local" line="5" name="File" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/File.ecl" start="244">
   <Type>module</Type>
   <Definition body="655" end="690" exported="1" fullname="file.fsfilenamerecord" inherit_type="local" line="19" name="FsFilenameRecord" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/File.ecl" start="629">
    <Type>record</Type>
    <Field name="name"/>
    <Field name="size"/>
    <Field name="modified"/>
    <Signature name="FsFilenameRecord" ret="" param="" hlen="16">FsFilenameRecord</Signature><Documentation>
     <firstline>A record containing information about filename</firstline><content>A record containing information about filename. Includes name, size and when last modified. export FsFilenameRecord := RECORD string name; integer8 size; string19 modified; END;</content></Documentation>
   </Definition>
   <Definition body="788" end="824" exported="1" fullname="file.fslogicalfilename" inherit_type="local" line="25" name="FsLogicalFileName" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/File.ecl" start="761">
    <Type>attribute</Type>
    <Signature name="FsLogicalFileName" ret="" param="" hlen="17">FsLogicalFileName</Signature><Documentation>
     <firstline>An alias for a logical filename that is stored in a row</firstline><content>An alias for a logical filename that is stored in a row.</content></Documentation>
   </Definition>
   <Definition body="1002" end="1044" exported="1" fullname="file.fslogicalfilenamerecord" inherit_type="local" line="33" name="FsLogicalFileNameRecord" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/File.ecl" start="969">
    <Type>record</Type>
    <Field name="name"/>
    <Signature name="FsLogicalFileNameRecord" ret="" param="" hlen="23">FsLogicalFileNameRecord</Signature><Documentation>
     <firstline>A record containing a logical filename</firstline><field><name>name</name><desc>The logical name of the file;</desc></field><content>A record containing a logical filename. It contains the following fields:</content></Documentation>
   </Definition>
   <Definition body="1615" end="1657" exported="1" fullname="file.fslogicalfileinforecord" inherit_type="local" line="47" name="FsLogicalFileInfoRecord" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/File.ecl" start="1582">
    <Type>record</Type>
    <Field name="name"/>
    <Field name="superfile"/>
    <Field name="size"/>
    <Field name="rowcount"/>
    <Field name="modified"/>
    <Field name="owner"/>
    <Field name="cluster"/>
    <Signature name="FsLogicalFileInfoRecord" ret="" param="" hlen="23">FsLogicalFileInfoRecord</Signature><Documentation>
     <firstline>A record containing information about a logical file</firstline><owner>The username of the owner who ran the job to create this file.</owner><cluster>The cluster that this file was created on.</cluster><modified>Timestamp when the file was last modified;</modified><field><name>superfile</name><desc>Is this a superfile?</desc></field><field><name>size</name><desc>Number of bytes in the file (before compression)</desc></field><field><name>rowcount</name><desc>Number of rows in the file.</desc></field><content>A record containing information about a logical file.</content><inherits>Contains all the fields in FsLogicalFileNameRecord)</inherits></Documentation>
   </Definition>
   <Definition body="1874" end="1916" exported="1" fullname="file.fslogicalsupersubrecord" inherit_type="local" line="56" name="FsLogicalSuperSubRecord" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/File.ecl" start="1841">
    <Type>record</Type>
    <Field name="supername"/>
    <Field name="subname"/>
    <Signature name="FsLogicalSuperSubRecord" ret="" param="" hlen="23">FsLogicalSuperSubRecord</Signature><Documentation>
     <firstline>A record containing information about a superfile and its contents</firstline><field><name>supername</name><desc>The name of the superfile</desc></field><field><name>subname</name><desc>The name of the sub-file</desc></field><content>A record containing information about a superfile and its contents.</content></Documentation>
   </Definition>
   <Definition body="2930" end="2973" exported="1" fullname="file.fsfilerelationshiprecord" inherit_type="local" line="74" name="FsFileRelationshipRecord" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/File.ecl" start="2896">
    <Type>record</Type>
    <Field name="primaryfile"/>
    <Field name="secondaryfile"/>
    <Field name="primaryflds"/>
    <Field name="secondaryflds"/>
    <Field name="kind"/>
    <Field name="cardinality"/>
    <Field name="payload"/>
    <Field name="description"/>
    <Signature name="FsFileRelationshipRecord" ret="" param="" hlen="24">FsFileRelationshipRecord</Signature><Documentation>
     <firstline>A record containing information about the relationship between two files</firstline><field><name>primaryfile</name><desc>The logical filename of the primary file</desc></field><field><name>secondaryfile</name><desc>The logical filename of the secondary file.</desc></field><field><name>primaryflds</name><desc>The name of the primary key field for the primary file. The value "__fileposition__" indicates the secondary is an INDEX that must use FETCH to access non-keyed fields.</desc></field><field><name>secondaryflds</name><desc>The name of the foreign key field relating to the primary file.</desc></field><field><name>kind</name><desc>The type of relationship between the primary and secondary files. Containing either 'link' or 'view'.</desc></field><field><name>cardinality</name><desc>The cardinality of the relationship. The format is &lt;primary&gt;:&lt;secondary&gt;. Valid values are "1" or "M".&lt;/secondary&gt;&lt;/primary&gt;</desc></field><field><name>payload</name><desc>Indicates whether the primary or secondary are payload INDEXes.</desc></field><field><name>description</name><desc>The description of the relationship.</desc></field><content>A record containing information about the relationship between two files.</content></Documentation>
   </Definition>
   <Definition body="3110" end="3143" exported="1" fullname="file.recfmv_recsize" inherit_type="local" line="80" name="RECFMV_RECSIZE" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/File.ecl" start="3086">
    <Type>attribute</Type>
    <Signature name="RECFMV_RECSIZE" ret="" param="" hlen="14">RECFMV_RECSIZE</Signature><Documentation>
     <firstline>Constant that indicates IBM RECFM V format file</firstline><content>Constant that indicates IBM RECFM V format file. Can be passed to SprayFixed for the record size.</content></Documentation>
   </Definition>
   <Definition body="3282" end="3316" exported="1" fullname="file.recfmvb_recsize" inherit_type="local" line="86" name="RECFMVB_RECSIZE" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/File.ecl" start="3257">
    <Type>attribute</Type>
    <Signature name="RECFMVB_RECSIZE" ret="" param="" hlen="15">RECFMVB_RECSIZE</Signature><Documentation>
     <firstline>Constant that indicates IBM RECFM VB format file</firstline><content>Constant that indicates IBM RECFM VB format file. Can be passed to SprayFixed for the record size.</content></Documentation>
   </Definition>
   <Definition body="3500" end="3542" exported="1" fullname="file.prefix_variable_recsize" inherit_type="local" line="92" name="PREFIX_VARIABLE_RECSIZE" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/File.ecl" start="3458">
    <Type>attribute</Type>
    <Signature name="PREFIX_VARIABLE_RECSIZE" ret="INTEGER4" param="" hlen="32">INTEGER4 PREFIX_VARIABLE_RECSIZE</Signature><Documentation>
     <firstline>Constant that indicates a variable little endian 4 byte length prefixed file</firstline><content>Constant that indicates a variable little endian 4 byte length prefixed file. Can be passed to SprayFixed for the record size.</content></Documentation>
   </Definition>
   <Definition body="3733" end="3785" exported="1" fullname="file.prefix_variable_bigendian_recsize" inherit_type="local" line="98" name="PREFIX_VARIABLE_BIGENDIAN_RECSIZE" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/File.ecl" start="3681">
    <Type>attribute</Type>
    <Signature name="PREFIX_VARIABLE_BIGENDIAN_RECSIZE" ret="INTEGER4" param="" hlen="42">INTEGER4 PREFIX_VARIABLE_BIGENDIAN_RECSIZE</Signature><Documentation>
     <firstline>Constant that indicates a variable big endian 4 byte length prefixed file</firstline><content>Constant that indicates a variable big endian 4 byte length prefixed file. Can be passed to SprayFixed for the record size.</content></Documentation>
   </Definition>
   <Definition body="4226" end="4287" exported="1" fullname="file.fileexists" inherit_type="local" line="110" name="FileExists" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/File.ecl" start="4159">
    <Type>function</Type>
    <Documentation>
     <firstline>Returns whether the file exists</firstline><content>Returns whether the file exists.</content><return>Whether the file exists.</return><param><name>lfn</name><desc>The logical name of the file.</desc></param><param><name>physical</name><desc>Whether to also check for the physical existence on disk. Defaults to FALSE.</desc></param></Documentation>
    <Signature name="FileExists" ret="boolean" param="(varstring lfn, boolean physical=FALSE)" hlen="18">boolean FileExists(varstring lfn, boolean physical=FALSE)</Signature><Params>
     <Param name="lfn"/>
     <Param name="physical"/>
    </Params>
   </Definition>
   <Definition body="4601" end="4673" exported="1" fullname="file.deletelogicalfile" inherit_type="local" line="120" name="DeleteLogicalFile" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/File.ecl" start="4531">
    <Type>function</Type>
    <Documentation>
     <firstline>Removes the logical file from the system, and deletes from the disk</firstline><content>Removes the logical file from the system, and deletes from the disk.</content><param><name>lfn</name><desc>The logical name of the file.</desc></param><param><name>allowMissing</name><desc>Whether to suppress an error if the filename does not exist. Defaults to FALSE.</desc></param></Documentation>
    <Signature name="DeleteLogicalFile" ret="" param="(varstring lfn, boolean allowMissing=FALSE)" hlen="17">DeleteLogicalFile(varstring lfn, boolean allowMissing=FALSE)</Signature><Params>
     <Param name="lfn"/>
     <Param name="allowMissing"/>
    </Params>
   </Definition>
   <Definition body="4937" end="4993" exported="1" fullname="file.setreadonly" inherit_type="local" line="129" name="SetReadOnly" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/File.ecl" start="4884">
    <Type>function</Type>
    <Documentation>
     <firstline>Changes whether access to a file is read only or not</firstline><content>Changes whether access to a file is read only or not.</content><param><name>lfn</name><desc>The logical name of the file.</desc></param><param><name>ro</name><desc>Whether updates to the file are disallowed. Defaults to TRUE.</desc></param></Documentation>
    <Signature name="SetReadOnly" ret="" param="(varstring lfn, boolean ro=TRUE)" hlen="11">SetReadOnly(varstring lfn, boolean ro=TRUE)</Signature><Params>
     <Param name="lfn"/>
     <Param name="ro"/>
    </Params>
   </Definition>
   <Definition body="5237" end="5308" exported="1" fullname="file.renamelogicalfile" inherit_type="local" line="139" name="RenameLogicalFile" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/File.ecl" start="5172">
    <Type>function</Type>
    <Documentation>
     <firstline>Changes the name of a logical file</firstline><content>Changes the name of a logical file.</content><param><name>oldname</name><desc>The current name of the file to be renamed.</desc></param><param><name>newname</name><desc>The new logical name of the file.</desc></param></Documentation>
    <Signature name="RenameLogicalFile" ret="" param="(varstring oldname, varstring newname)" hlen="17">RenameLogicalFile(varstring oldname, varstring newname)</Signature><Params>
     <Param name="oldname"/>
     <Param name="newname"/>
    </Params>
   </Definition>
   <Definition body="5870" end="5956" exported="1" fullname="file.foreignlogicalfilename" inherit_type="local" line="151" name="ForeignLogicalFileName" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/File.ecl" start="5763">
    <Type>function</Type>
    <Documentation>
     <firstline>Returns a logical filename that can be used to refer to a logical file in a local or remote dali</firstline><content>Returns a logical filename that can be used to refer to a logical file in a local or remote dali.</content><param><name>name</name><desc>The logical name of the file.</desc></param><param><name>foreigndali</name><desc>The IP address of the foreign dali used to resolve the file. If blank then the file is resolved locally. Defaults to blank.</desc></param><param><name>abspath</name><desc>Should a tilde (~) be prepended to the resulting logical file name. Defaults to FALSE.</desc></param></Documentation>
    <Signature name="ForeignLogicalFileName" ret="varstring" param="(varstring name, varstring foreigndali='', boolean abspath=FALSE)" hlen="32">varstring ForeignLogicalFileName(varstring name, varstring foreigndali='', boolean abspath=FALSE)</Signature><Params>
     <Param name="name"/>
     <Param name="foreigndali"/>
     <Param name="abspath"/>
    </Params>
   </Definition>
   <Definition body="6608" end="6692" exported="1" fullname="file.externallogicalfilename" inherit_type="local" line="164" name="ExternalLogicalFileName" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/File.ecl" start="6507">
    <Type>function</Type>
    <Documentation>
     <firstline>Returns an encoded logical filename that can be used to refer to a external file</firstline><content>Returns an encoded logical filename that can be used to refer to a external file. Examples include directly reading from a landing zone. Upper case characters and other details are escaped.</content><return>The encoded logical filename.</return><param><name>location</name><desc>The IP address of the remote machine. '.' can be used for the local machine.</desc></param><param><name>path</name><desc>The path/name of the file on the remote machine.</desc></param><param><name>abspath</name><desc>Should a tilde (~) be prepended to the resulting logical file name. Defaults to TRUE.</desc></param></Documentation>
    <Signature name="ExternalLogicalFileName" ret="varstring" param="(varstring location, varstring path, boolean abspath=TRUE)" hlen="33">varstring ExternalLogicalFileName(varstring location, varstring path, boolean abspath=TRUE)</Signature><Params>
     <Param name="location"/>
     <Param name="path"/>
     <Param name="abspath"/>
    </Params>
   </Definition>
   <Definition body="7022" end="7081" exported="1" fullname="file.getfiledescription" inherit_type="local" line="174" name="GetFileDescription" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/File.ecl" start="6969">
    <Type>function</Type>
    <Documentation>
     <firstline>Returns a string containing the description information associated with the specified filename</firstline><content>Returns a string containing the description information associated with the specified filename. This description is set either through ECL watch or by using the FileServices.SetFileDescription function.</content><param><name>lfn</name><desc>The logical name of the file.</desc></param></Documentation>
    <Signature name="GetFileDescription" ret="varstring" param="(varstring lfn)" hlen="28">varstring GetFileDescription(varstring lfn)</Signature><Params>
     <Param name="lfn"/>
    </Params>
   </Definition>
   <Definition body="7343" end="7407" exported="1" fullname="file.setfiledescription" inherit_type="local" line="184" name="SetFileDescription" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/File.ecl" start="7285">
    <Type>function</Type>
    <Documentation>
     <firstline>Sets the description associated with the specified filename</firstline><content>Sets the description associated with the specified filename.</content><param><name>lfn</name><desc>The logical name of the file.</desc></param><param><name>val</name><desc>The description to be associated with the file.</desc></param></Documentation>
    <Signature name="SetFileDescription" ret="" param="(varstring lfn, varstring val)" hlen="18">SetFileDescription(varstring lfn, varstring val)</Signature><Params>
     <Param name="lfn"/>
     <Param name="val"/>
    </Params>
   </Definition>
   <Definition body="8106" end="8188" exported="1" fullname="file.remotedirectory" inherit_type="local" line="196" name="RemoteDirectory" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/File.ecl" start="7976">
    <Type>function</Type>
    <Documentation>
     <firstline>Returns a dataset containing a list of files from the specified machineIP and directory</firstline><content>Returns a dataset containing a list of files from the specified machineIP and directory.</content><param><name>machineIP</name><desc>The IP address of the remote machine.</desc></param><param><name>directory</name><desc>The path to the directory to read. This must be in the appropriate format for the operating system running on the remote machine.</desc></param><param><name>mask</name><desc>The filemask specifying which files to include in the result. Defaults to '*' (all files).</desc></param><param><name>recurse</name><desc>Whether to include files from subdirectories under the directory. Defaults to FALSE.</desc></param></Documentation>
    <Signature name="RemoteDirectory" ret="dataset(FsFilenameRecord)" param="(varstring machineIP, varstring dir, varstring mask='*', boolean recurse=FALSE)" hlen="41">dataset(FsFilenameRecord) RemoteDirectory(varstring machineIP, varstring dir, varstring mask='*', boolean recurse=FALSE)</Signature><Params>
     <Param name="machineIP"/>
     <Param name="dir"/>
     <Param name="mask"/>
     <Param name="recurse"/>
    </Params>
   </Definition>
   <Definition body="9010" end="9130" exported="1" fullname="file.logicalfilelist" inherit_type="local" line="209" name="LogicalFileList" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/File.ecl" start="8815">
    <Type>function</Type>
    <Documentation>
     <firstline>Returns a dataset of information about the logical files known to the system</firstline><content>Returns a dataset of information about the logical files known to the system.</content><param><name>namepattern</name><desc>The mask of the files to list. Defaults to '*' (all files).</desc></param><param><name>includenormal</name><desc>Whether to include 'normal' files. Defaults to TRUE.</desc></param><param><name>includesuper</name><desc>Whether to include SuperFiles. Defaults to FALSE.</desc></param><param><name>unknownszero</name><desc>Whether to set file sizes that are unknown to zero(0) instead of minus-one (-1). Defaults to FALSE.</desc></param><param><name>foreigndali</name><desc>The IP address of the foreign dali used to resolve the file. If blank then the file is resolved locally. Defaults to blank.</desc></param></Documentation>
    <Signature name="LogicalFileList" ret="dataset(FsLogicalFileInfoRecord)" param="(varstring namepattern='*', boolean includenormal=TRUE, boolean includesuper=FALSE, boolean unknownszero=FALSE, varstring foreigndali='')" hlen="48">dataset(FsLogicalFileInfoRecord) LogicalFileList(varstring namepattern='*', boolean includenormal=TRUE, boolean includesuper=FALSE, boolean unknownszero=FALSE, varstring foreigndali='')</Signature><Params>
     <Param name="namepattern"/>
     <Param name="includenormal"/>
     <Param name="includesuper"/>
     <Param name="unknownszero"/>
     <Param name="foreigndali"/>
    </Params>
   </Definition>
   <Definition body="10231" end="10315" exported="1" fullname="file.comparefiles" inherit_type="local" line="228" name="CompareFiles" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/File.ecl" start="10117">
    <Type>function</Type>
    <Documentation>
     <firstline>Compares two files, and returns a result indicating how well they match</firstline><content>Compares two files, and returns a result indicating how well they match.</content><return>0 if file1 and file2 match exactly 1 if file1 and file2 contents match, but file1 is newer than file2 -1 if file1 and file2 contents match, but file2 is newer than file1 2 if file1 and file2 contents do not match and file1 is newer than file2 -2 if file1 and file2 contents do not match and file2 is newer than file1</return><param><name>file1</name><desc>The logical name of the first file.</desc></param><param><name>file2</name><desc>The logical name of the second file.</desc></param><param><name>logical_only</name><desc>Whether to only compare logical information in the system datastore (Dali), and ignore physical information on disk. [Default TRUE]</desc></param><param><name>use_crcs</name><desc>Whether to compare physical CRCs of all the parts on disk. This may be slow on large files. Defaults to FALSE.</desc></param></Documentation>
    <Signature name="CompareFiles" ret="INTEGER4" param="(varstring lfn1, varstring lfn2, boolean logical_only=TRUE, boolean use_crcs=FALSE)" hlen="21">INTEGER4 CompareFiles(varstring lfn1, varstring lfn2, boolean logical_only=TRUE, boolean use_crcs=FALSE)</Signature><Params>
     <Param name="lfn1"/>
     <Param name="lfn2"/>
     <Param name="logical_only"/>
     <Param name="use_crcs"/>
    </Params>
   </Definition>
   <Definition body="11216" end="11276" exported="1" fullname="file.verifyfile" inherit_type="local" line="244" name="VerifyFile" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/File.ecl" start="11154">
    <Type>function</Type>
    <Documentation>
     <firstline>Checks the system datastore (Dali) information for the file against the physical parts on disk</firstline><content>Checks the system datastore (Dali) information for the file against the physical parts on disk.</content><return>'OK' - The file parts match the datastore information 'Could not find file: &lt;filename&gt;' - The logical filename was not found 'Could not find part file: &lt;partname&gt;' - The partname was not found 'Modified time differs for: &lt;partname&gt;' - The partname has a different timestamp 'File size differs for: &lt;partname&gt;' - The partname has a file size 'File CRC differs for: &lt;partname&gt;' - The partname has a different CRC&lt;/partname&gt;&lt;/partname&gt;&lt;/partname&gt;&lt;/partname&gt;&lt;/filename&gt;</return><param><name>lfn</name><desc>The name of the file to check.</desc></param><param><name>use_crcs</name><desc>Whether to compare physical CRCs of all the parts on disk. This may be slow on large files.</desc></param></Documentation>
    <Signature name="VerifyFile" ret="varstring" param="(varstring lfn, boolean usecrcs)" hlen="20">varstring VerifyFile(varstring lfn, boolean usecrcs)</Signature><Params>
     <Param name="lfn"/>
     <Param name="usecrcs"/>
    </Params>
   </Definition>
   <Definition body="12682" end="12827" exported="1" fullname="file.addfilerelationship" inherit_type="local" line="265" name="AddFileRelationship" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/File.ecl" start="12475">
    <Type>function</Type>
    <Documentation>
     <firstline>Defines the relationship between two files</firstline><content>Defines the relationship between two files. These may be DATASETs or INDEXes. Each record in the primary file should be uniquely defined by the primaryfields (ideally), preferably efficiently. This information is used by the roxie browser to link files together.</content><param><name>primary</name><desc>The logical filename of the primary file.</desc></param><param><name>secondary</name><desc>The logical filename of the secondary file.</desc></param><param><name>primaryfields</name><desc>The name of the primary key field for the primary file. The value "__fileposition__" indicates the secondary is an INDEX that must use FETCH to access non-keyed fields.</desc></param><param><name>secondaryfields</name><desc>The name of the foreign key field relating to the primary file.</desc></param><param><name>relationship</name><desc>The type of relationship between the primary and secondary files. Containing either 'link' or 'view'. Default is "link".</desc></param><param><name>cardinality</name><desc>The cardinality of the relationship. The format is &lt;primary&gt;:&lt;secondary&gt;. Valid values are "1" or "M".&lt;/secondary&gt;&lt;/primary&gt;</desc></param><param><name>payload</name><desc>Indicates whether the primary or secondary are payload INDEXes.</desc></param><param><name>description</name><desc>The description of the relationship.</desc></param></Documentation>
    <Signature name="AddFileRelationship" ret="" param="(varstring primary, varstring secondary, varstring primaryflds, varstring secondaryflds, varstring kind='link', varstring cardinality, boolean payload, varstring description='')" hlen="19">AddFileRelationship(varstring primary, varstring secondary, varstring primaryflds, varstring secondaryflds, varstring kind='link', varstring cardinality, boolean payload, varstring description='')</Signature><Params>
     <Param name="primary"/>
     <Param name="secondary"/>
     <Param name="primaryflds"/>
     <Param name="secondaryflds"/>
     <Param name="kind"/>
     <Param name="cardinality"/>
     <Param name="payload"/>
     <Param name="description"/>
    </Params>
   </Definition>
   <Definition body="13616" end="13723" exported="1" fullname="file.filerelationshiplist" inherit_type="local" line="279" name="FileRelationshipList" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/File.ecl" start="13437">
    <Type>function</Type>
    <Documentation>
     <firstline>Returns a dataset of relationships</firstline><content>Returns a dataset of relationships. The return records are structured in the FsFileRelationshipRecord format.</content><param><name>primary</name><desc>The logical filename of the primary file.</desc></param><param><name>secondary</name><desc>The logical filename of the secondary file.</desc></param><param><name>primaryfields</name><desc>The name of the primary key field for the primary file.</desc></param><param><name>secondaryfields</name><desc>The name of the foreign key field relating to the primary file.</desc></param><param><name>relationship</name><desc>The type of relationship between the primary and secondary files. Containing either 'link' or 'view'. Default is "link".</desc></param></Documentation>
    <Signature name="FileRelationshipList" ret="dataset(FsFileRelationshipRecord)" param="(varstring primary, varstring secondary, varstring primflds='', varstring secondaryflds='', varstring kind='link')" hlen="54">dataset(FsFileRelationshipRecord) FileRelationshipList(varstring primary, varstring secondary, varstring primflds='', varstring secondaryflds='', varstring kind='link')</Signature><Params>
     <Param name="primary"/>
     <Param name="secondary"/>
     <Param name="primflds"/>
     <Param name="secondaryflds"/>
     <Param name="kind"/>
    </Params>
   </Definition>
   <Definition body="14407" end="14521" exported="1" fullname="file.removefilerelationship" inherit_type="local" line="293" name="RemoveFileRelationship" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/File.ecl" start="14256">
    <Type>function</Type>
    <Documentation>
     <firstline>Removes a relationship between two files</firstline><content>Removes a relationship between two files.</content><param><name>primary</name><desc>The logical filename of the primary file.</desc></param><param><name>secondary</name><desc>The logical filename of the secondary file.</desc></param><param><name>primaryfields</name><desc>The name of the primary key field for the primary file.</desc></param><param><name>secondaryfields</name><desc>The name of the foreign key field relating to the primary file.</desc></param><param><name>relationship</name><desc>The type of relationship between the primary and secondary files. Containing either 'link' or 'view'. Default is "link".</desc></param></Documentation>
    <Signature name="RemoveFileRelationship" ret="" param="(varstring primary, varstring secondary, varstring primaryflds='', varstring secondaryflds='', varstring kind='link')" hlen="22">RemoveFileRelationship(varstring primary, varstring secondary, varstring primaryflds='', varstring secondaryflds='', varstring kind='link')</Signature><Params>
     <Param name="primary"/>
     <Param name="secondary"/>
     <Param name="primaryflds"/>
     <Param name="secondaryflds"/>
     <Param name="kind"/>
    </Params>
   </Definition>
   <Definition body="14760" end="14817" exported="1" fullname="file.getcolumnmapping" inherit_type="local" line="302" name="GetColumnMapping" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/File.ecl" start="14709">
    <Type>function</Type>
    <Documentation>
     <firstline>Returns the field mappings for the file, in the same format specified for the SetColumnMapping function</firstline><content>Returns the field mappings for the file, in the same format specified for the SetColumnMapping function.</content><param><name>lfn</name><desc>The logical filename of the primary file.</desc></param></Documentation>
    <Signature name="GetColumnMapping" ret="varstring" param="(varstring lfn)" hlen="26">varstring GetColumnMapping(varstring lfn)</Signature><Params>
     <Param name="lfn"/>
    </Params>
   </Definition>
   <Definition body="15259" end="15325" exported="1" fullname="file.setcolumnmapping" inherit_type="local" line="313" name="SetColumnMapping" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/File.ecl" start="15199">
    <Type>function</Type>
    <Documentation>
     <firstline>Defines how the data in the fields of the file mist be transformed between the actual data storage format and the input format used to query that data</firstline><content>Defines how the data in the fields of the file mist be transformed between the actual data storage format and the input format used to query that data. This is used by the user interface of the roxie browser.</content><param><name>lfn</name><desc>The logical filename of the primary file.</desc></param><param><name>mapping</name><desc>A string containing a comma separated list of field mappings.</desc></param></Documentation>
    <Signature name="SetColumnMapping" ret="" param="(varstring lfn, varstring mapping)" hlen="16">SetColumnMapping(varstring lfn, varstring mapping)</Signature><Params>
     <Param name="lfn"/>
     <Param name="mapping"/>
    </Params>
   </Definition>
   <Definition body="15721" end="15780" exported="1" fullname="file.encoderfsquery" inherit_type="local" line="324" name="EncodeRfsQuery" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/File.ecl" start="15652">
    <Type>function</Type>
    <Documentation>
     <firstline>Returns a string that can be used in a DATASET declaration to read data from an RFS (Remote File Server) instance (e.g</firstline><content>Returns a string that can be used in a DATASET declaration to read data from an RFS (Remote File Server) instance (e.g. rfsmysql) on another node.</content><param><name>server</name><desc>A string containing the ip:port address for the remote file server.</desc></param><param><name>query</name><desc>The text of the query to send to the server</desc></param></Documentation>
    <Signature name="EncodeRfsQuery" ret="varstring" param="(varstring server, varstring query)" hlen="24">varstring EncodeRfsQuery(varstring server, varstring query)</Signature><Params>
     <Param name="server"/>
     <Param name="query"/>
    </Params>
   </Definition>
   <Definition body="16046" end="16106" exported="1" fullname="file.rfsaction" inherit_type="local" line="334" name="RfsAction" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/File.ecl" start="15992">
    <Type>function</Type>
    <Documentation>
     <firstline>Sends the query to the rfs server</firstline><content>Sends the query to the rfs server.</content><param><name>server</name><desc>A string containing the ip:port address for the remote file server.</desc></param><param><name>query</name><desc>The text of the query to send to the server</desc></param></Documentation>
    <Signature name="RfsAction" ret="" param="(varstring server, varstring query)" hlen="9">RfsAction(varstring server, varstring query)</Signature><Params>
     <Param name="server"/>
     <Param name="query"/>
    </Params>
   </Definition>
   <Definition body="16541" end="16621" exported="1" fullname="file.moveexternalfile" inherit_type="local" line="345" name="MoveExternalFile" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/File.ecl" start="16457">
    <Type>function</Type>
    <Documentation>
     <firstline>Moves the single physical file between two locations on the same remote machine</firstline><content>Moves the single physical file between two locations on the same remote machine. The dafileserv utility program must be running on the location machine.</content><param><name>location</name><desc>The IP address of the remote machine.</desc></param><param><name>frompath</name><desc>The path/name of the file to move.</desc></param><param><name>topath</name><desc>The path/name of the target file.</desc></param></Documentation>
    <Signature name="MoveExternalFile" ret="" param="(varstring location, varstring frompath, varstring topath)" hlen="16">MoveExternalFile(varstring location, varstring frompath, varstring topath)</Signature><Params>
     <Param name="location"/>
     <Param name="frompath"/>
     <Param name="topath"/>
    </Params>
   </Definition>
   <Definition body="16953" end="17023" exported="1" fullname="file.deleteexternalfile" inherit_type="local" line="355" name="DeleteExternalFile" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/File.ecl" start="16889">
    <Type>function</Type>
    <Documentation>
     <firstline>Removes a single physical file from a remote machine</firstline><content>Removes a single physical file from a remote machine. The dafileserv utility program must be running on the location machine.</content><param><name>location</name><desc>The IP address of the remote machine.</desc></param><param><name>path</name><desc>The path/name of the file to remove.</desc></param></Documentation>
    <Signature name="DeleteExternalFile" ret="" param="(varstring location, varstring path)" hlen="18">DeleteExternalFile(varstring location, varstring path)</Signature><Params>
     <Param name="location"/>
     <Param name="path"/>
    </Params>
   </Definition>
   <Definition body="17371" end="17446" exported="1" fullname="file.createexternaldirectory" inherit_type="local" line="365" name="CreateExternalDirectory" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/File.ecl" start="17302">
    <Type>function</Type>
    <Documentation>
     <firstline>Creates the path on the location (if it does not already exist)</firstline><content>Creates the path on the location (if it does not already exist). The dafileserv utility program must be running on the location machine.</content><param><name>location</name><desc>The IP address of the remote machine.</desc></param><param><name>path</name><desc>The path/name of the file to remove.</desc></param></Documentation>
    <Signature name="CreateExternalDirectory" ret="" param="(varstring location, varstring path)" hlen="23">CreateExternalDirectory(varstring location, varstring path)</Signature><Params>
     <Param name="location"/>
     <Param name="path"/>
    </Params>
   </Definition>
   <Definition body="17736" end="17810" exported="1" fullname="file.getlogicalfileattribute" inherit_type="local" line="374" name="GetLogicalFileAttribute" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/File.ecl" start="17658">
    <Type>function</Type>
    <Documentation>
     <firstline>Returns the value of the given attribute for the specified logicalfilename</firstline><content>Returns the value of the given attribute for the specified logicalfilename.</content><param><name>lfn</name><desc>The name of the logical file.</desc></param><param><name>attrname</name><desc>The name of the file attribute to return.</desc></param></Documentation>
    <Signature name="GetLogicalFileAttribute" ret="varstring" param="(varstring lfn, varstring attrname)" hlen="33">varstring GetLogicalFileAttribute(varstring lfn, varstring attrname)</Signature><Params>
     <Param name="lfn"/>
     <Param name="attrname"/>
    </Params>
   </Definition>
   <Definition body="18077" end="18143" exported="1" fullname="file.protectlogicalfile" inherit_type="local" line="383" name="ProtectLogicalFile" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/File.ecl" start="18014">
    <Type>function</Type>
    <Documentation>
     <firstline>Toggles protection on and off for the specified logicalfilename</firstline><content>Toggles protection on and off for the specified logicalfilename.</content><param><name>lfn</name><desc>The name of the logical file.</desc></param><param><name>value</name><desc>TRUE to enable protection, FALSE to disable.</desc></param></Documentation>
    <Signature name="ProtectLogicalFile" ret="" param="(varstring lfn, boolean value=TRUE)" hlen="18">ProtectLogicalFile(varstring lfn, boolean value=TRUE)</Signature><Params>
     <Param name="lfn"/>
     <Param name="value"/>
    </Params>
   </Definition>
   <Definition body="18611" end="18667" exported="1" fullname="file.dfuplusexec" inherit_type="local" line="393" name="DfuPlusExec" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/File.ecl" start="18571">
    <Type>function</Type>
    <Documentation>
     <firstline>The DfuPlusExec action executes the specified command line just as the DfuPLus.exe program would do</firstline><content>The DfuPlusExec action executes the specified command line just as the DfuPLus.exe program would do. This allows you to have all the functionality of the DfuPLus.exe program available within your ECL code. param cmdline The DFUPlus.exe command line to execute. The valid arguments are documented in the Client Tools manual, in the section describing the DfuPlus.exe program.</content></Documentation>
    <Signature name="DfuPlusExec" ret="" param="(varstring cmdline)" hlen="11">DfuPlusExec(varstring cmdline)</Signature><Params>
     <Param name="cmdline"/>
    </Params>
   </Definition>
   <Definition body="20576" end="20810" exported="1" fullname="file.fsprayfixed" inherit_type="local" line="418" name="fSprayFixed" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/File.ecl" start="20184">
    <Type>function</Type>
    <Documentation>
     <firstline>Sprays a file of fixed length records from a single machine and distributes it across the nodes of the destination group</firstline><content>Sprays a file of fixed length records from a single machine and distributes it across the nodes of the destination group.</content><return>The DFU workunit id for the job.</return><param><name>sourceIP</name><desc>The IP address of the file.</desc></param><param><name>sourcePath</name><desc>The path and name of the file.</desc></param><param><name>recordsize</name><desc>The size (in bytes) of the records in the file.</desc></param><param><name>destinationGroup</name><desc>The name of the group to distribute the file across.</desc></param><param><name>destinationLogicalName</name><desc>The logical name of the file to create.</desc></param><param><name>timeOut</name><desc>The time in ms to wait for the operation to complete. A value of 0 causes the call to return immediately. Defaults to no timeout (-1).</desc></param><param><name>espServerIpPort</name><desc>The url of the ESP file copying service. Defaults to the value of ws_fs_server in the environment.</desc></param><param><name>maxConnections</name><desc>The maximum number of target nodes to write to concurrently. Defaults to 1.</desc></param><param><name>allowOverwrite</name><desc>Is it valid to overwrite an existing file of the same name? Defaults to FALSE</desc></param><param><name>replicate</name><desc>Whether to replicate the new file. Defaults to FALSE.</desc></param><param><name>compress</name><desc>Whether to compress the new file. Defaults to FALSE.</desc></param><param><name>failIfNoSourceFile</name><desc>If TRUE it causes a missing source file to trigger a failure. Defaults to FALSE.</desc></param><param><name>expireDays</name><desc>Number of days to auto-remove file. Default is -1, not expire.</desc></param></Documentation>
    <Signature name="fSprayFixed" ret="varstring" param="(varstring sourceIP, varstring sourcePath, integer4 recordSize, varstring destinationGroup, varstring destinationLogicalName, integer4 timeOut=-1, varstring espServerIpPort=GETENV('ws_fs_server'), integer4 maxConnections=-1, boolean allowOverwrite=FALSE, boolean replicate=FALSE, boolean compress=FALSE, boolean failIfNoSourceFile=FALSE, integer4 expireDays=-1)" hlen="21">varstring fSprayFixed(varstring sourceIP, varstring sourcePath, integer4 recordSize, varstring destinationGroup, varstring destinationLogicalName, integer4 timeOut=-1, varstring espServerIpPort=GETENV('ws_fs_server'), integer4 maxConnections=-1, boolean allowOverwrite=FALSE, boolean replicate=FALSE, boolean compress=FALSE, boolean failIfNoSourceFile=FALSE, integer4 expireDays=-1)</Signature><Params>
     <Param name="sourceIP"/>
     <Param name="sourcePath"/>
     <Param name="recordSize"/>
     <Param name="destinationGroup"/>
     <Param name="destinationLogicalName"/>
     <Param name="timeOut"/>
     <Param name="espServerIpPort"/>
     <Param name="maxConnections"/>
     <Param name="allowOverwrite"/>
     <Param name="replicate"/>
     <Param name="compress"/>
     <Param name="failIfNoSourceFile"/>
     <Param name="expireDays"/>
    </Params>
   </Definition>
   <Definition body="21290" end="21523" exported="1" fullname="file.sprayfixed" inherit_type="local" line="427" name="SprayFixed" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/File.ecl" start="20909">
    <Type>function</Type>
    <Documentation>
     <firstline>Same as fSprayFixed, but does not return the DFU Workunit ID</firstline><see>fSprayFixed</see><content>Same as fSprayFixed, but does not return the DFU Workunit ID.</content></Documentation>
    <Signature name="SprayFixed" ret="" param="(varstring sourceIP, varstring sourcePath, integer4 recordSize, varstring destinationGroup, varstring destinationLogicalName, integer4 timeOut=-1, varstring espServerIpPort=GETENV('ws_fs_server'), integer4 maxConnections=-1, boolean allowOverwrite=FALSE, boolean replicate=FALSE, boolean compress=FALSE, boolean failIfNoSourceFile=FALSE, integer4 expireDays=-1)" hlen="10">SprayFixed(varstring sourceIP, varstring sourcePath, integer4 recordSize, varstring destinationGroup, varstring destinationLogicalName, integer4 timeOut=-1, varstring espServerIpPort=GETENV('ws_fs_server'), integer4 maxConnections=-1, boolean allowOverwrite=FALSE, boolean replicate=FALSE, boolean compress=FALSE, boolean failIfNoSourceFile=FALSE, integer4 expireDays=-1)</Signature><Params>
     <Param name="sourceIP"/>
     <Param name="sourcePath"/>
     <Param name="recordSize"/>
     <Param name="destinationGroup"/>
     <Param name="destinationLogicalName"/>
     <Param name="timeOut"/>
     <Param name="espServerIpPort"/>
     <Param name="maxConnections"/>
     <Param name="allowOverwrite"/>
     <Param name="replicate"/>
     <Param name="compress"/>
     <Param name="failIfNoSourceFile"/>
     <Param name="expireDays"/>
    </Params>
   </Definition>
   <Definition body="22277" end="22647" exported="1" fullname="file.fsprayvariable" inherit_type="local" line="431" name="fSprayVariable" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/File.ecl" start="21632">
    <Type>function</Type>
    <Signature name="fSprayVariable" ret="varstring" param="(varstring sourceIP, varstring sourcePath, integer4 sourceMaxRecordSize=8192, varstring sourceCsvSeparate='\\,', varstring sourceCsvTerminate='\\n,\\r\\n', varstring sourceCsvQuote='\&quot;', varstring destinationGroup, varstring destinationLogicalName, integer4 timeOut=-1, varstring espServerIpPort=GETENV('ws_fs_server'), integer4 maxConnections=-1, boolean allowOverwrite=FALSE, boolean replicate=FALSE, boolean compress=FALSE, varstring sourceCsvEscape='', boolean failIfNoSourceFile=FALSE, boolean recordStructurePresent=FALSE, boolean quotedTerminator=TRUE, varstring encoding='ascii', integer4 expireDays=-1)" hlen="24">varstring fSprayVariable(varstring sourceIP, varstring sourcePath, integer4 sourceMaxRecordSize=8192, varstring sourceCsvSeparate='\\,', varstring sourceCsvTerminate='\\n,\\r\\n', varstring sourceCsvQuote='\"', varstring destinationGroup, varstring destinationLogicalName, integer4 timeOut=-1, varstring espServerIpPort=GETENV('ws_fs_server'), integer4 maxConnections=-1, boolean allowOverwrite=FALSE, boolean replicate=FALSE, boolean compress=FALSE, varstring sourceCsvEscape='', boolean failIfNoSourceFile=FALSE, boolean recordStructurePresent=FALSE, boolean quotedTerminator=TRUE, varstring encoding='ascii', integer4 expireDays=-1)</Signature><Params>
     <Param name="sourceIP"/>
     <Param name="sourcePath"/>
     <Param name="sourceMaxRecordSize"/>
     <Param name="sourceCsvSeparate"/>
     <Param name="sourceCsvTerminate"/>
     <Param name="sourceCsvQuote"/>
     <Param name="destinationGroup"/>
     <Param name="destinationLogicalName"/>
     <Param name="timeOut"/>
     <Param name="espServerIpPort"/>
     <Param name="maxConnections"/>
     <Param name="allowOverwrite"/>
     <Param name="replicate"/>
     <Param name="compress"/>
     <Param name="sourceCsvEscape"/>
     <Param name="failIfNoSourceFile"/>
     <Param name="recordStructurePresent"/>
     <Param name="quotedTerminator"/>
     <Param name="encoding"/>
     <Param name="expireDays"/>
    </Params>
   </Definition>
   <Definition body="23388" end="23757" exported="1" fullname="file.sprayvariable" inherit_type="local" line="435" name="SprayVariable" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/File.ecl" start="22754">
    <Type>function</Type>
    <Signature name="SprayVariable" ret="" param="(varstring sourceIP, varstring sourcePath, integer4 sourceMaxRecordSize=8192, varstring sourceCsvSeparate='\\,', varstring sourceCsvTerminate='\\n,\\r\\n', varstring sourceCsvQuote='\&quot;', varstring destinationGroup, varstring destinationLogicalName, integer4 timeOut=-1, varstring espServerIpPort=GETENV('ws_fs_server'), integer4 maxConnections=-1, boolean allowOverwrite=FALSE, boolean replicate=FALSE, boolean compress=FALSE, varstring sourceCsvEscape='', boolean failIfNoSourceFile=FALSE, boolean recordStructurePresent=FALSE, boolean quotedTerminator=TRUE, varstring encoding='ascii', integer4 expireDays=-1)" hlen="13">SprayVariable(varstring sourceIP, varstring sourcePath, integer4 sourceMaxRecordSize=8192, varstring sourceCsvSeparate='\\,', varstring sourceCsvTerminate='\\n,\\r\\n', varstring sourceCsvQuote='\"', varstring destinationGroup, varstring destinationLogicalName, integer4 timeOut=-1, varstring espServerIpPort=GETENV('ws_fs_server'), integer4 maxConnections=-1, boolean allowOverwrite=FALSE, boolean replicate=FALSE, boolean compress=FALSE, varstring sourceCsvEscape='', boolean failIfNoSourceFile=FALSE, boolean recordStructurePresent=FALSE, boolean quotedTerminator=TRUE, varstring encoding='ascii', integer4 expireDays=-1)</Signature><Params>
     <Param name="sourceIP"/>
     <Param name="sourcePath"/>
     <Param name="sourceMaxRecordSize"/>
     <Param name="sourceCsvSeparate"/>
     <Param name="sourceCsvTerminate"/>
     <Param name="sourceCsvQuote"/>
     <Param name="destinationGroup"/>
     <Param name="destinationLogicalName"/>
     <Param name="timeOut"/>
     <Param name="espServerIpPort"/>
     <Param name="maxConnections"/>
     <Param name="allowOverwrite"/>
     <Param name="replicate"/>
     <Param name="compress"/>
     <Param name="sourceCsvEscape"/>
     <Param name="failIfNoSourceFile"/>
     <Param name="recordStructurePresent"/>
     <Param name="quotedTerminator"/>
     <Param name="encoding"/>
     <Param name="expireDays"/>
    </Params>
   </Definition>
   <Definition body="26492" end="26862" exported="1" fullname="file.fspraydelimited" inherit_type="local" line="465" name="fSprayDelimited" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/File.ecl" start="25846">
    <Type>function</Type>
    <Documentation>
     <firstline>Sprays a file of fixed delimited records from a single machine and distributes it across the nodes of the destination group</firstline><content>Sprays a file of fixed delimited records from a single machine and distributes it across the nodes of the destination group.</content><return>The DFU workunit id for the job.</return><param><name>sourceIP</name><desc>The IP address of the file.</desc></param><param><name>sourcePath</name><desc>The path and name of the file.</desc></param><param><name>sourceCsvSeparate</name><desc>The character sequence which separates fields in the file.</desc></param><param><name>sourceCsvTerminate</name><desc>The character sequence which separates records in the file.</desc></param><param><name>sourceCsvQuote</name><desc>A string which can be used to delimit fields in the file.</desc></param><param><name>sourceMaxRecordSize</name><desc>The maximum size (in bytes) of the records in the file.</desc></param><param><name>destinationGroup</name><desc>The name of the group to distribute the file across.</desc></param><param><name>destinationLogicalName</name><desc>The logical name of the file to create.</desc></param><param><name>timeOut</name><desc>The time in ms to wait for the operation to complete. A value of 0 causes the call to return immediately. Defaults to no timeout (-1).</desc></param><param><name>espServerIpPort</name><desc>The url of the ESP file copying service. Defaults to the value of ws_fs_server in the environment.</desc></param><param><name>maxConnections</name><desc>The maximum number of target nodes to write to concurrently. Defaults to 1.</desc></param><param><name>allowOverwrite</name><desc>Is it valid to overwrite an existing file of the same name? Defaults to FALSE</desc></param><param><name>replicate</name><desc>Whether to replicate the new file. Defaults to FALSE.</desc></param><param><name>compress</name><desc>Whether to compress the new file. Defaults to FALSE.</desc></param><param><name>sourceCsvEscape</name><desc>A character that is used to escape quote characters. Defaults to none.</desc></param><param><name>failIfNoSourceFile</name><desc>If TRUE it causes a missing source file to trigger a failure. Defaults to FALSE.</desc></param><param><name>recordStructurePresent</name><desc>If TRUE derives the record structure from the header of the file.</desc></param><param><name>quotedTerminator</name><desc>Can the terminator character be included in a quoted field. Defaults to TRUE. If FALSE it allows quicker partitioning of the file (avoiding a complete file scan).</desc></param><param><name>expireDays</name><desc>Number of days to auto-remove file. Default is -1, not expire.</desc></param></Documentation>
    <Signature name="fSprayDelimited" ret="varstring" param="(varstring sourceIP, varstring sourcePath, integer4 sourceMaxRecordSize=8192, varstring sourceCsvSeparate='\\,', varstring sourceCsvTerminate='\\n,\\r\\n', varstring sourceCsvQuote='\&quot;', varstring destinationGroup, varstring destinationLogicalName, integer4 timeOut=-1, varstring espServerIpPort=GETENV('ws_fs_server'), integer4 maxConnections=-1, boolean allowOverwrite=FALSE, boolean replicate=FALSE, boolean compress=FALSE, varstring sourceCsvEscape='', boolean failIfNoSourceFile=FALSE, boolean recordStructurePresent=FALSE, boolean quotedTerminator=TRUE, varstring encoding='ascii', integer4 expireDays=-1)" hlen="25">varstring fSprayDelimited(varstring sourceIP, varstring sourcePath, integer4 sourceMaxRecordSize=8192, varstring sourceCsvSeparate='\\,', varstring sourceCsvTerminate='\\n,\\r\\n', varstring sourceCsvQuote='\"', varstring destinationGroup, varstring destinationLogicalName, integer4 timeOut=-1, varstring espServerIpPort=GETENV('ws_fs_server'), integer4 maxConnections=-1, boolean allowOverwrite=FALSE, boolean replicate=FALSE, boolean compress=FALSE, varstring sourceCsvEscape='', boolean failIfNoSourceFile=FALSE, boolean recordStructurePresent=FALSE, boolean quotedTerminator=TRUE, varstring encoding='ascii', integer4 expireDays=-1)</Signature><Params>
     <Param name="sourceIP"/>
     <Param name="sourcePath"/>
     <Param name="sourceMaxRecordSize"/>
     <Param name="sourceCsvSeparate"/>
     <Param name="sourceCsvTerminate"/>
     <Param name="sourceCsvQuote"/>
     <Param name="destinationGroup"/>
     <Param name="destinationLogicalName"/>
     <Param name="timeOut"/>
     <Param name="espServerIpPort"/>
     <Param name="maxConnections"/>
     <Param name="allowOverwrite"/>
     <Param name="replicate"/>
     <Param name="compress"/>
     <Param name="sourceCsvEscape"/>
     <Param name="failIfNoSourceFile"/>
     <Param name="recordStructurePresent"/>
     <Param name="quotedTerminator"/>
     <Param name="encoding"/>
     <Param name="expireDays"/>
    </Params>
   </Definition>
   <Definition body="27610" end="27979" exported="1" fullname="file.spraydelimited" inherit_type="local" line="474" name="SprayDelimited" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/File.ecl" start="26969">
    <Type>function</Type>
    <Documentation>
     <firstline>Same as fSprayDelimited, but does not return the DFU Workunit ID</firstline><see>fSprayDelimited</see><content>Same as fSprayDelimited, but does not return the DFU Workunit ID.</content></Documentation>
    <Signature name="SprayDelimited" ret="" param="(varstring sourceIP, varstring sourcePath, integer4 sourceMaxRecordSize=8192, varstring sourceCsvSeparate='\\,', varstring sourceCsvTerminate='\\n,\\r\\n', varstring sourceCsvQuote='\&quot;', varstring destinationGroup, varstring destinationLogicalName, integer4 timeOut=-1, varstring espServerIpPort=GETENV('ws_fs_server'), integer4 maxConnections=-1, boolean allowOverwrite=FALSE, boolean replicate=FALSE, boolean compress=FALSE, varstring sourceCsvEscape='', boolean failIfNoSourceFile=FALSE, boolean recordStructurePresent=FALSE, boolean quotedTerminator=TRUE, const varstring encoding='ascii', integer4 expireDays=-1)" hlen="14">SprayDelimited(varstring sourceIP, varstring sourcePath, integer4 sourceMaxRecordSize=8192, varstring sourceCsvSeparate='\\,', varstring sourceCsvTerminate='\\n,\\r\\n', varstring sourceCsvQuote='\"', varstring destinationGroup, varstring destinationLogicalName, integer4 timeOut=-1, varstring espServerIpPort=GETENV('ws_fs_server'), integer4 maxConnections=-1, boolean allowOverwrite=FALSE, boolean replicate=FALSE, boolean compress=FALSE, varstring sourceCsvEscape='', boolean failIfNoSourceFile=FALSE, boolean recordStructurePresent=FALSE, boolean quotedTerminator=TRUE, const varstring encoding='ascii', integer4 expireDays=-1)</Signature><Params>
     <Param name="sourceIP"/>
     <Param name="sourcePath"/>
     <Param name="sourceMaxRecordSize"/>
     <Param name="sourceCsvSeparate"/>
     <Param name="sourceCsvTerminate"/>
     <Param name="sourceCsvQuote"/>
     <Param name="destinationGroup"/>
     <Param name="destinationLogicalName"/>
     <Param name="timeOut"/>
     <Param name="espServerIpPort"/>
     <Param name="maxConnections"/>
     <Param name="allowOverwrite"/>
     <Param name="replicate"/>
     <Param name="compress"/>
     <Param name="sourceCsvEscape"/>
     <Param name="failIfNoSourceFile"/>
     <Param name="recordStructurePresent"/>
     <Param name="quotedTerminator"/>
     <Param name="encoding"/>
     <Param name="expireDays"/>
    </Params>
   </Definition>
   <Definition body="30063" end="30334" exported="1" fullname="file.fsprayxml" inherit_type="local" line="499" name="fSprayXml" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/File.ecl" start="29602">
    <Type>function</Type>
    <Documentation>
     <firstline>Sprays an xml file from a single machine and distributes it across the nodes of the destination group</firstline><content>Sprays an xml file from a single machine and distributes it across the nodes of the destination group.</content><return>The DFU workunit id for the job.</return><param><name>sourceIP</name><desc>The IP address of the file.</desc></param><param><name>sourcePath</name><desc>The path and name of the file.</desc></param><param><name>sourceMaxRecordSize</name><desc>The maximum size (in bytes) of the records in the file.</desc></param><param><name>sourceRowTag</name><desc>The xml tag that is used to delimit records in the source file. (This tag cannot recursivly nest.)</desc></param><param><name>sourceEncoding</name><desc>The unicode encoding of the file. (utf8,utf8n,utf16be,utf16le,utf32be,utf32le)</desc></param><param><name>destinationGroup</name><desc>The name of the group to distribute the file across.</desc></param><param><name>destinationLogicalName</name><desc>The logical name of the file to create.</desc></param><param><name>timeOut</name><desc>The time in ms to wait for the operation to complete. A value of 0 causes the call to return immediately. Defaults to no timeout (-1).</desc></param><param><name>espServerIpPort</name><desc>The url of the ESP file copying service. Defaults to the value of ws_fs_server in the environment.</desc></param><param><name>maxConnections</name><desc>The maximum number of target nodes to write to concurrently. Defaults to 1.</desc></param><param><name>allowOverwrite</name><desc>Is it valid to overwrite an existing file of the same name? Defaults to FALSE</desc></param><param><name>replicate</name><desc>Whether to replicate the new file. Defaults to FALSE.</desc></param><param><name>compress</name><desc>Whether to compress the new file. Defaults to FALSE.</desc></param><param><name>failIfNoSourceFile</name><desc>If TRUE it causes a missing source file to trigger a failure. Defaults to FALSE.</desc></param><param><name>expireDays</name><desc>Number of days to auto-remove file. Default is -1, not expire.</desc></param></Documentation>
    <Signature name="fSprayXml" ret="varstring" param="(varstring sourceIP, varstring sourcePath, integer4 sourceMaxRecordSize=8192, varstring sourceRowTag, varstring sourceEncoding='utf8', varstring destinationGroup, varstring destinationLogicalName, integer4 timeOut=-1, varstring espServerIpPort=GETENV('ws_fs_server'), integer4 maxConnections=-1, boolean allowOverwrite=FALSE, boolean replicate=FALSE, boolean compress=FALSE, boolean failIfNoSourceFile=FALSE, integer4 expireDays=-1)" hlen="19">varstring fSprayXml(varstring sourceIP, varstring sourcePath, integer4 sourceMaxRecordSize=8192, varstring sourceRowTag, varstring sourceEncoding='utf8', varstring destinationGroup, varstring destinationLogicalName, integer4 timeOut=-1, varstring espServerIpPort=GETENV('ws_fs_server'), integer4 maxConnections=-1, boolean allowOverwrite=FALSE, boolean replicate=FALSE, boolean compress=FALSE, boolean failIfNoSourceFile=FALSE, integer4 expireDays=-1)</Signature><Params>
     <Param name="sourceIP"/>
     <Param name="sourcePath"/>
     <Param name="sourceMaxRecordSize"/>
     <Param name="sourceRowTag"/>
     <Param name="sourceEncoding"/>
     <Param name="destinationGroup"/>
     <Param name="destinationLogicalName"/>
     <Param name="timeOut"/>
     <Param name="espServerIpPort"/>
     <Param name="maxConnections"/>
     <Param name="allowOverwrite"/>
     <Param name="replicate"/>
     <Param name="compress"/>
     <Param name="failIfNoSourceFile"/>
     <Param name="expireDays"/>
    </Params>
   </Definition>
   <Definition body="30879" end="31149" exported="1" fullname="file.sprayxml" inherit_type="local" line="508" name="SprayXml" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/File.ecl" start="30429">
    <Type>function</Type>
    <Documentation>
     <firstline>Same as fSprayXml, but does not return the DFU Workunit ID</firstline><see>fSprayXml</see><content>Same as fSprayXml, but does not return the DFU Workunit ID.</content></Documentation>
    <Signature name="SprayXml" ret="" param="(varstring sourceIP, varstring sourcePath, integer4 sourceMaxRecordSize=8192, varstring sourceRowTag, varstring sourceEncoding='utf8', varstring destinationGroup, varstring destinationLogicalName, integer4 timeOut=-1, varstring espServerIpPort=GETENV('ws_fs_server'), integer4 maxConnections=-1, boolean allowOverwrite=FALSE, boolean replicate=FALSE, boolean compress=FALSE, boolean failIfNoSourceFile=FALSE, integer4 expireDays=-1)" hlen="8">SprayXml(varstring sourceIP, varstring sourcePath, integer4 sourceMaxRecordSize=8192, varstring sourceRowTag, varstring sourceEncoding='utf8', varstring destinationGroup, varstring destinationLogicalName, integer4 timeOut=-1, varstring espServerIpPort=GETENV('ws_fs_server'), integer4 maxConnections=-1, boolean allowOverwrite=FALSE, boolean replicate=FALSE, boolean compress=FALSE, boolean failIfNoSourceFile=FALSE, integer4 expireDays=-1)</Signature><Params>
     <Param name="sourceIP"/>
     <Param name="sourcePath"/>
     <Param name="sourceMaxRecordSize"/>
     <Param name="sourceRowTag"/>
     <Param name="sourceEncoding"/>
     <Param name="destinationGroup"/>
     <Param name="destinationLogicalName"/>
     <Param name="timeOut"/>
     <Param name="espServerIpPort"/>
     <Param name="maxConnections"/>
     <Param name="allowOverwrite"/>
     <Param name="replicate"/>
     <Param name="compress"/>
     <Param name="failIfNoSourceFile"/>
     <Param name="expireDays"/>
    </Params>
   </Definition>
   <Definition body="32270" end="32417" exported="1" fullname="file.fdespray" inherit_type="local" line="525" name="fDespray" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/File.ecl" start="32038">
    <Type>function</Type>
    <Documentation>
     <firstline>Copies a distributed file from multiple machines, and desprays it to a single file on a single machine</firstline><content>Copies a distributed file from multiple machines, and desprays it to a single file on a single machine.</content><return>The DFU workunit id for the job.</return><param><name>logicalName</name><desc>The name of the file to despray.</desc></param><param><name>destinationIP</name><desc>The IP of the target machine.</desc></param><param><name>destinationPath</name><desc>The path of the file to create on the destination machine.</desc></param><param><name>timeOut</name><desc>The time in ms to wait for the operation to complete. A value of 0 causes the call to return immediately. Defaults to no timeout (-1).</desc></param><param><name>espServerIpPort</name><desc>The url of the ESP file copying service. Defaults to the value of ws_fs_server in the environment.</desc></param><param><name>maxConnections</name><desc>The maximum number of target nodes to write to concurrently. Defaults to 1.</desc></param><param><name>allowOverwrite</name><desc>Is it valid to overwrite an existing file of the same name? Defaults to FALSE</desc></param></Documentation>
    <Signature name="fDespray" ret="varstring" param="(varstring logicalName, varstring destinationIP, varstring destinationPath, integer4 timeOut=-1, varstring espServerIpPort=GETENV('ws_fs_server'), integer4 maxConnections=-1, boolean allowOverwrite=FALSE)" hlen="18">varstring fDespray(varstring logicalName, varstring destinationIP, varstring destinationPath, integer4 timeOut=-1, varstring espServerIpPort=GETENV('ws_fs_server'), integer4 maxConnections=-1, boolean allowOverwrite=FALSE)</Signature><Params>
     <Param name="logicalName"/>
     <Param name="destinationIP"/>
     <Param name="destinationPath"/>
     <Param name="timeOut"/>
     <Param name="espServerIpPort"/>
     <Param name="maxConnections"/>
     <Param name="allowOverwrite"/>
    </Params>
   </Definition>
   <Definition body="32731" end="32877" exported="1" fullname="file.despray" inherit_type="local" line="534" name="Despray" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/File.ecl" start="32510">
    <Type>function</Type>
    <Documentation>
     <firstline>Same as fDespray, but does not return the DFU Workunit ID</firstline><see>fDespray</see><content>Same as fDespray, but does not return the DFU Workunit ID.</content></Documentation>
    <Signature name="Despray" ret="" param="(varstring logicalName, varstring destinationIP, varstring destinationPath, integer4 timeOut=-1, varstring espServerIpPort=GETENV('ws_fs_server'), integer4 maxConnections=-1, boolean allowOverwrite=FALSE)" hlen="7">Despray(varstring logicalName, varstring destinationIP, varstring destinationPath, integer4 timeOut=-1, varstring espServerIpPort=GETENV('ws_fs_server'), integer4 maxConnections=-1, boolean allowOverwrite=FALSE)</Signature><Params>
     <Param name="logicalName"/>
     <Param name="destinationIP"/>
     <Param name="destinationPath"/>
     <Param name="timeOut"/>
     <Param name="espServerIpPort"/>
     <Param name="maxConnections"/>
     <Param name="allowOverwrite"/>
    </Params>
   </Definition>
   <Definition body="35112" end="35370" exported="1" fullname="file.fcopy" inherit_type="local" line="560" name="fCopy" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/File.ecl" start="34676">
    <Type>function</Type>
    <Documentation>
     <firstline>Copies a distributed file to another distributed file</firstline><content>Copies a distributed file to another distributed file.</content><return>The DFU workunit id for the job.</return><param><name>sourceLogicalName</name><desc>The name of the file to despray.</desc></param><param><name>destinationGroup</name><desc>The name of the group to distribute the file across.</desc></param><param><name>destinationLogicalName</name><desc>The logical name of the file to create.</desc></param><param><name>sourceDali</name><desc>The dali that contains the source file (blank implies same dali). Defaults to same dali.</desc></param><param><name>timeOut</name><desc>The time in ms to wait for the operation to complete. A value of 0 causes the call to return immediately. Defaults to no timeout (-1).</desc></param><param><name>espServerIpPort</name><desc>The url of the ESP file copying service. Defaults to the value of ws_fs_server in the environment.</desc></param><param><name>maxConnections</name><desc>The maximum number of target nodes to write to concurrently. Defaults to 1.</desc></param><param><name>allowOverwrite</name><desc>Is it valid to overwrite an existing file of the same name? Defaults to FALSE</desc></param><param><name>replicate</name><desc>Should the copied file also be replicated on the destination? Defaults to FALSE</desc></param><param><name>asSuperfile</name><desc>Should the file be copied as a superfile? If TRUE and source is a superfile, then the operation creates a superfile on the target, creating sub-files as needed and only overwriting existing sub-files whose content has changed. If FALSE, a single file is created. Defaults to FALSE.</desc></param><param><name>compress</name><desc>Whether to compress the new file. Defaults to FALSE.</desc></param><param><name>forcePush</name><desc>Should the copy process be executed on the source nodes (push) or on the destination nodes (pull)? Default is to pull.</desc></param><param><name>transferBufferSize</name><desc>Overrides the size (in bytes) of the internal buffer used to copy the file. Default is 64k.</desc></param></Documentation>
    <Signature name="fCopy" ret="varstring" param="(varstring sourceLogicalName, varstring destinationGroup, varstring destinationLogicalName, varstring sourceDali='', integer4 timeOut=-1, varstring espServerIpPort=GETENV('ws_fs_server'), integer4 maxConnections=-1, boolean allowOverwrite=FALSE, boolean replicate=FALSE, boolean asSuperfile=FALSE, boolean compress=FALSE, boolean forcePush=FALSE, integer4 transferBufferSize=0, boolean preserveCompression=TRUE)" hlen="15">varstring fCopy(varstring sourceLogicalName, varstring destinationGroup, varstring destinationLogicalName, varstring sourceDali='', integer4 timeOut=-1, varstring espServerIpPort=GETENV('ws_fs_server'), integer4 maxConnections=-1, boolean allowOverwrite=FALSE, boolean replicate=FALSE, boolean asSuperfile=FALSE, boolean compress=FALSE, boolean forcePush=FALSE, integer4 transferBufferSize=0, boolean preserveCompression=TRUE)</Signature><Params>
     <Param name="sourceLogicalName"/>
     <Param name="destinationGroup"/>
     <Param name="destinationLogicalName"/>
     <Param name="sourceDali"/>
     <Param name="timeOut"/>
     <Param name="espServerIpPort"/>
     <Param name="maxConnections"/>
     <Param name="allowOverwrite"/>
     <Param name="replicate"/>
     <Param name="asSuperfile"/>
     <Param name="compress"/>
     <Param name="forcePush"/>
     <Param name="transferBufferSize"/>
     <Param name="preserveCompression"/>
    </Params>
   </Definition>
   <Definition body="35882" end="36139" exported="1" fullname="file.copy" inherit_type="local" line="569" name="Copy" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/File.ecl" start="35457">
    <Type>function</Type>
    <Documentation>
     <firstline>Same as fCopy, but does not return the DFU Workunit ID</firstline><see>fCopy</see><content>Same as fCopy, but does not return the DFU Workunit ID.</content></Documentation>
    <Signature name="Copy" ret="" param="(varstring sourceLogicalName, varstring destinationGroup, varstring destinationLogicalName, varstring sourceDali='', integer4 timeOut=-1, varstring espServerIpPort=GETENV('ws_fs_server'), integer4 maxConnections=-1, boolean allowOverwrite=FALSE, boolean replicate=FALSE, boolean asSuperfile=FALSE, boolean compress=FALSE, boolean forcePush=FALSE, integer4 transferBufferSize=0, boolean preserveCompression=TRUE)" hlen="4">Copy(varstring sourceLogicalName, varstring destinationGroup, varstring destinationLogicalName, varstring sourceDali='', integer4 timeOut=-1, varstring espServerIpPort=GETENV('ws_fs_server'), integer4 maxConnections=-1, boolean allowOverwrite=FALSE, boolean replicate=FALSE, boolean asSuperfile=FALSE, boolean compress=FALSE, boolean forcePush=FALSE, integer4 transferBufferSize=0, boolean preserveCompression=TRUE)</Signature><Params>
     <Param name="sourceLogicalName"/>
     <Param name="destinationGroup"/>
     <Param name="destinationLogicalName"/>
     <Param name="sourceDali"/>
     <Param name="timeOut"/>
     <Param name="espServerIpPort"/>
     <Param name="maxConnections"/>
     <Param name="allowOverwrite"/>
     <Param name="replicate"/>
     <Param name="asSuperfile"/>
     <Param name="compress"/>
     <Param name="forcePush"/>
     <Param name="transferBufferSize"/>
     <Param name="preserveCompression"/>
    </Params>
   </Definition>
   <Definition body="36768" end="36853" exported="1" fullname="file.freplicate" inherit_type="local" line="582" name="fReplicate" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/File.ecl" start="36644">
    <Type>function</Type>
    <Documentation>
     <firstline>Ensures the specified file is replicated to its mirror copies</firstline><content>Ensures the specified file is replicated to its mirror copies.</content><return>The DFU workunit id for the job.</return><param><name>logicalName</name><desc>The name of the file to replicate.</desc></param><param><name>timeOut</name><desc>The time in ms to wait for the operation to complete. A value of 0 causes the call to return immediately. Defaults to no timeout (-1).</desc></param><param><name>espServerIpPort</name><desc>The url of the ESP file copying service. Defaults to the value of ws_fs_server in the environment.</desc></param></Documentation>
    <Signature name="fReplicate" ret="varstring" param="(varstring logicalName, integer4 timeOut=-1, varstring espServerIpPort=GETENV('ws_fs_server'))" hlen="20">varstring fReplicate(varstring logicalName, integer4 timeOut=-1, varstring espServerIpPort=GETENV('ws_fs_server'))</Signature><Params>
     <Param name="logicalName"/>
     <Param name="timeOut"/>
     <Param name="espServerIpPort"/>
    </Params>
   </Definition>
   <Definition body="37064" end="37148" exported="1" fullname="file.replicate" inherit_type="local" line="591" name="Replicate" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/File.ecl" start="36951">
    <Type>function</Type>
    <Documentation>
     <firstline>Same as fReplicated, but does not return the DFU Workunit ID</firstline><see>fReplicate</see><content>Same as fReplicated, but does not return the DFU Workunit ID.</content></Documentation>
    <Signature name="Replicate" ret="" param="(varstring logicalName, integer4 timeOut=-1, varstring espServerIpPort=GETENV('ws_fs_server'))" hlen="9">Replicate(varstring logicalName, integer4 timeOut=-1, varstring espServerIpPort=GETENV('ws_fs_server'))</Signature><Params>
     <Param name="logicalName"/>
     <Param name="timeOut"/>
     <Param name="espServerIpPort"/>
    </Params>
   </Definition>
   <Definition body="39540" end="39776" exported="1" fullname="file.fremotepull" inherit_type="local" line="619" name="fRemotePull" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/File.ecl" start="39161">
    <Type>function</Type>
    <Documentation>
     <firstline>Copies a distributed file to a distributed file on remote system</firstline><content>Copies a distributed file to a distributed file on remote system. Similar to fCopy, except the copy executes remotely. Since the DFU workunit executes on the remote DFU server, the user name authentication must be the same on both systems, and the user must have rights to copy files on both systems.</content><return>The DFU workunit id for the job.</return><param><name>remoteEspFsURL</name><desc>The url of the remote ESP file copying service.</desc></param><param><name>sourceLogicalName</name><desc>The name of the file to despray.</desc></param><param><name>destinationGroup</name><desc>The name of the group to distribute the file across.</desc></param><param><name>destinationLogicalName</name><desc>The logical name of the file to create.</desc></param><param><name>timeOut</name><desc>The time in ms to wait for the operation to complete. A value of 0 causes the call to return immediately. Defaults to no timeout (-1).</desc></param><param><name>maxConnections</name><desc>The maximum number of target nodes to write to concurrently. Defaults to 1.</desc></param><param><name>allowOverwrite</name><desc>Is it valid to overwrite an existing file of the same name? Defaults to FALSE</desc></param><param><name>replicate</name><desc>Should the copied file also be replicated on the destination? Defaults to FALSE</desc></param><param><name>asSuperfile</name><desc>Should the file be copied as a superfile? If TRUE and source is a superfile, then the operation creates a superfile on the target, creating sub-files as needed and only overwriting existing sub-files whose content has changed. If FALSE a single file is created. Defaults to FALSE.</desc></param><param><name>compress</name><desc>Whether to compress the new file. Defaults to FALSE.</desc></param><param><name>forcePush</name><desc>Should the copy process should be executed on the source nodes (push) or on the destination nodes (pull)? Default is to pull.</desc></param><param><name>transferBufferSize</name><desc>Overrides the size (in bytes) of the internal buffer used to copy the file. Default is 64k.</desc></param><param><name>wrap</name><desc>Should the fileparts be wrapped when copying to a smaller sized cluster? The default is FALSE.</desc></param></Documentation>
    <Signature name="fRemotePull" ret="varstring" param="(varstring remoteEspFsURL, varstring sourceLogicalName, varstring destinationGroup, varstring destinationLogicalName, integer4 timeOut=-1, integer4 maxConnections=-1, boolean allowOverwrite=FALSE, boolean replicate=FALSE, boolean asSuperfile=FALSE, boolean forcePush=FALSE, integer4 transferBufferSize=0, boolean wrap=FALSE, boolean compress=FALSE)" hlen="21">varstring fRemotePull(varstring remoteEspFsURL, varstring sourceLogicalName, varstring destinationGroup, varstring destinationLogicalName, integer4 timeOut=-1, integer4 maxConnections=-1, boolean allowOverwrite=FALSE, boolean replicate=FALSE, boolean asSuperfile=FALSE, boolean forcePush=FALSE, integer4 transferBufferSize=0, boolean wrap=FALSE, boolean compress=FALSE)</Signature><Params>
     <Param name="remoteEspFsURL"/>
     <Param name="sourceLogicalName"/>
     <Param name="destinationGroup"/>
     <Param name="destinationLogicalName"/>
     <Param name="timeOut"/>
     <Param name="maxConnections"/>
     <Param name="allowOverwrite"/>
     <Param name="Replicate"/>
     <Param name="asSuperfile"/>
     <Param name="forcePush"/>
     <Param name="transferBufferSize"/>
     <Param name="wrap"/>
     <Param name="compress"/>
    </Params>
   </Definition>
   <Definition body="40243" end="40478" exported="1" fullname="file.remotepull" inherit_type="local" line="628" name="RemotePull" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/File.ecl" start="39875">
    <Type>function</Type>
    <Documentation>
     <firstline>Same as fRemotePull, but does not return the DFU Workunit ID</firstline><see>fRemotePull</see><content>Same as fRemotePull, but does not return the DFU Workunit ID.</content></Documentation>
    <Signature name="RemotePull" ret="" param="(varstring remoteEspFsURL, varstring sourceLogicalName, varstring destinationGroup, varstring destinationLogicalName, integer4 timeOut=-1, integer4 maxConnections=-1, boolean allowOverwrite=FALSE, boolean replicate=FALSE, boolean asSuperfile=FALSE, boolean forcePush=FALSE, integer4 transferBufferSize=0, boolean wrap=FALSE, boolean compress=FALSE)" hlen="10">RemotePull(varstring remoteEspFsURL, varstring sourceLogicalName, varstring destinationGroup, varstring destinationLogicalName, integer4 timeOut=-1, integer4 maxConnections=-1, boolean allowOverwrite=FALSE, boolean replicate=FALSE, boolean asSuperfile=FALSE, boolean forcePush=FALSE, integer4 transferBufferSize=0, boolean wrap=FALSE, boolean compress=FALSE)</Signature><Params>
     <Param name="remoteEspFsURL"/>
     <Param name="sourceLogicalName"/>
     <Param name="destinationGroup"/>
     <Param name="destinationLogicalName"/>
     <Param name="timeOut"/>
     <Param name="maxConnections"/>
     <Param name="allowOverwrite"/>
     <Param name="Replicate"/>
     <Param name="asSuperfile"/>
     <Param name="forcePush"/>
     <Param name="transferBufferSize"/>
     <Param name="wrap"/>
     <Param name="compress"/>
    </Params>
   </Definition>
   <Definition body="41689" end="41795" exported="1" fullname="file.fmonitorlogicalfilename" inherit_type="local" line="646" name="fMonitorLogicalFileName" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/File.ecl" start="41535">
    <Type>function</Type>
    <Documentation>
     <firstline>Creates a file monitor job in the DFU Server</firstline><content>Creates a file monitor job in the DFU Server. If an appropriately named file arrives in this interval it will fire the event with the name of the triggering object as the event subtype (see the EVENT function).</content><return>The DFU workunit id for the job.</return><param><name>eventToFire</name><desc>The user-defined name of the event to fire when the filename appears. This value is used as the first parameter to the EVENT function.</desc></param><param><name>name</name><desc>The name of the logical file to monitor. This may contain wildcard characters ( * and ?)</desc></param><param><name>shotCount</name><desc>The number of times to generate the event before the monitoring job completes. A value of -1 indicates the monitoring job continues until manually aborted. The default is 1.</desc></param><param><name>espServerIpPort</name><desc>The url of the ESP file copying service. Defaults to the value of ws_fs_server in the environment.</desc></param></Documentation>
    <Signature name="fMonitorLogicalFileName" ret="varstring" param="(varstring eventToFire, varstring name, integer4 shotCount=1, varstring espServerIpPort=GETENV('ws_fs_server'))" hlen="33">varstring fMonitorLogicalFileName(varstring eventToFire, varstring name, integer4 shotCount=1, varstring espServerIpPort=GETENV('ws_fs_server'))</Signature><Params>
     <Param name="eventToFire"/>
     <Param name="name"/>
     <Param name="shotCount"/>
     <Param name="espServerIpPort"/>
    </Params>
   </Definition>
   <Definition body="42061" end="42166" exported="1" fullname="file.monitorlogicalfilename" inherit_type="local" line="655" name="MonitorLogicalFileName" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/File.ecl" start="41918">
    <Type>function</Type>
    <Documentation>
     <firstline>Same as fMonitorLogicalFileName, but does not return the DFU Workunit ID</firstline><see>fMonitorLogicalFileName</see><content>Same as fMonitorLogicalFileName, but does not return the DFU Workunit ID.</content></Documentation>
    <Signature name="MonitorLogicalFileName" ret="" param="(varstring eventToFire, varstring name, integer4 shotCount=1, varstring espServerIpPort=GETENV('ws_fs_server'))" hlen="22">MonitorLogicalFileName(varstring eventToFire, varstring name, integer4 shotCount=1, varstring espServerIpPort=GETENV('ws_fs_server'))</Signature><Params>
     <Param name="eventToFire"/>
     <Param name="name"/>
     <Param name="shotCount"/>
     <Param name="espServerIpPort"/>
    </Params>
   </Definition>
   <Definition body="43573" end="43685" exported="1" fullname="file.fmonitorfile" inherit_type="local" line="674" name="fMonitorFile" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/File.ecl" start="43389">
    <Type>function</Type>
    <Documentation>
     <firstline>Creates a file monitor job in the DFU Server</firstline><content>Creates a file monitor job in the DFU Server. If an appropriately named file arrives in this interval it will fire the event with the name of the triggering object as the event subtype (see the EVENT function).</content><return>The DFU workunit id for the job.</return><param><name>eventToFire</name><desc>The user-defined name of the event to fire when the filename appears. This value is used as the first parameter to the EVENT function.</desc></param><param><name>ip</name><desc>The the IP address for the file to monitor. This may be omitted if the filename parameter contains a complete URL.</desc></param><param><name>filename</name><desc>The full path of the file(s) to monitor. This may contain wildcard characters ( * and ?)</desc></param><param><name>subDirs</name><desc>Whether to include files in sub-directories (when the filename contains wildcards). Defaults to FALSE.</desc></param><param><name>shotCount</name><desc>The number of times to generate the event before the monitoring job completes. A value of -1 indicates the monitoring job continues until manually aborted. The default is 1.</desc></param><param><name>espServerIpPort</name><desc>The url of the ESP file copying service. Defaults to the value of ws_fs_server in the environment.</desc></param></Documentation>
    <Signature name="fMonitorFile" ret="varstring" param="(varstring eventToFire, varstring ip, varstring filename, boolean subDirs=FALSE, integer4 shotCount=1, varstring espServerIpPort=GETENV('ws_fs_server'))" hlen="22">varstring fMonitorFile(varstring eventToFire, varstring ip, varstring filename, boolean subDirs=FALSE, integer4 shotCount=1, varstring espServerIpPort=GETENV('ws_fs_server'))</Signature><Params>
     <Param name="eventToFire"/>
     <Param name="ip"/>
     <Param name="filename"/>
     <Param name="subDirs"/>
     <Param name="shotCount"/>
     <Param name="espServerIpPort"/>
    </Params>
   </Definition>
   <Definition body="43959" end="44070" exported="1" fullname="file.monitorfile" inherit_type="local" line="683" name="MonitorFile" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/File.ecl" start="43786">
    <Type>function</Type>
    <Documentation>
     <firstline>Same as fMonitorFile, but does not return the DFU Workunit ID</firstline><see>fMonitorFile</see><content>Same as fMonitorFile, but does not return the DFU Workunit ID.</content></Documentation>
    <Signature name="MonitorFile" ret="" param="(varstring eventToFire, varstring ip, varstring filename, boolean subdirs=FALSE, integer4 shotCount=1, varstring espServerIpPort=GETENV('ws_fs_server'))" hlen="11">MonitorFile(varstring eventToFire, varstring ip, varstring filename, boolean subdirs=FALSE, integer4 shotCount=1, varstring espServerIpPort=GETENV('ws_fs_server'))</Signature><Params>
     <Param name="eventToFire"/>
     <Param name="ip"/>
     <Param name="filename"/>
     <Param name="subdirs"/>
     <Param name="shotCount"/>
     <Param name="espServerIpPort"/>
    </Params>
   </Definition>
   <Definition body="44705" end="44788" exported="1" fullname="file.waitdfuworkunit" inherit_type="local" line="696" name="WaitDfuWorkunit" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/File.ecl" start="44583">
    <Type>function</Type>
    <Documentation>
     <firstline>Waits for the specified DFU workunit to finish</firstline><content>Waits for the specified DFU workunit to finish.</content><return>A string containing the final status string of the DFU workunit.</return><param><name>wuid</name><desc>The dfu wfid to wait for.</desc></param><param><name>timeOut</name><desc>The time in ms to wait for the operation to complete. A value of 0 causes the call to return immediately. Defaults to no timeout (-1).</desc></param><param><name>espServerIpPort</name><desc>The url of the ESP file copying service. Defaults to the value of ws_fs_server in the environment.</desc></param></Documentation>
    <Signature name="WaitDfuWorkunit" ret="varstring" param="(varstring wuid, integer4 timeOut=-1, varstring espServerIpPort=GETENV('ws_fs_server'))" hlen="25">varstring WaitDfuWorkunit(varstring wuid, integer4 timeOut=-1, varstring espServerIpPort=GETENV('ws_fs_server'))</Signature><Params>
     <Param name="wuid"/>
     <Param name="timeOut"/>
     <Param name="espServerIpPort"/>
    </Params>
   </Definition>
   <Definition body="45104" end="45179" exported="1" fullname="file.abortdfuworkunit" inherit_type="local" line="706" name="AbortDfuWorkunit" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/File.ecl" start="45012">
    <Type>function</Type>
    <Documentation>
     <firstline>Aborts the specified DFU workunit</firstline><content>Aborts the specified DFU workunit.</content><param><name>wuid</name><desc>The dfu wfid to abort.</desc></param><param><name>espServerIpPort</name><desc>The url of the ESP file copying service. Defaults to the value of ws_fs_server in the environment.</desc></param></Documentation>
    <Signature name="AbortDfuWorkunit" ret="" param="(varstring wuid, varstring espServerIpPort=GETENV('ws_fs_server'))" hlen="16">AbortDfuWorkunit(varstring wuid, varstring espServerIpPort=GETENV('ws_fs_server'))</Signature><Params>
     <Param name="wuid"/>
     <Param name="espServerIpPort"/>
    </Params>
   </Definition>
   <Definition body="45824" end="45915" exported="1" fullname="file.createsuperfile" inherit_type="local" line="720" name="CreateSuperFile" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/File.ecl" start="45721">
    <Type>function</Type>
    <Documentation>
     <firstline>Creates an empty superfile</firstline><content>Creates an empty superfile. This function is not included in a superfile transaction.</content><param><name>superName</name><desc>The logical name of the superfile.</desc></param><param><name>sequentialParts</name><desc>Whether the sub-files must be sequentially ordered. Default to FALSE.</desc></param><param><name>allowExist</name><desc>Indicating whether to post an error if the superfile already exists. If TRUE, no error is posted. Defaults to FALSE.</desc></param></Documentation>
    <Signature name="CreateSuperFile" ret="" param="(varstring superName, boolean sequentialParts=FALSE, boolean allowExist=FALSE)" hlen="15">CreateSuperFile(varstring superName, boolean sequentialParts=FALSE, boolean allowExist=FALSE)</Signature><Params>
     <Param name="superName"/>
     <Param name="sequentialParts"/>
     <Param name="allowExist"/>
    </Params>
   </Definition>
   <Definition body="46218" end="46280" exported="1" fullname="file.superfileexists" inherit_type="local" line="732" name="SuperFileExists" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/File.ecl" start="46164">
    <Type>function</Type>
    <Documentation>
     <firstline>Checks if the specified filename is present in the Distributed File Utility (DFU) and is a SuperFile</firstline><see>FileExists</see><content>Checks if the specified filename is present in the Distributed File Utility (DFU) and is a SuperFile.</content><return>Whether the file exists.</return><param><name>superName</name><desc>The logical name of the superfile.</desc></param></Documentation>
    <Signature name="SuperFileExists" ret="boolean" param="(varstring superName)" hlen="23">boolean SuperFileExists(varstring superName)</Signature><Params>
     <Param name="superName"/>
    </Params>
   </Definition>
   <Definition body="46472" end="46545" exported="1" fullname="file.deletesuperfile" inherit_type="local" line="743" name="DeleteSuperFile" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/File.ecl" start="46401">
    <Type>function</Type>
    <Documentation>
     <firstline>Deletes the superfile</firstline><see>FileExists</see><content>Deletes the superfile.</content><param><name>superName</name><desc>The logical name of the superfile.</desc></param></Documentation>
    <Signature name="DeleteSuperFile" ret="" param="(varstring superName, boolean deletesub=FALSE)" hlen="15">DeleteSuperFile(varstring superName, boolean deletesub=FALSE)</Signature><Params>
     <Param name="superName"/>
     <Param name="deletesub"/>
    </Params>
   </Definition>
   <Definition body="46814" end="46881" exported="1" fullname="file.getsuperfilesubcount" inherit_type="local" line="753" name="GetSuperFileSubCount" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/File.ecl" start="46753">
    <Type>function</Type>
    <Documentation>
     <firstline>Returns the number of sub-files contained within a superfile</firstline><content>Returns the number of sub-files contained within a superfile.</content><return>The number of sub-files within the superfile.</return><param><name>superName</name><desc>The logical name of the superfile.</desc></param></Documentation>
    <Signature name="GetSuperFileSubCount" ret="unsigned4" param="(varstring superName)" hlen="30">unsigned4 GetSuperFileSubCount(varstring superName)</Signature><Params>
     <Param name="superName"/>
    </Params>
   </Definition>
   <Definition body="47362" end="47446" exported="1" fullname="file.getsuperfilesubname" inherit_type="local" line="765" name="GetSuperFileSubName" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/File.ecl" start="47260">
    <Type>function</Type>
    <Documentation>
     <firstline>Returns the name of the Nth sub-file within a superfile</firstline><content>Returns the name of the Nth sub-file within a superfile.</content><return>The logical name of the selected sub-file.</return><param><name>superName</name><desc>The logical name of the superfile.</desc></param><param><name>fileNum</name><desc>The 1-based position of the sub-file to return the name of.</desc></param><param><name>absPath</name><desc>Whether to prepend '~' to the name of the resulting logical file name.</desc></param></Documentation>
    <Signature name="GetSuperFileSubName" ret="varstring" param="(varstring superName, unsigned4 fileNum, boolean absPath=FALSE)" hlen="29">varstring GetSuperFileSubName(varstring superName, unsigned4 fileNum, boolean absPath=FALSE)</Signature><Params>
     <Param name="superName"/>
     <Param name="fileNum"/>
     <Param name="absPath"/>
    </Params>
   </Definition>
   <Definition body="47794" end="47870" exported="1" fullname="file.findsuperfilesubname" inherit_type="local" line="776" name="FindSuperFileSubName" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/File.ecl" start="47714">
    <Type>function</Type>
    <Documentation>
     <firstline>Returns the position of a file within a superfile</firstline><content>Returns the position of a file within a superfile.</content><return>The 1-based position of the sub-file within the superfile.</return><param><name>superName</name><desc>The logical name of the superfile.</desc></param><param><name>subName</name><desc>The logical name of the sub-file.</desc></param></Documentation>
    <Signature name="FindSuperFileSubName" ret="unsigned4" param="(varstring superName, varstring subName)" hlen="30">unsigned4 FindSuperFileSubName(varstring superName, varstring subName)</Signature><Params>
     <Param name="superName"/>
     <Param name="subName"/>
    </Params>
   </Definition>
   <Definition body="48089" end="48152" exported="1" fullname="file.startsuperfiletransaction" inherit_type="local" line="784" name="StartSuperFileTransaction" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/File.ecl" start="48052">
    <Type>function</Type>
    <Documentation>
     <firstline>Starts a superfile transaction</firstline><content>Starts a superfile transaction. All superfile operations within the transaction will either be executed atomically or rolled back when the transaction is finished.</content></Documentation>
    <Signature name="StartSuperFileTransaction" ret="" param="()" hlen="25">StartSuperFileTransaction()</Signature><Params/>
   </Definition>
   <Definition body="48773" end="48869" exported="1" fullname="file.addsuperfile" inherit_type="local" line="797" name="AddSuperFile" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/File.ecl" start="48643">
    <Type>function</Type>
    <Documentation>
     <firstline>Adds a file to a superfile</firstline><content>Adds a file to a superfile.</content><param><name>superName</name><desc>The logical name of the superfile.</desc></param><param><name>subName</name><desc>The name of the logical file to add.</desc></param><param><name>atPos</name><desc>The position to add the sub-file, or 0 to append. Defaults to 0.</desc></param><param><name>addContents</name><desc>Controls whether adding a superfile adds the superfile, or its contents. Defaults to FALSE (do not expand).</desc></param><param><name>strict</name><desc>Check addContents only if subName is a superfile, and ensure superfiles exist.</desc></param></Documentation>
    <Signature name="AddSuperFile" ret="" param="(varstring superName, varstring subName, unsigned4 atPos=0, boolean addContents=FALSE, boolean strict=FALSE)" hlen="12">AddSuperFile(varstring superName, varstring subName, unsigned4 atPos=0, boolean addContents=FALSE, boolean strict=FALSE)</Signature><Params>
     <Param name="superName"/>
     <Param name="subName"/>
     <Param name="atPos"/>
     <Param name="addContents"/>
     <Param name="strict"/>
    </Params>
   </Definition>
   <Definition body="49410" end="49502" exported="1" fullname="file.removesuperfile" inherit_type="local" line="809" name="RemoveSuperFile" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/File.ecl" start="49296">
    <Type>function</Type>
    <Documentation>
     <firstline>Removes a sub-file from a superfile</firstline><content>Removes a sub-file from a superfile.</content><param><name>superName</name><desc>The logical name of the superfile.</desc></param><param><name>subName</name><desc>The name of the sub-file to remove.</desc></param><param><name>del</name><desc>Indicates whether the sub-file should also be removed from the disk. Defaults to FALSE.</desc></param><param><name>removeContents</name><desc>Controls whether the contents of a sub-file which is a superfile should be recursively removed. Defaults to FALSE.</desc></param></Documentation>
    <Signature name="RemoveSuperFile" ret="" param="(varstring superName, varstring subName, boolean del=FALSE, boolean removeContents=FALSE)" hlen="15">RemoveSuperFile(varstring superName, varstring subName, boolean del=FALSE, boolean removeContents=FALSE)</Signature><Params>
     <Param name="superName"/>
     <Param name="subName"/>
     <Param name="del"/>
     <Param name="removeContents"/>
    </Params>
   </Definition>
   <Definition body="49796" end="49862" exported="1" fullname="file.clearsuperfile" inherit_type="local" line="819" name="ClearSuperFile" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/File.ecl" start="49732">
    <Type>function</Type>
    <Documentation>
     <firstline>Removes all sub-files from a superfile</firstline><content>Removes all sub-files from a superfile.</content><param><name>superName</name><desc>The logical name of the superfile.</desc></param><param><name>del</name><desc>Indicates whether the sub-files should also be removed from the disk. Defaults to FALSE.</desc></param></Documentation>
    <Signature name="ClearSuperFile" ret="" param="(varstring superName, boolean del=FALSE)" hlen="14">ClearSuperFile(varstring superName, boolean del=FALSE)</Signature><Params>
     <Param name="superName"/>
     <Param name="del"/>
    </Params>
   </Definition>
   <Definition body="50141" end="50212" exported="1" fullname="file.removeownedsubfiles" inherit_type="local" line="829" name="RemoveOwnedSubFiles" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/File.ecl" start="50072">
    <Type>function</Type>
    <Documentation>
     <firstline>Removes all soley-owned sub-files from a superfile</firstline><content>Removes all soley-owned sub-files from a superfile. If a sub-file is also contained within another superfile then it is retained.</content><param><name>superName</name><desc>The logical name of the superfile.</desc></param></Documentation>
    <Signature name="RemoveOwnedSubFiles" ret="" param="(varstring superName, boolean del=FALSE)" hlen="19">RemoveOwnedSubFiles(varstring superName, boolean del=FALSE)</Signature><Params>
     <Param name="superName"/>
     <Param name="del"/>
    </Params>
   </Definition>
   <Definition body="50396" end="50500" exported="1" fullname="file.deleteownedsubfiles" inherit_type="local" line="838" name="DeleteOwnedSubFiles" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/File.ecl" start="50346">
    <Type>function</Type>
    <Documentation>
     <firstline>Legacy version of RemoveOwnedSubFiles which was incorrectly named in a previous version</firstline><see>RemoveOwnedSubFIles</see><content>Legacy version of RemoveOwnedSubFiles which was incorrectly named in a previous version.</content></Documentation>
    <Signature name="DeleteOwnedSubFiles" ret="" param="(varstring superName)" hlen="19">DeleteOwnedSubFiles(varstring superName)</Signature><Params>
     <Param name="superName"/>
    </Params>
   </Definition>
   <Definition body="50752" end="50825" exported="1" fullname="file.swapsuperfile" inherit_type="local" line="848" name="SwapSuperFile" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/File.ecl" start="50685">
    <Type>function</Type>
    <Documentation>
     <firstline>Swap the contents of two superfiles</firstline><content>Swap the contents of two superfiles.</content><param><name>superName1</name><desc>The logical name of the first superfile.</desc></param><param><name>superName2</name><desc>The logical name of the second superfile.</desc></param></Documentation>
    <Signature name="SwapSuperFile" ret="" param="(varstring superName1, varstring superName2)" hlen="13">SwapSuperFile(varstring superName1, varstring superName2)</Signature><Params>
     <Param name="superName1"/>
     <Param name="superName2"/>
    </Params>
   </Definition>
   <Definition body="51216" end="51303" exported="1" fullname="file.replacesuperfile" inherit_type="local" line="859" name="ReplaceSuperFile" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/File.ecl" start="51125">
    <Type>function</Type>
    <Documentation>
     <firstline>Removes a sub-file from a superfile and replaces it with another</firstline><content>Removes a sub-file from a superfile and replaces it with another.</content><param><name>superName</name><desc>The logical name of the superfile.</desc></param><param><name>oldSubFile</name><desc>The logical name of the sub-file to remove.</desc></param><param><name>newSubFile</name><desc>The logical name of the sub-file to replace within the superfile.</desc></param></Documentation>
    <Signature name="ReplaceSuperFile" ret="" param="(varstring superName, varstring oldSubFile, varstring newSubFile)" hlen="16">ReplaceSuperFile(varstring superName, varstring oldSubFile, varstring newSubFile)</Signature><Params>
     <Param name="superName"/>
     <Param name="oldSubFile"/>
     <Param name="newSubFile"/>
    </Params>
   </Definition>
   <Definition body="51565" end="51637" exported="1" fullname="file.finishsuperfiletransaction" inherit_type="local" line="867" name="FinishSuperFileTransaction" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/File.ecl" start="51505">
    <Type>function</Type>
    <Documentation>
     <firstline>Finishes a superfile transaction</firstline><content>Finishes a superfile transaction. This executes all the operations since the matching StartSuperFileTransaction(). If there are any errors, then all of the operations are rolled back.</content></Documentation>
    <Signature name="FinishSuperFileTransaction" ret="" param="(boolean rollback=FALSE)" hlen="26">FinishSuperFileTransaction(boolean rollback=FALSE)</Signature><Params>
     <Param name="rollback"/>
    </Params>
   </Definition>
   <Definition body="52046" end="52119" exported="1" fullname="file.superfilecontents" inherit_type="local" line="878" name="SuperFileContents" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/File.ecl" start="51942">
    <Type>function</Type>
    <Documentation>
     <firstline>Returns the list of sub-files contained within a superfile</firstline><content>Returns the list of sub-files contained within a superfile.</content><return>A dataset containing the names of the sub-files.</return><param><name>superName</name><desc>The logical name of the superfile.</desc></param><param><name>recurse</name><desc>Should the contents of child-superfiles be expanded. Default is FALSE.</desc></param></Documentation>
    <Signature name="SuperFileContents" ret="dataset(FsLogicalFileNameRecord)" param="(varstring superName, boolean recurse=FALSE)" hlen="50">dataset(FsLogicalFileNameRecord) SuperFileContents(varstring superName, boolean recurse=FALSE)</Signature><Params>
     <Param name="superName"/>
     <Param name="recurse"/>
    </Params>
   </Definition>
   <Definition body="52417" end="52481" exported="1" fullname="file.logicalfilesuperowners" inherit_type="local" line="888" name="LogicalFileSuperOwners" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/File.ecl" start="52336">
    <Type>function</Type>
    <Documentation>
     <firstline>Returns the list of superfiles that a logical file is contained within</firstline><content>Returns the list of superfiles that a logical file is contained within.</content><return>A dataset containing the names of the superfiles.</return><param><name>name</name><desc>The name of the logical file.</desc></param></Documentation>
    <Signature name="LogicalFileSuperOwners" ret="dataset(FsLogicalFileNameRecord)" param="(varstring name)" hlen="55">dataset(FsLogicalFileNameRecord) LogicalFileSuperOwners(varstring name)</Signature><Params>
     <Param name="name"/>
    </Params>
   </Definition>
   <Definition body="52747" end="52808" exported="1" fullname="file.logicalfilesupersublist" inherit_type="local" line="897" name="LogicalFileSuperSubList" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/File.ecl" start="52679">
    <Type>function</Type>
    <Documentation>
     <firstline>Returns the list of all the superfiles in the system and their component sub-files</firstline><content>Returns the list of all the superfiles in the system and their component sub-files.</content><return>A dataset containing pairs of superName,subName for each component file.</return></Documentation>
    <Signature name="LogicalFileSuperSubList" ret="dataset(FsLogicalSuperSubRecord)" param="()" hlen="56">dataset(FsLogicalSuperSubRecord) LogicalFileSuperSubList()</Signature><Params/>
   </Definition>
   <Definition body="54146" end="54257" exported="1" fullname="file.fpromotesuperfilelist" inherit_type="local" line="915" name="fPromoteSuperFileList" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/File.ecl" start="53979">
    <Type>function</Type>
    <Documentation>
     <firstline>Moves the sub-files from the first entry in the list of superfiles to the next in the list, repeating the process through the list of superfiles</firstline><content>Moves the sub-files from the first entry in the list of superfiles to the next in the list, repeating the process through the list of superfiles.</content><return>A string containing a comma separated list of the previous sub-file contents of the emptied superfile.</return><param><name>superNames</name><desc>A set of the names of the superfiles to act on. Any that do not exist will be created. The contents of each superfile will be moved to the next in the list.</desc></param><param><name>addHead</name><desc>A string containing a comma-delimited list of logical file names to add to the first superfile after the promotion process is complete. Defaults to ''.</desc></param><param><name>delTail</name><desc>Indicates whether to physically delete the contents moved out of the last superfile. The default is FALSE.</desc></param><param><name>createOnlyOne</name><desc>Specifies whether to only create a single superfile (truncate the list at the first non-existent superfile). The default is FALSE.</desc></param><param><name>reverse</name><desc>Reverse the order of processing the superfiles list, effectively 'demoting' instead of 'promoting' the sub-files. The default is FALSE.</desc></param></Documentation>
    <Signature name="fPromoteSuperFileList" ret="varstring" param="(set of varstring superNames, varstring addHead='', boolean delTail=FALSE, boolean createOnlyOne=FALSE, boolean reverse=FALSE)" hlen="31">varstring fPromoteSuperFileList(set of varstring superNames, varstring addHead='', boolean delTail=FALSE, boolean createOnlyOne=FALSE, boolean reverse=FALSE)</Signature><Params>
     <Param name="superNames"/>
     <Param name="addHead"/>
     <Param name="delTail"/>
     <Param name="createOnlyOne"/>
     <Param name="reverse"/>
    </Params>
   </Definition>
   <Definition body="54532" end="54642" exported="1" fullname="file.promotesuperfilelist" inherit_type="local" line="924" name="PromoteSuperFileList" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/File.ecl" start="54376">
    <Type>function</Type>
    <Documentation>
     <firstline>Same as fPromoteSuperFileList, but does not return the DFU Workunit ID</firstline><see>fPromoteSuperFileList</see><content>Same as fPromoteSuperFileList, but does not return the DFU Workunit ID.</content></Documentation>
    <Signature name="PromoteSuperFileList" ret="" param="(set of varstring superNames, varstring addHead='', boolean delTail=FALSE, boolean createOnlyOne=FALSE, boolean reverse=FALSE)" hlen="20">PromoteSuperFileList(set of varstring superNames, varstring addHead='', boolean delTail=FALSE, boolean createOnlyOne=FALSE, boolean reverse=FALSE)</Signature><Params>
     <Param name="superNames"/>
     <Param name="addHead"/>
     <Param name="delTail"/>
     <Param name="createOnlyOne"/>
     <Param name="reverse"/>
    </Params>
   </Definition>
   <Signature name="File" ret="" param="" hlen="4">File</Signature><Parents/>
  </Definition>
 <Documentation><content> </content></Documentation></Source>
 </Meta>