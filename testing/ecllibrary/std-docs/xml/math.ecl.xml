<?xml version='1.0' encoding='UTF-8'?>
<Meta>
 <Source name="math" sourcePath="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/math.ecl" target="math.ecl.xml">
  <Definition exported="1" fullname="Math" inherittype="local" line="17" name="Math">
   <Type>module</Type>
   <Definition exported="1" fullname="math.infinity" inherittype="local" line="24" name="Infinity">
    <Type>attribute</Type>
    <Signature name="Infinity" ret="REAL8" param="" hlen="14">REAL8 Infinity</Signature><Documentation>
     <firstline>Return a real "infinity" value</firstline><content>Return a real "infinity" value.</content></Documentation>
   </Definition>
   <Definition exported="1" fullname="math.nan" inherittype="local" line="31" name="NaN">
    <Type>attribute</Type>
    <Signature name="NaN" ret="REAL8" param="" hlen="9">REAL8 NaN</Signature><Documentation>
     <firstline>Return a non-signalling NaN (Not a Number)value</firstline><content>Return a non-signalling NaN (Not a Number)value.</content></Documentation>
   </Definition>
   <Definition exported="1" fullname="math.isinfinite" inherittype="local" line="39" name="isInfinite">
    <Type>function</Type>
    <Documentation>
     <firstline>Return whether a real value is infinite (positive or negative)</firstline><content>Return whether a real value is infinite (positive or negative).</content><param><name>val</name><desc>The value to test.</desc></param></Documentation>
    <Signature name="isInfinite" ret="BOOLEAN" param="(REAL8 val)" hlen="18">BOOLEAN isInfinite(REAL8 val)</Signature><Params>
     <Param name="val"/>
    </Params>
   </Definition>
   <Definition exported="1" fullname="math.isnan" inherittype="local" line="47" name="isNaN">
    <Type>function</Type>
    <Documentation>
     <firstline>Return whether a real value is a NaN (not a number) value</firstline><content>Return whether a real value is a NaN (not a number) value.</content><param><name>val</name><desc>The value to test.</desc></param></Documentation>
    <Signature name="isNaN" ret="BOOLEAN" param="(REAL8 val)" hlen="13">BOOLEAN isNaN(REAL8 val)</Signature><Params>
     <Param name="val"/>
    </Params>
   </Definition>
   <Definition exported="1" fullname="math.isfinite" inherittype="local" line="55" name="isFinite">
    <Type>function</Type>
    <Documentation>
     <firstline>Return whether a real value is a valid value (neither infinite not NaN)</firstline><content>Return whether a real value is a valid value (neither infinite not NaN).</content><param><name>val</name><desc>The value to test.</desc></param></Documentation>
    <Signature name="isFinite" ret="BOOLEAN" param="(REAL8 val)" hlen="16">BOOLEAN isFinite(REAL8 val)</Signature><Params>
     <Param name="val"/>
    </Params>
   </Definition>
   <Definition exported="1" fullname="math.fmod" inherittype="local" line="68" name="FMod">
    <Type>function</Type>
    <Documentation>
     <firstline>Returns the floating-point remainder of numer/denom (rounded towards zero)</firstline><content>Returns the floating-point remainder of numer/denom (rounded towards zero). If denom is zero, the result depends on the -fdivideByZero flag: 'zero' or unset: return zero. 'nan': return a non-signalling NaN value 'fail': throw an exception</content><param><name>numer</name><desc>The numerator.</desc></param><param><name>denom</name><desc>The numerator.</desc></param></Documentation>
    <Signature name="FMod" ret="REAL8" param="(REAL8 numer, REAL8 denom)" hlen="10">REAL8 FMod(REAL8 numer, REAL8 denom)</Signature><Params>
     <Param name="numer"/>
     <Param name="denom"/>
    </Params>
   </Definition>
   <Definition exported="1" fullname="math.fmatch" inherittype="local" line="83" name="FMatch">
    <Type>function</Type>
    <Documentation>
     <firstline>Returns whether two floating point values are the same, within margin of error epsilon</firstline><content>Returns whether two floating point values are the same, within margin of error epsilon.</content><param><name>a</name><desc>The first value.</desc></param><param><name>b</name><desc>The second value.</desc></param><param><name>epsilon</name><desc>The allowable margin of error.</desc></param></Documentation>
    <Signature name="FMatch" ret="BOOLEAN" param="(REAL8 a, REAL8 b, REAL8 epsilon=0.0)" hlen="14">BOOLEAN FMatch(REAL8 a, REAL8 b, REAL8 epsilon=0.0)</Signature><Params>
     <Param name="a"/>
     <Param name="b"/>
     <Param name="epsilon"/>
    </Params>
   </Definition>
   <Signature name="Math" ret="" param="" hlen="4">Math</Signature><Parents/>
  </Definition>
 <Documentation><content> </content></Documentation></Source>
</Meta>