<?xml version='1.0' encoding='UTF-8'?>
<Meta>
 <Depends sourcePath="/home/sarthak/runtime/opt/HPCCSystems/6.5.0/clienttools/plugins/lib_eclblas.ecllib" target="/home/sarthak/runtime/opt/HPCCSystems/6.5.0/clienttools/plugins/lib_eclblas.ecllib"/><Source name="BLAS" sourcePath="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/BLAS.ecl" target="BLAS.ecl.xml">
  <Definition body="833" end="11173" exported="1" fullname="BLAS" inherit_type="local" line="19" name="BLAS" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/BLAS.ecl" start="819">
   <Type>module</Type>
   <Definition body="925" end="1427" exported="1" fullname="BLAS.Types" inherit_type="local" line="21" name="Types" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/BLAS.ecl" start="910">
    <Type>module</Type>
    <Definition body="959" end="985" exported="1" fullname="blas.types.value_t" inherit_type="local" line="22" name="value_t" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/BLAS.ecl" start="937">
     <Signature sign="value_t" name="value_t">value_t</Signature><Type>attribute</Type>
    </Definition>
    <Definition body="1025" end="1055" exported="1" fullname="blas.types.dimension_t" inherit_type="local" line="23" name="dimension_t" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/BLAS.ecl" start="1003">
     <Signature sign="dimension_t" name="dimension_t">dimension_t</Signature><Type>attribute</Type>
    </Definition>
    <Definition body="1095" end="1122" exported="1" fullname="blas.types.matrix_t" inherit_type="local" line="24" name="matrix_t" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/BLAS.ecl" start="1073">
     <Signature sign="matrix_t" name="matrix_t">matrix_t</Signature><Type>attribute</Type>
    </Definition>
    <Definition body="1167" end="1194" exported="1" inherit_type="local" line="25" name="Triangle" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/BLAS.ecl" start="1145" fullname="ecldoc-Triangle">
     <Signature sign="Triangle" name="Triangle">Triangle</Signature><Type>attribute</Type>
    </Definition>
    <Definition body="1260" end="1287" exported="1" inherit_type="local" line="26" name="Diagonal" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/BLAS.ecl" start="1238" fullname="ecldoc-Diagonal">
     <Signature sign="Diagonal" name="Diagonal">Diagonal</Signature><Type>attribute</Type>
    </Definition>
    <Definition body="1360" end="1383" exported="1" inherit_type="local" line="27" name="Side" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/BLAS.ecl" start="1338" fullname="ecldoc-Side">
     <Signature sign="Side" name="Side">Side</Signature><Type>attribute</Type>
    </Definition>
    <Signature sign="Types" name="Types">Types</Signature><Parents/>
   </Definition>
   <Definition body="1759" end="1762" exported="1" fullname="blas.icellfunc" inherit_type="local" line="37" name="ICellFunc" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/BLAS.ecl" start="1601">
    <Type>function</Type>
    <Documentation>
     <param><name>v</name><desc>the value</desc></param><param><name>r</name><desc>the row ordinal</desc></param><param><name>c</name><desc>the column ordinal</desc></param><content>Function prototype for Apply2Cell.</content><firstline>Function prototype for Apply2Cell</firstline><return>the updated value</return></Documentation>
    <Signature sign="Types.value_t ICellFunc(Types.value_t v, Types.dimension_t r, Types.dimension_t c)" name="ICellFunc">Types.value_t ICellFunc(Types.value_t v, Types.dimension_t r, Types.dimension_t c)</Signature><Params>
     <Param name="v"/>
     <Param name="r"/>
     <Param name="c"/>
    </Params>
   </Definition>
   <Definition body="2184" end="2494" exported="1" fullname="blas.apply2cells" inherit_type="local" line="49" name="Apply2Cells" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/BLAS.ecl" start="1967">
    <Type>function</Type>
    <Documentation>
     <param><name>m</name><desc>number of rows</desc></param><param><name>n</name><desc>number of columns</desc></param><param><name>x</name><desc>matrix</desc></param><param><name>f</name><desc>function to apply</desc></param><content>Iterate matrix and apply function to each cell</content><firstline>Iterate matrix and apply function to each cell</firstline><return>updated matrix</return></Documentation>
    <Signature sign="Types.matrix_t Apply2Cells(Types.dimension_t m, Types.dimension_t n, Types.matrix_t x, ICellFunc f)" name="Apply2Cells">Types.matrix_t Apply2Cells(Types.dimension_t m, Types.dimension_t n, Types.matrix_t x, ICellFunc f)</Signature><Params>
     <Param name="m"/>
     <Param name="n"/>
     <Param name="x"/>
     <Param name="f"/>
    </Params>
   </Definition>
   <Definition body="3005" end="3053" exported="1" fullname="blas.dasum" inherit_type="local" line="73" name="dasum" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/BLAS.ecl" start="2860">
    <Type>function</Type>
    <Documentation>
     <param><name>m</name><desc>the number of entries</desc></param><param><name>x</name><desc>the column major matrix holding the vector</desc></param><param><name>incx</name><desc>the increment for x, 1 in the case of an actual vector</desc></param><param><name>skipped</name><desc>default is zero, the number of entries stepped over to get to the first entry</desc></param><content>Absolute sum, the 1 norm of a vector.</content><firstline>Absolute sum, the 1 norm of a vector</firstline><return>the sum of the absolute values</return></Documentation>
    <Signature sign="Types.value_t dasum(Types.dimension_t m, Types.matrix_t x, Types.dimension_t incx, Types.dimension_t skipped=0)" name="dasum">Types.value_t dasum(Types.dimension_t m, Types.matrix_t x, Types.dimension_t incx, Types.dimension_t skipped=0)</Signature><Params>
     <Param name="m"/>
     <Param name="x"/>
     <Param name="incx"/>
     <Param name="skipped"/>
    </Params>
   </Definition>
   <Definition body="3792" end="3869" exported="1" fullname="blas.daxpy" inherit_type="local" line="90" name="daxpy" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/BLAS.ecl" start="3535">
    <Type>function</Type>
    <Documentation>
     <param><name>N</name><desc>number of elements in vector</desc></param><param><name>alpha</name><desc>the scalar multiplier</desc></param><param><name>X</name><desc>the column major matrix holding the vector X</desc></param><param><name>incX</name><desc>the increment or stride for the vector</desc></param><param><name>Y</name><desc>the column major matrix holding the vector Y</desc></param><param><name>incY</name><desc>the increment or stride of Y</desc></param><param><name>x_skipped</name><desc>number of entries skipped to get to the first X</desc></param><param><name>y_skipped</name><desc>number of entries skipped to get to the first Y</desc></param><content>alpha*X + Y</content><firstline>alpha*X + Y</firstline><return>the updated matrix</return></Documentation>
    <Signature sign="Types.matrix_t daxpy(Types.dimension_t N, Types.value_t alpha, Types.matrix_t X, Types.dimension_t incX, Types.matrix_t Y, Types.dimension_t incY, Types.dimension_t x_skipped=0, Types.dimension_t y_skipped=0)" name="daxpy">Types.matrix_t daxpy(Types.dimension_t N, Types.value_t alpha, Types.matrix_t X, Types.dimension_t incX, Types.matrix_t Y, Types.dimension_t incY, Types.dimension_t x_skipped=0, Types.dimension_t y_skipped=0)</Signature><Params>
     <Param name="N"/>
     <Param name="alpha"/>
     <Param name="X"/>
     <Param name="incX"/>
     <Param name="Y"/>
     <Param name="incY"/>
     <Param name="x_skipped"/>
     <Param name="y_skipped"/>
    </Params>
   </Definition>
   <Definition body="4649" end="4731" exported="1" fullname="blas.dgemm" inherit_type="local" line="109" name="dgemm" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/BLAS.ecl" start="4355">
    <Type>function</Type>
    <Documentation>
     <param><name>transposeA</name><desc>true when transpose of A is used</desc></param><param><name>transposeB</name><desc>true when transpose of B is used</desc></param><param><name>M</name><desc>number of rows in product</desc></param><param><name>N</name><desc>number of columns in product</desc></param><param><name>K</name><desc>number of columns/rows for the multiplier/multiplicand</desc></param><param><name>alpha</name><desc>scalar used on A</desc></param><param><name>A</name><desc>matrix A</desc></param><param><name>B</name><desc>matrix B</desc></param><param><name>beta</name><desc>scalar for matrix C</desc></param><param><name>C</name><desc>matrix C or empty</desc></param><content>alpha*op(A) op(B) + beta*C where op() is transpose</content><firstline>alpha*op(A) op(B) + beta*C where op() is transpose</firstline></Documentation>
    <Signature sign="Types.matrix_t dgemm(BOOLEAN transposeA, BOOLEAN transposeB, Types.dimension_t M, Types.dimension_t N, Types.dimension_t K, Types.value_t alpha, Types.matrix_t A, Types.matrix_t B, Types.value_t beta=0.0, Types.matrix_t C=[])" name="dgemm">Types.matrix_t dgemm(BOOLEAN transposeA, BOOLEAN transposeB, Types.dimension_t M, Types.dimension_t N, Types.dimension_t K, Types.value_t alpha, Types.matrix_t A, Types.matrix_t B, Types.value_t beta=0.0, Types.matrix_t C=[])</Signature><Params>
     <Param name="transposeA"/>
     <Param name="transposeB"/>
     <Param name="M"/>
     <Param name="N"/>
     <Param name="K"/>
     <Param name="alpha"/>
     <Param name="A"/>
     <Param name="B"/>
     <Param name="beta"/>
     <Param name="C"/>
    </Params>
   </Definition>
   <Definition body="5134" end="5171" exported="1" fullname="blas.dgetf2" inherit_type="local" line="124" name="dgetf2" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/BLAS.ecl" start="5028">
    <Type>function</Type>
    <Documentation>
     <param><name>m</name><desc>number of rows of A</desc></param><param><name>n</name><desc>number of columns of A</desc></param><content>Compute LU Factorization of matrix A.</content><firstline>Compute LU Factorization of matrix A</firstline><return>composite matrix of factors, lower triangle has an implied diagonal of ones. Upper triangle has the diagonal of the composite.</return></Documentation>
    <Signature sign="Types.matrix_t dgetf2(Types.dimension_t m, Types.dimension_t n, Types.matrix_t a)" name="dgetf2">Types.matrix_t dgetf2(Types.dimension_t m, Types.dimension_t n, Types.matrix_t a)</Signature><Params>
     <Param name="m"/>
     <Param name="n"/>
     <Param name="a"/>
    </Params>
   </Definition>
   <Definition body="5940" end="5986" exported="1" fullname="blas.dpotf2" inherit_type="local" line="143" name="dpotf2" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/BLAS.ecl" start="5790">
    <Type>function</Type>
    <Documentation>
     <param><name>tri</name><desc>indicate whether upper or lower triangle is used</desc></param><param><name>r</name><desc>number of rows/columns in the square matrix</desc></param><param><name>A</name><desc>the square matrix</desc></param><param><name>clear</name><desc>clears the unused triangle</desc></param><content>DPOTF2 computes the Cholesky factorization of a real symmetric positive definite matrix A. The factorization has the form A = U**T * U , if UPLO = 'U', or A = L * L**T, if UPLO = 'L', where U is an upper triangular matrix and L is lower triangular. This is the unblocked version of the algorithm, calling Level 2 BLAS.</content><firstline>DPOTF2 computes the Cholesky factorization of a real symmetric positive definite matrix A</firstline><return>the triangular matrix requested.</return></Documentation>
    <Signature sign="Types.matrix_t dpotf2(Types.Triangle tri, Types.dimension_t r, Types.matrix_t A, BOOLEAN clear=TRUE)" name="dpotf2">Types.matrix_t dpotf2(Types.Triangle tri, Types.dimension_t r, Types.matrix_t A, BOOLEAN clear=TRUE)</Signature><Params>
     <Param name="tri"/>
     <Param name="r"/>
     <Param name="A"/>
     <Param name="clear"/>
    </Params>
   </Definition>
   <Definition body="6522" end="6577" exported="1" fullname="blas.dscal" inherit_type="local" line="157" name="dscal" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/BLAS.ecl" start="6349">
    <Type>function</Type>
    <Documentation>
     <param><name>N</name><desc>number of elements in the vector</desc></param><param><name>alpha</name><desc>the scaling factor</desc></param><param><name>X</name><desc>the column major matrix holding the vector</desc></param><param><name>incX</name><desc>the stride to get to the next element in the vector</desc></param><param><name>skipped</name><desc>the number of elements skipped to get to the first element</desc></param><content>Scale a vector alpha</content><firstline>Scale a vector alpha</firstline><return>the updated matrix</return></Documentation>
    <Signature sign="Types.matrix_t dscal(Types.dimension_t N, Types.value_t alpha, Types.matrix_t X, Types.dimension_t incX, Types.dimension_t skipped=0)" name="dscal">Types.matrix_t dscal(Types.dimension_t N, Types.value_t alpha, Types.matrix_t X, Types.dimension_t incX, Types.dimension_t skipped=0)</Signature><Params>
     <Param name="N"/>
     <Param name="alpha"/>
     <Param name="X"/>
     <Param name="incX"/>
     <Param name="skipped"/>
    </Params>
   </Definition>
   <Definition body="7506" end="7582" exported="1" fullname="blas.dsyrk" inherit_type="local" line="177" name="dsyrk" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/BLAS.ecl" start="7237">
    <Type>function</Type>
    <Documentation>
     <param><name>tri</name><desc>update upper or lower triangle</desc></param><param><name>transposeA</name><desc>Transpose the A matrix to be NxK</desc></param><param><name>N</name><desc>number of rows</desc></param><param><name>K</name><desc>number of columns in the update matrix or transpose</desc></param><param><name>alpha</name><desc>the alpha scalar</desc></param><param><name>A</name><desc>the update matrix, either NxK or KxN</desc></param><param><name>beta</name><desc>the beta scalar</desc></param><param><name>C</name><desc>the matrix to update</desc></param><param><name>clear</name><desc>clear the triangle that is not updated. BLAS assumes that symmetric matrices have only one of the triangles and this option lets you make that true.</desc></param><content>Implements symmetric rank update C </content><firstline>Implements symmetric rank update C </firstline></Documentation>
    <Signature sign="Types.matrix_t dsyrk(Types.Triangle tri, BOOLEAN transposeA, Types.dimension_t N, Types.dimension_t K, Types.value_t alpha, Types.matrix_t A, Types.value_t beta, Types.matrix_t C, BOOLEAN clear=FALSE)" name="dsyrk">Types.matrix_t dsyrk(Types.Triangle tri, BOOLEAN transposeA, Types.dimension_t N, Types.dimension_t K, Types.value_t alpha, Types.matrix_t A, Types.value_t beta, Types.matrix_t C, BOOLEAN clear=FALSE)</Signature><Params>
     <Param name="tri"/>
     <Param name="transposeA"/>
     <Param name="N"/>
     <Param name="K"/>
     <Param name="alpha"/>
     <Param name="A"/>
     <Param name="beta"/>
     <Param name="C"/>
     <Param name="clear"/>
    </Params>
   </Definition>
   <Definition body="8548" end="8628" exported="1" fullname="blas.dtrsm" inherit_type="local" line="199" name="dtrsm" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/BLAS.ecl" start="8258">
    <Type>function</Type>
    <Documentation>
     <param><name>side</name><desc>side for A, Side.Ax is op(A) X = alpha B</desc></param><param><name>tri</name><desc>Says whether A is Upper or Lower triangle</desc></param><param><name>transposeA</name><desc>is op(A) the transpose of A</desc></param><param><name>diag</name><desc>is the diagonal an implied unit diagonal or supplied</desc></param><param><name>M</name><desc>number of rows</desc></param><param><name>N</name><desc>number of columns</desc></param><param><name>lda</name><desc>the leading dimension of the A matrix, either M or N</desc></param><param><name>alpha</name><desc>the scalar multiplier for B</desc></param><param><name>A</name><desc>a triangular matrix</desc></param><param><name>B</name><desc>the matrix of values for the solve</desc></param><content>Triangular matrix solver. op(A) X = alpha B or X op(A) = alpha B where op is Transpose, X and B is MxN</content><firstline>Triangular matrix solver</firstline><return>the matrix of coefficients to get B.</return></Documentation>
    <Signature sign="Types.matrix_t dtrsm(Types.Side side, Types.Triangle tri, BOOLEAN transposeA, Types.Diagonal diag, Types.dimension_t M, Types.dimension_t N, Types.dimension_t lda, Types.value_t alpha, Types.matrix_t A, Types.matrix_t B)" name="dtrsm">Types.matrix_t dtrsm(Types.Side side, Types.Triangle tri, BOOLEAN transposeA, Types.Diagonal diag, Types.dimension_t M, Types.dimension_t N, Types.dimension_t lda, Types.value_t alpha, Types.matrix_t A, Types.matrix_t B)</Signature><Params>
     <Param name="side"/>
     <Param name="tri"/>
     <Param name="transposeA"/>
     <Param name="diag"/>
     <Param name="M"/>
     <Param name="N"/>
     <Param name="lda"/>
     <Param name="alpha"/>
     <Param name="A"/>
     <Param name="B"/>
    </Params>
   </Definition>
   <Definition body="9000" end="9304" exported="1" fullname="blas.extract_diag" inherit_type="local" line="213" name="extract_diag" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/BLAS.ecl" start="8829">
    <Type>function</Type>
    <Documentation>
     <param><name>m</name><desc>number of rows</desc></param><param><name>n</name><desc>number of columns</desc></param><param><name>x</name><desc>matrix from which to extract the diagonal</desc></param><content>Extract the diagonal of he matrix</content><firstline>Extract the diagonal of he matrix</firstline><return>diagonal matrix</return></Documentation>
    <Signature sign="Types.matrix_t extract_diag(Types.dimension_t m, Types.dimension_t n, Types.matrix_t x)" name="extract_diag">Types.matrix_t extract_diag(Types.dimension_t m, Types.dimension_t n, Types.matrix_t x)</Signature><Params>
     <Param name="m"/>
     <Param name="n"/>
     <Param name="x"/>
    </Params>
   </Definition>
   <Definition body="9888" end="9939" exported="1" fullname="blas.extract_tri" inherit_type="local" line="236" name="extract_tri" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/BLAS.ecl" start="9695">
    <Type>function</Type>
    <Documentation>
     <param><name>m</name><desc>number of rows</desc></param><param><name>n</name><desc>number of columns</desc></param><param><name>tri</name><desc>Upper or Lower specifier, Triangle.Lower or Triangle.Upper</desc></param><param><name>dt</name><desc>Use Diagonal.NotUnitTri or Diagonal.UnitTri</desc></param><param><name>a</name><desc>Matrix, usually a composite from factoring</desc></param><content>Extract the upper or lower triangle. Diagonal can be actual or implied unit diagonal.</content><firstline>Extract the upper or lower triangle</firstline><return>the triangle</return></Documentation>
    <Signature sign="Types.matrix_t extract_tri(Types.dimension_t m, Types.dimension_t n, Types.Triangle tri, Types.Diagonal dt, Types.matrix_t a)" name="extract_tri">Types.matrix_t extract_tri(Types.dimension_t m, Types.dimension_t n, Types.Triangle tri, Types.Diagonal dt, Types.matrix_t a)</Signature><Params>
     <Param name="m"/>
     <Param name="n"/>
     <Param name="tri"/>
     <Param name="dt"/>
     <Param name="a"/>
    </Params>
   </Definition>
   <Definition body="10293" end="10333" exported="1" fullname="blas.make_diag" inherit_type="local" line="249" name="make_diag" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/BLAS.ecl" start="10168">
    <Type>function</Type>
    <Documentation>
     <param><name>m</name><desc>number of diagonal entries</desc></param><param><name>v</name><desc>option value, defaults to 1</desc></param><param><name>X</name><desc>optional input of diagonal values, multiplied by v.</desc></param><content>Generate a diagonal matrix.</content><firstline>Generate a diagonal matrix</firstline><return>a diagonal matrix</return></Documentation>
    <Signature sign="Types.matrix_t make_diag(Types.dimension_t m, Types.value_t v=1.0, Types.matrix_t X=[])" name="make_diag">Types.matrix_t make_diag(Types.dimension_t m, Types.value_t v=1.0, Types.matrix_t X=[])</Signature><Params>
     <Param name="m"/>
     <Param name="v"/>
     <Param name="X"/>
    </Params>
   </Definition>
   <Definition body="10800" end="10827" exported="1" fullname="blas.make_vector" inherit_type="local" line="268" name="make_vector" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/BLAS.ecl" start="10698">
    <Type>function</Type>
    <Documentation>
     <param><name>m</name><desc>number of elements</desc></param><param><name>v</name><desc>the values, defaults to 1</desc></param><content>Make a vector of dimension m</content><firstline>Make a vector of dimension m</firstline><return>the vector</return></Documentation>
    <Signature sign="Types.matrix_t make_vector(Types.dimension_t m, Types.value_t v=1.0)" name="make_vector">Types.matrix_t make_vector(Types.dimension_t m, Types.value_t v=1.0)</Signature><Params>
     <Param name="m"/>
     <Param name="v"/>
    </Params>
   </Definition>
   <Definition body="11142" end="11168" exported="1" fullname="blas.trace" inherit_type="local" line="279" name="trace" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/BLAS.ecl" start="11017">
    <Type>function</Type>
    <Documentation>
     <param><name>m</name><desc>number of rows</desc></param><param><name>n</name><desc>number of columns</desc></param><param><name>x</name><desc>the matrix</desc></param><content>The trace of the input matrix</content><firstline>The trace of the input matrix</firstline><return>the trace (sum of the diagonal entries)</return></Documentation>
    <Signature sign="Types.value_t trace(Types.dimension_t m, Types.dimension_t n, Types.matrix_t x)" name="trace">Types.value_t trace(Types.dimension_t m, Types.dimension_t n, Types.matrix_t x)</Signature><Params>
     <Param name="m"/>
     <Param name="n"/>
     <Param name="x"/>
    </Params>
   </Definition>
   <Signature sign="BLAS" name="BLAS">BLAS</Signature><Parents/>
  </Definition>
  <Import body="0" end="790" fullname="lib_eclblas" inherit_type="local" line="17" name="LIB_ECLBLAS" ref="lib_eclblas" remotescope="1" start="790" target="lib_eclblas/pkg.toc.xml">
   <Type>attribute</Type>
  </Import>
 <Documentation><content> </content></Documentation></Source>
 </Meta>