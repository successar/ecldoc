<?xml version='1.0' encoding='UTF-8'?>
<Meta>
 <Depends sourcePath="/home/sarthak/runtime/opt/HPCCSystems/6.5.0/clienttools/plugins/lib_eclblas.ecllib" target="/home/sarthak/runtime/opt/HPCCSystems/6.5.0/clienttools/plugins/lib_eclblas.ecllib"/><Source name="BLAS" sourcePath="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/BLAS.ecl" target="BLAS.ecl.xml">
  <Definition exported="1" fullname="blas" inherittype="local" line="19" name="BLAS" type="module">
   <Definition exported="1" fullname="BLAS.Types" inherittype="local" line="21" name="Types" type="module">
    <Definition exported="1" fullname="blas.types.value_t" inherittype="local" line="22" name="value_t" type="attribute">
     <Signature name="value_t" ret="" param="" hlen="7">value_t</Signature><Type type="real8"/>
    </Definition>
    <Definition exported="1" fullname="blas.types.dimension_t" inherittype="local" line="23" name="dimension_t" type="attribute">
     <Signature name="dimension_t" ret="" param="" hlen="11">dimension_t</Signature><Type type="unsigned4"/>
    </Definition>
    <Definition exported="1" fullname="blas.types.matrix_t" inherittype="local" line="24" name="matrix_t" type="attribute">
     <Signature name="matrix_t" ret="" param="" hlen="8">matrix_t</Signature><Type type="set">
      <Type type="real8"/>
     </Type>
    </Definition>
    <Definition exported="1" inherittype="local" line="25" name="Triangle" type="attribute" fullname="ecldoc-Triangle">
     <Signature name="Triangle" ret="" param="" hlen="8">Triangle</Signature><Type type="unsigned1"/>
    </Definition>
    <Definition exported="1" inherittype="local" line="26" name="Diagonal" type="attribute" fullname="ecldoc-Diagonal">
     <Signature name="Diagonal" ret="" param="" hlen="8">Diagonal</Signature><Type type="unsigned1"/>
    </Definition>
    <Definition exported="1" inherittype="local" line="27" name="Side" type="attribute" fullname="ecldoc-Side">
     <Signature name="Side" ret="" param="" hlen="4">Side</Signature><Type type="unsigned1"/>
    </Definition>
    <Signature name="Types" ret="" param="" hlen="5">Types</Signature><Parents/>
   </Definition>
   <Definition exported="1" fullname="blas.icellfunc" inherittype="local" line="37" name="ICellFunc" type="function">
    <Type type="real8"/>
    <Documentation>
     <firstline>Function prototype for Apply2Cell</firstline><content>Function prototype for Apply2Cell.</content><return>the updated value</return><param>v the value</param><param>r the row ordinal</param><param>c the column ordinal</param></Documentation>
    <Signature name="ICellFunc" ret="Types.value_t" param="(Types.value_t v, Types.dimension_t r, Types.dimension_t c)" hlen="23">Types.value_t ICellFunc(Types.value_t v, Types.dimension_t r, Types.dimension_t c)</Signature><Params>
     <Param name="v">
      <Type type="real8"/>
     </Param>
     <Param name="r">
      <Type type="unsigned4"/>
     </Param>
     <Param name="c">
      <Type type="unsigned4"/>
     </Param>
    </Params>
   </Definition>
   <Definition exported="1" fullname="blas.apply2cells" inherittype="local" line="49" name="Apply2Cells" type="function">
    <Type type="set">
     <Type type="real8"/>
    </Type>
    <Documentation>
     <firstline>Iterate matrix and apply function to each cell</firstline><content>Iterate matrix and apply function to each cell</content><return>updated matrix</return><param>m number of rows</param><param>n number of columns</param><param>x matrix</param><param>f function to apply</param></Documentation>
    <Signature name="Apply2Cells" ret="Types.matrix_t" param="(Types.dimension_t m, Types.dimension_t n, Types.matrix_t x, ICellFunc f)" hlen="26">Types.matrix_t Apply2Cells(Types.dimension_t m, Types.dimension_t n, Types.matrix_t x, ICellFunc f)</Signature><Params>
     <Param name="m">
      <Type type="unsigned4"/>
     </Param>
     <Param name="n">
      <Type type="unsigned4"/>
     </Param>
     <Param name="x">
      <Type type="set">
       <Type type="real8"/>
      </Type>
     </Param>
     <Param name="f">
      <Type type="function">
       <Type type="real8"/>
       <Params>
        <Type type="real8"/>
        <Type type="unsigned4"/>
        <Type type="unsigned4"/>
       </Params>
      </Type>
     </Param>
    </Params>
   </Definition>
   <Definition exported="1" fullname="blas.dasum" inherittype="local" line="73" name="dasum" type="function">
    <Type type="real8"/>
    <Documentation>
     <firstline>Absolute sum, the 1 norm of a vector</firstline><content>Absolute sum, the 1 norm of a vector.</content><return>the sum of the absolute values</return><param>m the number of entries</param><param>x the column major matrix holding the vector</param><param>incx the increment for x, 1 in the case of an actual vector</param><param>skipped default is zero, the number of entries stepped over to get to the first entry</param></Documentation>
    <Signature name="dasum" ret="Types.value_t" param="(Types.dimension_t m, Types.matrix_t x, Types.dimension_t incx, Types.dimension_t skipped=0)" hlen="19">Types.value_t dasum(Types.dimension_t m, Types.matrix_t x, Types.dimension_t incx, Types.dimension_t skipped=0)</Signature><Params>
     <Param name="m">
      <Type type="unsigned4"/>
     </Param>
     <Param name="x">
      <Type type="set">
       <Type type="real8"/>
      </Type>
     </Param>
     <Param name="incx">
      <Type type="unsigned4"/>
     </Param>
     <Param name="skipped">
      <Type type="unsigned4"/>
     </Param>
    </Params>
   </Definition>
   <Definition exported="1" fullname="blas.daxpy" inherittype="local" line="90" name="daxpy" type="function">
    <Type type="set">
     <Type type="real8"/>
    </Type>
    <Documentation>
     <firstline>alpha*X + Y</firstline><content>alpha*X + Y</content><return>the updated matrix</return><param>N number of elements in vector</param><param>alpha the scalar multiplier</param><param>X the column major matrix holding the vector X</param><param>incX the increment or stride for the vector</param><param>Y the column major matrix holding the vector Y</param><param>incY the increment or stride of Y</param><param>x_skipped number of entries skipped to get to the first X</param><param>y_skipped number of entries skipped to get to the first Y</param></Documentation>
    <Signature name="daxpy" ret="Types.matrix_t" param="(Types.dimension_t N, Types.value_t alpha, Types.matrix_t X, Types.dimension_t incX, Types.matrix_t Y, Types.dimension_t incY, Types.dimension_t x_skipped=0, Types.dimension_t y_skipped=0)" hlen="20">Types.matrix_t daxpy(Types.dimension_t N, Types.value_t alpha, Types.matrix_t X, Types.dimension_t incX, Types.matrix_t Y, Types.dimension_t incY, Types.dimension_t x_skipped=0, Types.dimension_t y_skipped=0)</Signature><Params>
     <Param name="N">
      <Type type="unsigned4"/>
     </Param>
     <Param name="alpha">
      <Type type="real8"/>
     </Param>
     <Param name="X">
      <Type type="set">
       <Type type="real8"/>
      </Type>
     </Param>
     <Param name="incX">
      <Type type="unsigned4"/>
     </Param>
     <Param name="Y">
      <Type type="set">
       <Type type="real8"/>
      </Type>
     </Param>
     <Param name="incY">
      <Type type="unsigned4"/>
     </Param>
     <Param name="x_skipped">
      <Type type="unsigned4"/>
     </Param>
     <Param name="y_skipped">
      <Type type="unsigned4"/>
     </Param>
    </Params>
   </Definition>
   <Definition exported="1" fullname="blas.dgemm" inherittype="local" line="109" name="dgemm" type="function">
    <Type type="set">
     <Type type="real8"/>
    </Type>
    <Documentation>
     <firstline>alpha*op(A) op(B) + beta*C where op() is transpose</firstline><content>alpha*op(A) op(B) + beta*C where op() is transpose</content><param>transposeA true when transpose of A is used</param><param>transposeB true when transpose of B is used</param><param>M number of rows in product</param><param>N number of columns in product</param><param>K number of columns/rows for the multiplier/multiplicand</param><param>alpha scalar used on A</param><param>A matrix A</param><param>B matrix B</param><param>beta scalar for matrix C</param><param>C matrix C or empty</param></Documentation>
    <Signature name="dgemm" ret="Types.matrix_t" param="(BOOLEAN transposeA, BOOLEAN transposeB, Types.dimension_t M, Types.dimension_t N, Types.dimension_t K, Types.value_t alpha, Types.matrix_t A, Types.matrix_t B, Types.value_t beta=0.0, Types.matrix_t C=[])" hlen="20">Types.matrix_t dgemm(BOOLEAN transposeA, BOOLEAN transposeB, Types.dimension_t M, Types.dimension_t N, Types.dimension_t K, Types.value_t alpha, Types.matrix_t A, Types.matrix_t B, Types.value_t beta=0.0, Types.matrix_t C=[])</Signature><Params>
     <Param name="transposeA">
      <Type type="boolean"/>
     </Param>
     <Param name="transposeB">
      <Type type="boolean"/>
     </Param>
     <Param name="M">
      <Type type="unsigned4"/>
     </Param>
     <Param name="N">
      <Type type="unsigned4"/>
     </Param>
     <Param name="K">
      <Type type="unsigned4"/>
     </Param>
     <Param name="alpha">
      <Type type="real8"/>
     </Param>
     <Param name="A">
      <Type type="set">
       <Type type="real8"/>
      </Type>
     </Param>
     <Param name="B">
      <Type type="set">
       <Type type="real8"/>
      </Type>
     </Param>
     <Param name="beta">
      <Type type="real8"/>
     </Param>
     <Param name="C">
      <Type type="set">
       <Type type="real8"/>
      </Type>
     </Param>
    </Params>
   </Definition>
   <Definition exported="1" fullname="blas.dgetf2" inherittype="local" line="124" name="dgetf2" type="function">
    <Type type="set">
     <Type type="real8"/>
    </Type>
    <Documentation>
     <firstline>Compute LU Factorization of matrix A</firstline><content>Compute LU Factorization of matrix A.</content><return>composite matrix of factors, lower triangle has an implied diagonal of ones. Upper triangle has the diagonal of the composite.</return><param>m number of rows of A</param><param>n number of columns of A</param></Documentation>
    <Signature name="dgetf2" ret="Types.matrix_t" param="(Types.dimension_t m, Types.dimension_t n, Types.matrix_t a)" hlen="21">Types.matrix_t dgetf2(Types.dimension_t m, Types.dimension_t n, Types.matrix_t a)</Signature><Params>
     <Param name="m">
      <Type type="unsigned4"/>
     </Param>
     <Param name="n">
      <Type type="unsigned4"/>
     </Param>
     <Param name="a">
      <Type type="set">
       <Type type="real8"/>
      </Type>
     </Param>
    </Params>
   </Definition>
   <Definition exported="1" fullname="blas.dpotf2" inherittype="local" line="143" name="dpotf2" type="function">
    <Type type="set">
     <Type type="real8"/>
    </Type>
    <Documentation>
     <firstline>DPOTF2 computes the Cholesky factorization of a real symmetric positive definite matrix A</firstline><content>DPOTF2 computes the Cholesky factorization of a real symmetric positive definite matrix A. The factorization has the form A = U**T * U , if UPLO = 'U', or A = L * L**T, if UPLO = 'L', where U is an upper triangular matrix and L is lower triangular. This is the unblocked version of the algorithm, calling Level 2 BLAS.</content><return>the triangular matrix requested.</return><param>tri indicate whether upper or lower triangle is used</param><param>r number of rows/columns in the square matrix</param><param>A the square matrix</param><param>clear clears the unused triangle</param></Documentation>
    <Signature name="dpotf2" ret="Types.matrix_t" param="(Types.Triangle tri, Types.dimension_t r, Types.matrix_t A, BOOLEAN clear=TRUE)" hlen="21">Types.matrix_t dpotf2(Types.Triangle tri, Types.dimension_t r, Types.matrix_t A, BOOLEAN clear=TRUE)</Signature><Params>
     <Param name="tri">
      <Type type="unsigned1"/>
     </Param>
     <Param name="r">
      <Type type="unsigned4"/>
     </Param>
     <Param name="A">
      <Type type="set">
       <Type type="real8"/>
      </Type>
     </Param>
     <Param name="clear">
      <Type type="boolean"/>
     </Param>
    </Params>
   </Definition>
   <Definition exported="1" fullname="blas.dscal" inherittype="local" line="157" name="dscal" type="function">
    <Type type="set">
     <Type type="real8"/>
    </Type>
    <Documentation>
     <firstline>Scale a vector alpha</firstline><content>Scale a vector alpha</content><return>the updated matrix</return><param>N number of elements in the vector</param><param>alpha the scaling factor</param><param>X the column major matrix holding the vector</param><param>incX the stride to get to the next element in the vector</param><param>skipped the number of elements skipped to get to the first element</param></Documentation>
    <Signature name="dscal" ret="Types.matrix_t" param="(Types.dimension_t N, Types.value_t alpha, Types.matrix_t X, Types.dimension_t incX, Types.dimension_t skipped=0)" hlen="20">Types.matrix_t dscal(Types.dimension_t N, Types.value_t alpha, Types.matrix_t X, Types.dimension_t incX, Types.dimension_t skipped=0)</Signature><Params>
     <Param name="N">
      <Type type="unsigned4"/>
     </Param>
     <Param name="alpha">
      <Type type="real8"/>
     </Param>
     <Param name="X">
      <Type type="set">
       <Type type="real8"/>
      </Type>
     </Param>
     <Param name="incX">
      <Type type="unsigned4"/>
     </Param>
     <Param name="skipped">
      <Type type="unsigned4"/>
     </Param>
    </Params>
   </Definition>
   <Definition exported="1" fullname="blas.dsyrk" inherittype="local" line="177" name="dsyrk" type="function">
    <Type type="set">
     <Type type="real8"/>
    </Type>
    <Documentation>
     <firstline>Implements symmetric rank update C </firstline><content>Implements symmetric rank update C </content><param>tri update upper or lower triangle</param><param>transposeA Transpose the A matrix to be NxK</param><param>N number of rows</param><param>K number of columns in the update matrix or transpose</param><param>alpha the alpha scalar</param><param>A the update matrix, either NxK or KxN</param><param>beta the beta scalar</param><param>C the matrix to update</param><param>clear clear the triangle that is not updated. BLAS assumes that symmetric matrices have only one of the triangles and this option lets you make that true.</param></Documentation>
    <Signature name="dsyrk" ret="Types.matrix_t" param="(Types.Triangle tri, BOOLEAN transposeA, Types.dimension_t N, Types.dimension_t K, Types.value_t alpha, Types.matrix_t A, Types.value_t beta, Types.matrix_t C, BOOLEAN clear=FALSE)" hlen="20">Types.matrix_t dsyrk(Types.Triangle tri, BOOLEAN transposeA, Types.dimension_t N, Types.dimension_t K, Types.value_t alpha, Types.matrix_t A, Types.value_t beta, Types.matrix_t C, BOOLEAN clear=FALSE)</Signature><Params>
     <Param name="tri">
      <Type type="unsigned1"/>
     </Param>
     <Param name="transposeA">
      <Type type="boolean"/>
     </Param>
     <Param name="N">
      <Type type="unsigned4"/>
     </Param>
     <Param name="K">
      <Type type="unsigned4"/>
     </Param>
     <Param name="alpha">
      <Type type="real8"/>
     </Param>
     <Param name="A">
      <Type type="set">
       <Type type="real8"/>
      </Type>
     </Param>
     <Param name="beta">
      <Type type="real8"/>
     </Param>
     <Param name="C">
      <Type type="set">
       <Type type="real8"/>
      </Type>
     </Param>
     <Param name="clear">
      <Type type="boolean"/>
     </Param>
    </Params>
   </Definition>
   <Definition exported="1" fullname="blas.dtrsm" inherittype="local" line="199" name="dtrsm" type="function">
    <Type type="set">
     <Type type="real8"/>
    </Type>
    <Documentation>
     <firstline>Triangular matrix solver</firstline><content>Triangular matrix solver. op(A) X = alpha B or X op(A) = alpha B where op is Transpose, X and B is MxN</content><return>the matrix of coefficients to get B.</return><param>side side for A, Side.Ax is op(A) X = alpha B</param><param>tri Says whether A is Upper or Lower triangle</param><param>transposeA is op(A) the transpose of A</param><param>diag is the diagonal an implied unit diagonal or supplied</param><param>M number of rows</param><param>N number of columns</param><param>lda the leading dimension of the A matrix, either M or N</param><param>alpha the scalar multiplier for B</param><param>A a triangular matrix</param><param>B the matrix of values for the solve</param></Documentation>
    <Signature name="dtrsm" ret="Types.matrix_t" param="(Types.Side side, Types.Triangle tri, BOOLEAN transposeA, Types.Diagonal diag, Types.dimension_t M, Types.dimension_t N, Types.dimension_t lda, Types.value_t alpha, Types.matrix_t A, Types.matrix_t B)" hlen="20">Types.matrix_t dtrsm(Types.Side side, Types.Triangle tri, BOOLEAN transposeA, Types.Diagonal diag, Types.dimension_t M, Types.dimension_t N, Types.dimension_t lda, Types.value_t alpha, Types.matrix_t A, Types.matrix_t B)</Signature><Params>
     <Param name="side">
      <Type type="unsigned1"/>
     </Param>
     <Param name="tri">
      <Type type="unsigned1"/>
     </Param>
     <Param name="transposeA">
      <Type type="boolean"/>
     </Param>
     <Param name="diag">
      <Type type="unsigned1"/>
     </Param>
     <Param name="M">
      <Type type="unsigned4"/>
     </Param>
     <Param name="N">
      <Type type="unsigned4"/>
     </Param>
     <Param name="lda">
      <Type type="unsigned4"/>
     </Param>
     <Param name="alpha">
      <Type type="real8"/>
     </Param>
     <Param name="A">
      <Type type="set">
       <Type type="real8"/>
      </Type>
     </Param>
     <Param name="B">
      <Type type="set">
       <Type type="real8"/>
      </Type>
     </Param>
    </Params>
   </Definition>
   <Definition exported="1" fullname="blas.extract_diag" inherittype="local" line="213" name="extract_diag" type="function">
    <Type type="set">
     <Type type="real8"/>
    </Type>
    <Documentation>
     <firstline>Extract the diagonal of he matrix</firstline><content>Extract the diagonal of he matrix</content><return>diagonal matrix</return><param>m number of rows</param><param>n number of columns</param><param>x matrix from which to extract the diagonal</param></Documentation>
    <Signature name="extract_diag" ret="Types.matrix_t" param="(Types.dimension_t m, Types.dimension_t n, Types.matrix_t x)" hlen="27">Types.matrix_t extract_diag(Types.dimension_t m, Types.dimension_t n, Types.matrix_t x)</Signature><Params>
     <Param name="m">
      <Type type="unsigned4"/>
     </Param>
     <Param name="n">
      <Type type="unsigned4"/>
     </Param>
     <Param name="x">
      <Type type="set">
       <Type type="real8"/>
      </Type>
     </Param>
    </Params>
   </Definition>
   <Definition exported="1" fullname="blas.extract_tri" inherittype="local" line="236" name="extract_tri" type="function">
    <Type type="set">
     <Type type="real8"/>
    </Type>
    <Documentation>
     <firstline>Extract the upper or lower triangle</firstline><content>Extract the upper or lower triangle. Diagonal can be actual or implied unit diagonal.</content><return>the triangle</return><param>m number of rows</param><param>n number of columns</param><param>tri Upper or Lower specifier, Triangle.Lower or Triangle.Upper</param><param>dt Use Diagonal.NotUnitTri or Diagonal.UnitTri</param><param>a Matrix, usually a composite from factoring</param></Documentation>
    <Signature name="extract_tri" ret="Types.matrix_t" param="(Types.dimension_t m, Types.dimension_t n, Types.Triangle tri, Types.Diagonal dt, Types.matrix_t a)" hlen="26">Types.matrix_t extract_tri(Types.dimension_t m, Types.dimension_t n, Types.Triangle tri, Types.Diagonal dt, Types.matrix_t a)</Signature><Params>
     <Param name="m">
      <Type type="unsigned4"/>
     </Param>
     <Param name="n">
      <Type type="unsigned4"/>
     </Param>
     <Param name="tri">
      <Type type="unsigned1"/>
     </Param>
     <Param name="dt">
      <Type type="unsigned1"/>
     </Param>
     <Param name="a">
      <Type type="set">
       <Type type="real8"/>
      </Type>
     </Param>
    </Params>
   </Definition>
   <Definition exported="1" fullname="blas.make_diag" inherittype="local" line="249" name="make_diag" type="function">
    <Type type="set">
     <Type type="real8"/>
    </Type>
    <Documentation>
     <firstline>Generate a diagonal matrix</firstline><content>Generate a diagonal matrix.</content><return>a diagonal matrix</return><param>m number of diagonal entries</param><param>v option value, defaults to 1</param><param>X optional input of diagonal values, multiplied by v.</param></Documentation>
    <Signature name="make_diag" ret="Types.matrix_t" param="(Types.dimension_t m, Types.value_t v=1.0, Types.matrix_t X=[])" hlen="24">Types.matrix_t make_diag(Types.dimension_t m, Types.value_t v=1.0, Types.matrix_t X=[])</Signature><Params>
     <Param name="m">
      <Type type="unsigned4"/>
     </Param>
     <Param name="v">
      <Type type="real8"/>
     </Param>
     <Param name="X">
      <Type type="set">
       <Type type="real8"/>
      </Type>
     </Param>
    </Params>
   </Definition>
   <Definition exported="1" fullname="blas.make_vector" inherittype="local" line="268" name="make_vector" type="function">
    <Type type="set">
     <Type type="real8"/>
    </Type>
    <Documentation>
     <firstline>Make a vector of dimension m</firstline><content>Make a vector of dimension m</content><return>the vector</return><param>m number of elements</param><param>v the values, defaults to 1</param></Documentation>
    <Signature name="make_vector" ret="Types.matrix_t" param="(Types.dimension_t m, Types.value_t v=1.0)" hlen="26">Types.matrix_t make_vector(Types.dimension_t m, Types.value_t v=1.0)</Signature><Params>
     <Param name="m">
      <Type type="unsigned4"/>
     </Param>
     <Param name="v">
      <Type type="real8"/>
     </Param>
    </Params>
   </Definition>
   <Definition exported="1" fullname="blas.trace" inherittype="local" line="279" name="trace" type="function">
    <Type type="real8"/>
    <Documentation>
     <firstline>The trace of the input matrix</firstline><content>The trace of the input matrix</content><return>the trace (sum of the diagonal entries)</return><param>m number of rows</param><param>n number of columns</param><param>x the matrix</param></Documentation>
    <Signature name="trace" ret="Types.value_t" param="(Types.dimension_t m, Types.dimension_t n, Types.matrix_t x)" hlen="19">Types.value_t trace(Types.dimension_t m, Types.dimension_t n, Types.matrix_t x)</Signature><Params>
     <Param name="m">
      <Type type="unsigned4"/>
     </Param>
     <Param name="n">
      <Type type="unsigned4"/>
     </Param>
     <Param name="x">
      <Type type="set">
       <Type type="real8"/>
      </Type>
     </Param>
    </Params>
   </Definition>
   <Signature name="BLAS" ret="" param="" hlen="4">BLAS</Signature><Parents/>
  </Definition>
  <Import name="LIB_ECLBLAS" ref="lib_eclblas" remotescope="1" target="lib_eclblas/pkg.toc.xml"/>
 <Documentation><content> </content></Documentation></Source>
</Meta>