<?xml version='1.0' encoding='UTF-8'?>
<Meta>
 <Source name="Date" sourcePath="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/Date.ecl" target="date.ecl.xml">
  <Definition body="402" end="44807" exported="1" fullname="Date" inherit_type="local" line="10" name="Date" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/Date.ecl" start="388">
   <Type>module</Type>
   <Definition body="500" end="578" exported="1" fullname="date.date_rec" inherit_type="local" line="14" name="Date_rec" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/Date.ecl" start="482">
    <Type>record</Type>
    <Field name="year"/>
    <Field name="month"/>
    <Signature sign="Date_rec" name="Date_rec">Date_rec</Signature><Field name="day"/>
   </Definition>
   <Definition body="711" end="722" exported="1" fullname="date.date_t" inherit_type="local" line="23" name="Date_t" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/Date.ecl" start="695">
    <Signature sign="Date_t" name="Date_t">Date_t</Signature><Type>attribute</Type>
   </Definition>
   <Definition body="810" end="820" exported="1" fullname="date.days_t" inherit_type="local" line="27" name="Days_t" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/Date.ecl" start="794">
    <Signature sign="Days_t" name="Days_t">Days_t</Signature><Type>attribute</Type>
   </Definition>
   <Definition body="911" end="993" exported="1" fullname="date.time_rec" inherit_type="local" line="31" name="Time_rec" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/Date.ecl" start="893">
    <Type>record</Type>
    <Field name="hour"/>
    <Field name="minute"/>
    <Signature sign="Time_rec" name="Time_rec">Time_rec</Signature><Field name="second"/>
   </Definition>
   <Definition body="1084" end="1095" exported="1" fullname="date.time_t" inherit_type="local" line="39" name="Time_t" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/Date.ecl" start="1068">
    <Signature sign="Time_t" name="Time_t">Time_t</Signature><Type>attribute</Type>
   </Definition>
   <Definition body="1264" end="1274" exported="1" fullname="date.seconds_t" inherit_type="local" line="44" name="Seconds_t" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/Date.ecl" start="1245">
    <Signature sign="Seconds_t" name="Seconds_t">Seconds_t</Signature><Type>attribute</Type>
   </Definition>
   <Definition body="1378" end="1418" exported="1" fullname="date.datetime_rec" inherit_type="local" line="48" name="DateTime_rec" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/Date.ecl" start="1356">
    <Type>record</Type>
    <Field name="year"/>
    <Field name="month"/>
    <Field name="day"/>
    <Field name="hour"/>
    <Field name="minute"/>
    <Signature sign="DateTime_rec" name="DateTime_rec">DateTime_rec</Signature><Field name="second"/>
   </Definition>
   <Definition body="1599" end="1609" exported="1" fullname="date.timestamp_t" inherit_type="local" line="56" name="Timestamp_t" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/Date.ecl" start="1578">
    <Signature sign="Timestamp_t" name="Timestamp_t">Timestamp_t</Signature><Type>attribute</Type>
   </Definition>
   <Definition body="1791" end="1807" exported="1" fullname="date.year" inherit_type="local" line="66" name="Year" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/Date.ecl" start="1755">
    <Type>function</Type>
    <Documentation>
     <firstline>Extracts the year from a date type</firstline><return>An integer representing the year.</return><content>Extracts the year from a date type.</content><param><name>date</name><desc>The date.</desc></param></Documentation>
    <Signature sign="INTEGER2 Year(Date_t date)" name="Year">INTEGER2 Year(Date_t date)</Signature><Params>
     <Param name="date"/>
    </Params>
   </Definition>
   <Definition body="1992" end="2014" exported="1" fullname="date.month" inherit_type="local" line="76" name="Month" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/Date.ecl" start="1954">
    <Type>function</Type>
    <Documentation>
     <firstline>Extracts the month from a date type</firstline><return>An integer representing the year.</return><content>Extracts the month from a date type.</content><param><name>date</name><desc>The date.</desc></param></Documentation>
    <Signature sign="UNSIGNED1 Month(Date_t date)" name="Month">UNSIGNED1 Month(Date_t date)</Signature><Params>
     <Param name="date"/>
    </Params>
   </Definition>
   <Definition body="2208" end="2220" exported="1" fullname="date.day" inherit_type="local" line="86" name="Day" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/Date.ecl" start="2172">
    <Type>function</Type>
    <Documentation>
     <firstline>Extracts the day of the month from a date type</firstline><return>An integer representing the year.</return><content>Extracts the day of the month from a date type.</content><param><name>date</name><desc>The date.</desc></param></Documentation>
    <Signature sign="UNSIGNED1 Day(Date_t date)" name="Day">UNSIGNED1 Day(Date_t date)</Signature><Params>
     <Param name="date"/>
    </Params>
   </Definition>
   <Definition body="2403" end="2419" exported="1" fullname="date.hour" inherit_type="local" line="96" name="Hour" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/Date.ecl" start="2366">
    <Type>function</Type>
    <Documentation>
     <firstline>Extracts the hour from a time type</firstline><return>An integer representing the hour.</return><content>Extracts the hour from a time type.</content><param><name>time</name><desc>The time.</desc></param></Documentation>
    <Signature sign="UNSIGNED1 Hour(Time_t time)" name="Hour">UNSIGNED1 Hour(Time_t time)</Signature><Params>
     <Param name="time"/>
    </Params>
   </Definition>
   <Definition body="2610" end="2632" exported="1" fullname="date.minute" inherit_type="local" line="106" name="Minute" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/Date.ecl" start="2571">
    <Type>function</Type>
    <Documentation>
     <firstline>Extracts the minutes from a time type</firstline><return>An integer representing the minutes.</return><content>Extracts the minutes from a time type.</content><param><name>time</name><desc>The time.</desc></param></Documentation>
    <Signature sign="UNSIGNED1 Minute(Time_t time)" name="Minute">UNSIGNED1 Minute(Time_t time)</Signature><Params>
     <Param name="time"/>
    </Params>
   </Definition>
   <Definition body="2823" end="2835" exported="1" fullname="date.second" inherit_type="local" line="116" name="Second" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/Date.ecl" start="2784">
    <Type>function</Type>
    <Documentation>
     <firstline>Extracts the seconds from a time type</firstline><return>An integer representing the seconds.</return><content>Extracts the seconds from a time type.</content><param><name>time</name><desc>The time.</desc></param></Documentation>
    <Signature sign="UNSIGNED1 Second(Time_t time)" name="Second">UNSIGNED1 Second(Time_t time)</Signature><Params>
     <Param name="time"/>
    </Params>
   </Definition>
   <Definition body="3177" end="3211" exported="1" fullname="date.datefromparts" inherit_type="local" line="128" name="DateFromParts" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/Date.ecl" start="3100">
    <Type>function</Type>
    <Documentation>
     <firstline>Combines year, month day to create a date type</firstline><return>A date created by combining the fields.</return><content>Combines year, month day to create a date type.</content><param><name>year</name><desc>The year (0-9999).</desc></param><param><name>month</name><desc>The month (1-12).</desc></param><param><name>day</name><desc>The day (1..daysInMonth).</desc></param></Documentation>
    <Signature sign="Date_t DateFromParts(INTEGER2 year, UNSIGNED1 month, UNSIGNED1 day)" name="DateFromParts">Date_t DateFromParts(INTEGER2 year, UNSIGNED1 month, UNSIGNED1 day)</Signature><Params>
     <Param name="Year"/>
     <Param name="Month"/>
     <Param name="Day"/>
    </Params>
   </Definition>
   <Definition body="3554" end="3592" exported="1" fullname="date.timefromparts" inherit_type="local" line="140" name="TimeFromParts" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/Date.ecl" start="3472">
    <Type>function</Type>
    <Documentation>
     <firstline>Combines hour, minute second to create a time type</firstline><return>A time created by combining the fields.</return><content>Combines hour, minute second to create a time type.</content><param><name>hour</name><desc>The hour (0-23).</desc></param><param><name>minute</name><desc>The minute (0-59).</desc></param><param><name>second</name><desc>The second (0-59).</desc></param></Documentation>
    <Signature sign="Time_t TimeFromParts(UNSIGNED1 hour, UNSIGNED1 minute, UNSIGNED1 second)" name="TimeFromParts">Time_t TimeFromParts(UNSIGNED1 hour, UNSIGNED1 minute, UNSIGNED1 second)</Signature><Params>
     <Param name="Hour"/>
     <Param name="Minute"/>
     <Param name="Second"/>
    </Params>
   </Definition>
   <Definition body="4802" end="4887" exported="1" fullname="date.secondsfromparts" inherit_type="local" line="160" name="SecondsFromParts" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/Date.ecl" start="4432">
    <Type>function</Type>
    <Documentation>
     <firstline>Combines date and time components to create a seconds type</firstline><return>A Seconds_t value created by combining the fields.</return><content>Combines date and time components to create a seconds type. The date must be represented within the Gregorian calendar after the year 1600.</content><param><name>year</name><desc>The year (1601-30827).</desc></param><param><name>month</name><desc>The month (1-12).</desc></param><param><name>day</name><desc>The day (1..daysInMonth).</desc></param><param><name>hour</name><desc>The hour (0-23).</desc></param><param><name>minute</name><desc>The minute (0-59).</desc></param><param><name>second</name><desc>The second (0-59).</desc></param><param><name>is_local_time</name><desc>TRUE if the datetime components are expressed in local time rather than UTC, FALSE if the components are expressed in UTC. Optional, defaults to FALSE.</desc></param></Documentation>
    <Signature sign="Seconds_t SecondsFromParts(INTEGER2 year,&#10;                                  UNSIGNED1 month,&#10;                                  UNSIGNED1 day,&#10;                                  UNSIGNED1 hour,&#10;                                  UNSIGNED1 minute,&#10;                                  UNSIGNED1 second,&#10;                                  BOOLEAN is_local_time = FALSE)" name="SecondsFromParts">Seconds_t SecondsFromParts(INTEGER2 year,
                                  UNSIGNED1 month,
                                  UNSIGNED1 day,
                                  UNSIGNED1 hour,
                                  UNSIGNED1 minute,
                                  UNSIGNED1 second,
                                  BOOLEAN is_local_time = FALSE)</Signature><Params>
     <Param name="Year"/>
     <Param name="Month"/>
     <Param name="Day"/>
     <Param name="Hour"/>
     <Param name="Minute"/>
     <Param name="Second"/>
     <Param name="is_local_time"/>
    </Params>
   </Definition>
   <Definition body="5396" end="5975" exported="1" fullname="date.secondstoparts" inherit_type="local" line="181" name="SecondsToParts" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/Date.ecl" start="5353">
    <Type>module</Type>
    <Params>
     <Param name="seconds"/>
    </Params>
    <Parents/>
    <Definition body="5510" end="5529" exported="1" fullname="date.secondstoparts.result.year" inherit_type="local" line="185" name="Year" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/Date.ecl" start="5487">
     <Signature sign="INTEGER2 year" name="Year">INTEGER2 year</Signature><Type>attribute</Type>
    </Definition>
    <Definition body="5563" end="5578" exported="1" fullname="date.secondstoparts.result.month" inherit_type="local" line="186" name="Month" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/Date.ecl" start="5538">
     <Signature sign="UNSIGNED1 month" name="Month">UNSIGNED1 month</Signature><Type>attribute</Type>
    </Definition>
    <Definition body="5610" end="5622" exported="1" fullname="date.secondstoparts.result.day" inherit_type="local" line="187" name="Day" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/Date.ecl" start="5587">
     <Signature sign="UNSIGNED1 day" name="Day">UNSIGNED1 day</Signature><Type>attribute</Type>
    </Definition>
    <Definition body="5655" end="5667" exported="1" fullname="date.secondstoparts.result.hour" inherit_type="local" line="188" name="Hour" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/Date.ecl" start="5631">
     <Signature sign="UNSIGNED1 hour" name="Hour">UNSIGNED1 hour</Signature><Type>attribute</Type>
    </Definition>
    <Definition body="5702" end="5713" exported="1" fullname="date.secondstoparts.result.minute" inherit_type="local" line="189" name="Minute" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/Date.ecl" start="5676">
     <Signature sign="UNSIGNED1 minute" name="Minute">UNSIGNED1 minute</Signature><Type>attribute</Type>
    </Definition>
    <Definition body="5748" end="5759" exported="1" fullname="date.secondstoparts.result.second" inherit_type="local" line="190" name="Second" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/Date.ecl" start="5722">
     <Signature sign="UNSIGNED1 second" name="Second">UNSIGNED1 second</Signature><Type>attribute</Type>
    </Definition>
    <Definition body="5799" end="5815" exported="1" fullname="date.secondstoparts.result.day_of_week" inherit_type="local" line="191" name="day_of_week" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/Date.ecl" start="5768">
     <Signature sign="UNSIGNED1 day_of_week" name="day_of_week">UNSIGNED1 day_of_week</Signature><Type>attribute</Type>
    </Definition>
    <Definition body="5845" end="5876" exported="1" fullname="date.secondstoparts.result.date" inherit_type="local" line="192" name="date" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/Date.ecl" start="5824">
     <Type>attribute</Type>
     <Signature sign="Date_t date" name="date">Date_t date</Signature><Documentation>
      <firstline>Combines year, month day to create a date type</firstline><return>A date created by combining the fields.</return><content>Combines year, month day to create a date type.</content><param><name>year</name><desc>The year (0-9999).</desc></param><param><name>month</name><desc>The month (1-12).</desc></param><param><name>day</name><desc>The day (1..daysInMonth).</desc></param></Documentation>
    </Definition>
    <Definition body="5906" end="5941" exported="1" fullname="date.secondstoparts.result.time" inherit_type="local" line="193" name="time" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/Date.ecl" start="5885">
     <Type>attribute</Type>
     <Signature sign="Time_t time" name="time">Time_t time</Signature><Documentation>
      <firstline>Combines hour, minute second to create a time type</firstline><return>A time created by combining the fields.</return><content>Combines hour, minute second to create a time type.</content><param><name>hour</name><desc>The hour (0-23).</desc></param><param><name>minute</name><desc>The minute (0-59).</desc></param><param><name>second</name><desc>The second (0-59).</desc></param></Documentation>
    </Definition>
    <Signature sign="SecondsToParts(Seconds_t seconds)" name="SecondsToParts">SecondsToParts(Seconds_t seconds)</Signature><Documentation>
     <firstline>Converts the number of seconds since epoch to a structure containing date and time parts</firstline><return>Module with exported attributes for year, month, day, hour, minute, second, day_of_week, date and time.</return><content>Converts the number of seconds since epoch to a structure containing date and time parts. The result must be representable within the Gregorian calendar after the year 1600.</content><param><name>seconds</name><desc>The number of seconds since epoch.</desc></param></Documentation>
   </Definition>
   <Definition body="6282" end="6305" exported="1" fullname="date.timestamptoseconds" inherit_type="local" line="208" name="TimestampToSeconds" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/Date.ecl" start="6221">
    <Type>function</Type>
    <Documentation>
     <firstline>Converts the number of microseconds since epoch to the number of seconds since epoch</firstline><return>The number of seconds since epoch.</return><content>Converts the number of microseconds since epoch to the number of seconds since epoch.</content><param><name>timestamp</name><desc>The number of microseconds since epoch.</desc></param></Documentation>
    <Signature sign="Seconds_t TimestampToSeconds(Timestamp_t timestamp)" name="TimestampToSeconds">Seconds_t TimestampToSeconds(Timestamp_t timestamp)</Signature><Params>
     <Param name="timestamp"/>
    </Params>
   </Definition>
   <Definition body="6530" end="6590" exported="1" fullname="date.isleapyear" inherit_type="local" line="217" name="IsLeapYear" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/Date.ecl" start="6487">
    <Type>function</Type>
    <Documentation>
     <firstline>Tests whether the year is a leap year in the Gregorian calendar</firstline><return>True if the year is a leap year.</return><content>Tests whether the year is a leap year in the Gregorian calendar.</content><param><name>year</name><desc>The year (0-9999).</desc></param></Documentation>
    <Signature sign="BOOLEAN IsLeapYear(INTEGER2 year)" name="IsLeapYear">BOOLEAN IsLeapYear(INTEGER2 year)</Signature><Params>
     <Param name="Year"/>
    </Params>
   </Definition>
   <Definition body="6807" end="6831" exported="1" fullname="date.isdateleapyear" inherit_type="local" line="227" name="IsDateLeapYear" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/Date.ecl" start="6762">
    <Type>function</Type>
    <Documentation>
     <firstline>Tests whether a date is a leap year in the Gregorian calendar</firstline><return>True if the year is a leap year.</return><content>Tests whether a date is a leap year in the Gregorian calendar.</content><param><name>date</name><desc>The date.</desc></param></Documentation>
    <Signature sign="BOOLEAN IsDateLeapYear(Date_t date)" name="IsDateLeapYear">BOOLEAN IsDateLeapYear(Date_t date)</Signature><Params>
     <Param name="date"/>
    </Params>
   </Definition>
   <Definition body="7464" end="7868" exported="1" fullname="date.fromgregorianymd" inherit_type="local" line="244" name="FromGregorianYMD" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/Date.ecl" start="7384">
    <Type>function</Type>
    <Documentation>
     <firstline>Combines year, month, day in the Gregorian calendar to create the number days since 31st December 1BC</firstline><return>The number of elapsed days (1 Jan 1AD = 1)</return><content>Combines year, month, day in the Gregorian calendar to create the number days since 31st December 1BC.</content><param><name>year</name><desc>The year (-4713..9999).</desc></param><param><name>month</name><desc>The month (1-12). A missing value (0) is treated as 1.</desc></param><param><name>day</name><desc>The day (1..daysInMonth). A missing value (0) is treated as 1.</desc></param></Documentation>
    <Signature sign="Days_t FromGregorianYMD(INTEGER2 year, UNSIGNED1 month, UNSIGNED1 day)" name="FromGregorianYMD">Days_t FromGregorianYMD(INTEGER2 year, UNSIGNED1 month, UNSIGNED1 day)</Signature><Params>
     <Param name="Year"/>
     <Param name="Month"/>
     <Param name="Day"/>
    </Params>
   </Definition>
   <Definition body="8161" end="9361" exported="1" fullname="date.togregorianymd" inherit_type="local" line="264" name="ToGregorianYMD" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/Date.ecl" start="8124">
    <Type>module</Type>
    <Params>
     <Param name="days"/>
    </Params>
    <Parents/>
    <Definition body="9222" end="9256" exported="1" fullname="date.togregorianymd.result.year" inherit_type="local" line="291" name="year" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/Date.ecl" start="9208">
     <Signature sign="year" name="year">year</Signature><Type>attribute</Type>
    </Definition>
    <Definition body="9280" end="9298" exported="1" fullname="date.togregorianymd.result.month" inherit_type="local" line="292" name="month" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/Date.ecl" start="9265">
     <Signature sign="month" name="month">month</Signature><Type>attribute</Type>
    </Definition>
    <Definition body="9320" end="9327" exported="1" fullname="date.togregorianymd.result.day" inherit_type="local" line="293" name="day" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/Date.ecl" start="9307">
     <Signature sign="day" name="day">day</Signature><Type>attribute</Type>
    </Definition>
    <Signature sign="ToGregorianYMD(Days_t days)" name="ToGregorianYMD">ToGregorianYMD(Days_t days)</Signature><Documentation>
     <firstline>Converts the number days since 31st December 1BC to a date in the Gregorian calendar</firstline><return>Module containing Year, Month, Day in the Gregorian calendar</return><content>Converts the number days since 31st December 1BC to a date in the Gregorian calendar.</content><param><name>days</name><desc>The number of elapsed days (1 Jan 1AD = 1)</desc></param></Documentation>
   </Definition>
   <Definition body="9643" end="9708" exported="1" fullname="date.fromgregoriandate" inherit_type="local" line="307" name="FromGregorianDate" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/Date.ecl" start="9596">
    <Type>function</Type>
    <Documentation>
     <firstline>Converts a date in the Gregorian calendar to the number days since 31st December 1BC</firstline><return>The number of elapsed days (1 Jan 1AD = 1)</return><content>Converts a date in the Gregorian calendar to the number days since 31st December 1BC.</content><param><name>date</name><desc>The date (using the Gregorian calendar)</desc></param></Documentation>
    <Signature sign="Days_t FromGregorianDate(Date_t date)" name="FromGregorianDate">Days_t FromGregorianDate(Date_t date)</Signature><Params>
     <Param name="date"/>
    </Params>
   </Definition>
   <Definition body="9983" end="10098" exported="1" fullname="date.togregoriandate" inherit_type="local" line="318" name="ToGregorianDate" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/Date.ecl" start="9938">
    <Type>function</Type>
    <Documentation>
     <firstline>Converts the number days since 31st December 1BC to a date in the Gregorian calendar</firstline><return>A Date_t in the Gregorian calendar</return><content>Converts the number days since 31st December 1BC to a date in the Gregorian calendar.</content><param><name>days</name><desc>The number of elapsed days (1 Jan 1AD = 1)</desc></param></Documentation>
    <Signature sign="Date_t ToGregorianDate(Days_t days)" name="ToGregorianDate">Date_t ToGregorianDate(Days_t days)</Signature><Params>
     <Param name="days"/>
    </Params>
   </Definition>
   <Definition body="10474" end="10657" exported="1" fullname="date.dayofyear" inherit_type="local" line="334" name="DayOfYear" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/Date.ecl" start="10432">
    <Type>function</Type>
    <Documentation>
     <firstline>Returns a number representing the day of the year indicated by the given date</firstline><return>A number (1-366) representing the number of days since the beginning of the year.</return><content>Returns a number representing the day of the year indicated by the given date. The date must be in the Gregorian calendar after the year 1600.</content><param><name>date</name><desc>A Date_t value.</desc></param></Documentation>
    <Signature sign="UNSIGNED2 DayOfYear(Date_t date)" name="DayOfYear">UNSIGNED2 DayOfYear(Date_t date)</Signature><Params>
     <Param name="date"/>
    </Params>
   </Definition>
   <Definition body="10992" end="11177" exported="1" fullname="date.dayofweek" inherit_type="local" line="353" name="DayOfWeek" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/Date.ecl" start="10950">
    <Type>function</Type>
    <Documentation>
     <firstline>Returns a number representing the day of the week indicated by the given date</firstline><return>A number 1-7 representing the day of the week, where 1 = Sunday.</return><content>Returns a number representing the day of the week indicated by the given date. The date must be in the Gregorian calendar after the year 1600.</content><param><name>date</name><desc>A Date_t value.</desc></param></Documentation>
    <Signature sign="UNSIGNED1 DayOfWeek(Date_t date)" name="DayOfWeek">UNSIGNED1 DayOfWeek(Date_t date)</Signature><Params>
     <Param name="date"/>
    </Params>
   </Definition>
   <Definition body="11406" end="11422" exported="1" fullname="date.isjulianleapyear" inherit_type="local" line="371" name="IsJulianLeapYear" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/Date.ecl" start="11357">
    <Type>function</Type>
    <Documentation>
     <firstline>Tests whether the year is a leap year in the Julian calendar</firstline><return>True if the year is a leap year.</return><content>Tests whether the year is a leap year in the Julian calendar.</content><param><name>year</name><desc>The year (0-9999).</desc></param></Documentation>
    <Signature sign="BOOLEAN IsJulianLeapYear(INTEGER2 year)" name="IsJulianLeapYear">BOOLEAN IsJulianLeapYear(INTEGER2 year)</Signature><Params>
     <Param name="Year"/>
    </Params>
   </Definition>
   <Definition body="11898" end="12169" exported="1" fullname="date.fromjulianymd" inherit_type="local" line="387" name="FromJulianYMD" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/Date.ecl" start="11821">
    <Type>function</Type>
    <Documentation>
     <firstline>Combines year, month, day in the Julian calendar to create the number days since 31st December 1BC</firstline><return>The number of elapsed days (1 Jan 1AD = 1)</return><content>Combines year, month, day in the Julian calendar to create the number days since 31st December 1BC.</content><param><name>year</name><desc>The year (-4800..9999).</desc></param><param><name>month</name><desc>The month (1-12).</desc></param><param><name>day</name><desc>The day (1..daysInMonth).</desc></param></Documentation>
    <Signature sign="Days_t FromJulianYMD(INTEGER2 year, UNSIGNED1 month, UNSIGNED1 day)" name="FromJulianYMD">Days_t FromJulianYMD(INTEGER2 year, UNSIGNED1 month, UNSIGNED1 day)</Signature><Params>
     <Param name="Year"/>
     <Param name="Month"/>
     <Param name="Day"/>
    </Params>
   </Definition>
   <Definition body="12453" end="12947" exported="1" fullname="date.tojulianymd" inherit_type="local" line="405" name="ToJulianYMD" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/Date.ecl" start="12419">
    <Type>module</Type>
    <Params>
     <Param name="days"/>
    </Params>
    <Parents/>
    <Definition body="12763" end="12794" exported="1" fullname="date.tojulianymd.result.day" inherit_type="local" line="413" name="Day" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/Date.ecl" start="12740">
     <Signature sign="UNSIGNED1 day" name="Day">UNSIGNED1 day</Signature><Type>attribute</Type>
    </Definition>
    <Definition body="12828" end="12853" exported="1" fullname="date.tojulianymd.result.month" inherit_type="local" line="414" name="Month" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/Date.ecl" start="12803">
     <Signature sign="UNSIGNED1 month" name="Month">UNSIGNED1 month</Signature><Type>attribute</Type>
    </Definition>
    <Definition body="12885" end="12913" exported="1" fullname="date.tojulianymd.result.year" inherit_type="local" line="415" name="Year" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/Date.ecl" start="12862">
     <Signature sign="INTEGER2 year" name="Year">INTEGER2 year</Signature><Type>attribute</Type>
    </Definition>
    <Signature sign="ToJulianYMD(Days_t days)" name="ToJulianYMD">ToJulianYMD(Days_t days)</Signature><Documentation>
     <firstline>Converts the number days since 31st December 1BC to a date in the Julian calendar</firstline><return>Module containing Year, Month, Day in the Julian calendar</return><content>Converts the number days since 31st December 1BC to a date in the Julian calendar.</content><param><name>days</name><desc>The number of elapsed days (1 Jan 1AD = 1)</desc></param></Documentation>
   </Definition>
   <Definition body="13220" end="13278" exported="1" fullname="date.fromjuliandate" inherit_type="local" line="429" name="FromJulianDate" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/Date.ecl" start="13176">
    <Type>function</Type>
    <Documentation>
     <firstline>Converts a date in the Julian calendar to the number days since 31st December 1BC</firstline><return>The number of elapsed days (1 Jan 1AD = 1)</return><content>Converts a date in the Julian calendar to the number days since 31st December 1BC.</content><param><name>date</name><desc>The date (using the Julian calendar)</desc></param></Documentation>
    <Signature sign="Days_t FromJulianDate(Date_t date)" name="FromJulianDate">Days_t FromJulianDate(Date_t date)</Signature><Params>
     <Param name="date"/>
    </Params>
   </Definition>
   <Definition body="13544" end="13656" exported="1" fullname="date.tojuliandate" inherit_type="local" line="439" name="ToJulianDate" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/Date.ecl" start="13502">
    <Type>function</Type>
    <Documentation>
     <firstline>Converts the number days since 31st December 1BC to a date in the Julian calendar</firstline><return>A Date_t in the Julian calendar</return><content>Converts the number days since 31st December 1BC to a date in the Julian calendar.</content><param><name>days</name><desc>The number of elapsed days (1 Jan 1AD = 1)</desc></param></Documentation>
    <Signature sign="Date_t ToJulianDate(Days_t days)" name="ToJulianDate">Date_t ToJulianDate(Days_t days)</Signature><Params>
     <Param name="days"/>
    </Params>
   </Definition>
   <Definition body="14178" end="14234" exported="1" fullname="date.dayssince1900" inherit_type="local" line="457" name="DaysSince1900" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/Date.ecl" start="14101">
    <Type>function</Type>
    <Documentation>
     <firstline>Returns the number of days since 1st January 1900 (using the Gregorian Calendar)</firstline><return>The number of elapsed days since 1st January 1900</return><content>Returns the number of days since 1st January 1900 (using the Gregorian Calendar)</content><param><name>year</name><desc>The year (-4713..9999).</desc></param><param><name>month</name><desc>The month (1-12). A missing value (0) is treated as 1.</desc></param><param><name>day</name><desc>The day (1..daysInMonth). A missing value (0) is treated as 1.</desc></param></Documentation>
    <Signature sign="Days_t DaysSince1900(INTEGER2 year, UNSIGNED1 month, UNSIGNED1 day)" name="DaysSince1900">Days_t DaysSince1900(INTEGER2 year, UNSIGNED1 month, UNSIGNED1 day)</Signature><Params>
     <Param name="Year"/>
     <Param name="Month"/>
     <Param name="Day"/>
    </Params>
   </Definition>
   <Definition body="14485" end="14534" exported="1" fullname="date.todayssince1900" inherit_type="local" line="468" name="ToDaysSince1900" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/Date.ecl" start="14440">
    <Type>function</Type>
    <Documentation>
     <firstline>Returns the number of days since 1st January 1900 (using the Gregorian Calendar)</firstline><return>The number of elapsed days since 1st January 1900</return><content>Returns the number of days since 1st January 1900 (using the Gregorian Calendar)</content><param><name>date</name><desc>The date</desc></param></Documentation>
    <Signature sign="Days_t ToDaysSince1900(Date_t date)" name="ToDaysSince1900">Days_t ToDaysSince1900(Date_t date)</Signature><Params>
     <Param name="date"/>
    </Params>
   </Definition>
   <Definition body="14807" end="14846" exported="1" fullname="date.fromdayssince1900" inherit_type="local" line="478" name="FromDaysSince1900" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/Date.ecl" start="14760">
    <Type>function</Type>
    <Documentation>
     <firstline>Converts the number days since 1st January 1900 to a date in the Julian calendar</firstline><return>A Date_t in the Julian calendar</return><content>Converts the number days since 1st January 1900 to a date in the Julian calendar.</content><param><name>days</name><desc>The number of elapsed days since 1st Jan 1900</desc></param></Documentation>
    <Signature sign="Date_t FromDaysSince1900(Days_t days)" name="FromDaysSince1900">Date_t FromDaysSince1900(Days_t days)</Signature><Params>
     <Param name="days"/>
    </Params>
   </Definition>
   <Definition body="15109" end="15418" exported="1" fullname="date.yearsbetween" inherit_type="local" line="489" name="YearsBetween" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/Date.ecl" start="15054">
    <Type>function</Type>
    <Documentation>
     <firstline>Calculate the number of whole years between two dates</firstline><return>The number of years between them.</return><content>Calculate the number of whole years between two dates.</content><param><name>from</name><desc>The first date</desc></param><param><name>to</name><desc>The last date</desc></param></Documentation>
    <Signature sign="INTEGER YearsBetween (Date_t from, Date_t to)" name="YearsBetween">INTEGER YearsBetween (Date_t from, Date_t to)</Signature><Params>
     <Param name="from"/>
     <Param name="to"/>
    </Params>
   </Definition>
   <Definition body="15683" end="16004" exported="1" fullname="date.monthsbetween" inherit_type="local" line="507" name="MonthsBetween" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/Date.ecl" start="15628">
    <Type>function</Type>
    <Documentation>
     <firstline>Calculate the number of whole months between two dates</firstline><return>The number of months between them.</return><content>Calculate the number of whole months between two dates.</content><param><name>from</name><desc>The first date</desc></param><param><name>to</name><desc>The last date</desc></param></Documentation>
    <Signature sign="INTEGER MonthsBetween(Date_t from, Date_t to)" name="MonthsBetween">INTEGER MonthsBetween(Date_t from, Date_t to)</Signature><Params>
     <Param name="from"/>
     <Param name="to"/>
    </Params>
   </Definition>
   <Definition body="16257" end="16382" exported="1" fullname="date.daysbetween" inherit_type="local" line="527" name="DaysBetween" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/Date.ecl" start="16204">
    <Type>function</Type>
    <Documentation>
     <firstline>Calculate the number of days between two dates</firstline><return>The number of days between them.</return><content>Calculate the number of days between two dates.</content><param><name>from</name><desc>The first date</desc></param><param><name>to</name><desc>The last date</desc></param></Documentation>
    <Signature sign="INTEGER DaysBetween(Date_t from, Date_t to)" name="DaysBetween">INTEGER DaysBetween(Date_t from, Date_t to)</Signature><Params>
     <Param name="from"/>
     <Param name="to"/>
    </Params>
   </Definition>
   <Definition body="16622" end="16671" exported="1" fullname="date.datefromdaterec" inherit_type="local" line="542" name="DateFromDateRec" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/Date.ecl" start="16575">
    <Type>function</Type>
    <Documentation>
     <firstline>Combines the fields from a Date_rec to create a Date_t</firstline><return>A Date_t representing the combined values.</return><content>Combines the fields from a Date_rec to create a Date_t</content><param><name>date</name><desc>The row containing the date.</desc></param></Documentation>
    <Signature sign="Date_t DateFromDateRec(Date_rec date)" name="DateFromDateRec">Date_t DateFromDateRec(Date_rec date)</Signature><Params>
     <Param name="date"/>
    </Params>
   </Definition>
   <Definition body="16907" end="16987" exported="1" fullname="date.datefromrec" inherit_type="local" line="552" name="DateFromRec" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/Date.ecl" start="16864">
    <Type>function</Type>
    <Documentation>
     <firstline>Combines the fields from a Date_rec to create a Date_t</firstline><return>A Date_t representing the combined values.</return><content>Combines the fields from a Date_rec to create a Date_t</content><param><name>date</name><desc>The row containing the date.</desc></param></Documentation>
    <Signature sign="Date_t DateFromRec(Date_rec date)" name="DateFromRec">Date_t DateFromRec(Date_rec date)</Signature><Params>
     <Param name="date"/>
    </Params>
   </Definition>
   <Definition body="17227" end="17280" exported="1" fullname="date.timefromtimerec" inherit_type="local" line="562" name="TimeFromTimeRec" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/Date.ecl" start="17180">
    <Type>function</Type>
    <Documentation>
     <firstline>Combines the fields from a Time_rec to create a Time_t</firstline><return>A Time_t representing the combined values.</return><content>Combines the fields from a Time_rec to create a Time_t</content><param><name>time</name><desc>The row containing the time.</desc></param></Documentation>
    <Signature sign="Time_t TimeFromTimeRec(Time_rec time)" name="TimeFromTimeRec">Time_t TimeFromTimeRec(Time_rec time)</Signature><Params>
     <Param name="time"/>
    </Params>
   </Definition>
   <Definition body="17545" end="17606" exported="1" fullname="date.datefromdatetimerec" inherit_type="local" line="572" name="DateFromDateTimeRec" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/Date.ecl" start="17486">
    <Type>function</Type>
    <Documentation>
     <firstline>Combines the date fields from a DateTime_rec to create a Date_t</firstline><return>A Date_t representing the combined values.</return><content>Combines the date fields from a DateTime_rec to create a Date_t</content><param><name>datetime</name><desc>The row containing the datetime.</desc></param></Documentation>
    <Signature sign="Date_t DateFromDateTimeRec(DateTime_rec datetime)" name="DateFromDateTimeRec">Date_t DateFromDateTimeRec(DateTime_rec datetime)</Signature><Params>
     <Param name="datetime"/>
    </Params>
   </Definition>
   <Definition body="17871" end="17936" exported="1" fullname="date.timefromdatetimerec" inherit_type="local" line="582" name="TimeFromDateTimeRec" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/Date.ecl" start="17812">
    <Type>function</Type>
    <Documentation>
     <firstline>Combines the time fields from a DateTime_rec to create a Time_t</firstline><return>A Time_t representing the combined values.</return><content>Combines the time fields from a DateTime_rec to create a Time_t</content><param><name>datetime</name><desc>The row containing the datetime.</desc></param></Documentation>
    <Signature sign="Time_t TimeFromDateTimeRec(DateTime_rec datetime)" name="TimeFromDateTimeRec">Time_t TimeFromDateTimeRec(DateTime_rec datetime)</Signature><Params>
     <Param name="datetime"/>
    </Params>
   </Definition>
   <Definition body="18478" end="18609" exported="1" fullname="date.secondsfromdatetimerec" inherit_type="local" line="595" name="SecondsFromDateTimeRec" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/Date.ecl" start="18382">
    <Type>function</Type>
    <Documentation>
     <firstline>Combines the date and time fields from a DateTime_rec to create a Seconds_t</firstline><return>A Seconds_t representing the combined values.</return><content>Combines the date and time fields from a DateTime_rec to create a Seconds_t</content><param><name>datetime</name><desc>The row containing the datetime.</desc></param><param><name>is_local_time</name><desc>TRUE if the datetime components are expressed in local time rather than UTC, FALSE if the components are expressed in UTC. Optional, defaults to FALSE.</desc></param></Documentation>
    <Signature sign="Seconds_t SecondsFromDateTimeRec(DateTime_rec datetime, BOOLEAN is_local_time = FALSE)" name="SecondsFromDateTimeRec">Seconds_t SecondsFromDateTimeRec(DateTime_rec datetime, BOOLEAN is_local_time = FALSE)</Signature><Params>
     <Param name="datetime"/>
     <Param name="is_local_time"/>
    </Params>
   </Definition>
   <Definition body="19841" end="19888" exported="1" fullname="date.fromstringtodate" inherit_type="local" line="628" name="FromStringToDate" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/Date.ecl" start="19772">
    <Type>function</Type>
    <Documentation>
     <firstline>Converts a string to a Date_t using the relevant string format</firstline><return>The date that was matched in the string. Returns 0 if failed to match or if the date components match but the result is an invalid date. Supported characters: %B Full month name %b or %h Abbreviated month name %d Day of month (two digits) %e Day of month (two digits, or a space followed by a single digit) %m Month (two digits) %t Whitespace %y year within century (00-99) %Y Full year (yyyy) %j Julian day (1-366) Common date formats American '%m/%d/%Y' mm/dd/yyyy Euro '%d/%m/%Y' dd/mm/yyyy Iso format '%Y-%m-%d' yyyy-mm-dd Iso basic 'Y%m%d' yyyymmdd '%d-%b-%Y' dd-mon-yyyy e.g., '21-Mar-1954'</return><content>Converts a string to a Date_t using the relevant string format. The resulting date must be representable within the Gregorian calendar after the year 1600.</content><param><name>date_text</name><desc>The string to be converted.</desc></param><param><name>format</name><desc>The format of the input string. (See documentation for strftime)</desc></param></Documentation>
    <Signature sign="Date_t FromStringToDate(STRING date_text, VARSTRING format)" name="FromStringToDate">Date_t FromStringToDate(STRING date_text, VARSTRING format)</Signature><Params>
     <Param name="date_text"/>
     <Param name="format"/>
    </Params>
   </Definition>
   <Definition body="20315" end="20414" exported="1" fullname="date.fromstring" inherit_type="local" line="642" name="FromString" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/Date.ecl" start="20252">
    <Type>function</Type>
    <Documentation>
     <firstline>Converts a string to a date using the relevant string format</firstline><return>The date that was matched in the string. Returns 0 if failed to match.</return><content>Converts a string to a date using the relevant string format.</content><param><name>date_text</name><desc>The string to be converted.</desc></param><param><name>format</name><desc>The format of the input string. (See documentation for strftime)</desc></param></Documentation>
    <Signature sign="Date_t FromString(STRING date_text, VARSTRING format)" name="FromString">Date_t FromString(STRING date_text, VARSTRING format)</Signature><Params>
     <Param name="date_text"/>
     <Param name="format"/>
    </Params>
   </Definition>
   <Definition body="21055" end="21107" exported="1" fullname="date.fromstringtotime" inherit_type="local" line="662" name="FromStringToTime" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/Date.ecl" start="20986">
    <Type>function</Type>
    <Documentation>
     <firstline>Converts a string to a Time_t using the relevant string format</firstline><return>The time that was matched in the string. Returns 0 if failed to match. Supported characters: %H Hour (two digits) %k (two digits, or a space followed by a single digit) %M Minute (two digits) %S Second (two digits) %t Whitespace</return><content>Converts a string to a Time_t using the relevant string format.</content><param><name>date_text</name><desc>The string to be converted.</desc></param><param><name>format</name><desc>The format of the input string. (See documentation for strftime)</desc></param></Documentation>
    <Signature sign="Time_t FromStringToTime(STRING time_text, VARSTRING format)" name="FromStringToTime">Time_t FromStringToTime(STRING time_text, VARSTRING format)</Signature><Params>
     <Param name="time_text"/>
     <Param name="format"/>
    </Params>
   </Definition>
   <Definition body="21649" end="21694" exported="1" fullname="date.matchdatestring" inherit_type="local" line="677" name="MatchDateString" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/Date.ecl" start="21573">
    <Type>function</Type>
    <Documentation>
     <firstline>Matches a string against a set of date string formats and returns a valid Date_t object from the first format that successfully parses the string</firstline><return>The date that was matched in the string. Returns 0 if failed to match.</return><content>Matches a string against a set of date string formats and returns a valid Date_t object from the first format that successfully parses the string.</content><param><name>date_text</name><desc>The string to be converted.</desc></param><param><name>formats</name><desc>A set of formats to check against the string. (See documentation for strftime)</desc></param></Documentation>
    <Signature sign="Date_t MatchDateString(STRING date_text, SET OF VARSTRING formats)" name="MatchDateString">Date_t MatchDateString(STRING date_text, SET OF VARSTRING formats)</Signature><Params>
     <Param name="date_text"/>
     <Param name="formats"/>
    </Params>
   </Definition>
   <Definition body="22236" end="22286" exported="1" fullname="date.matchtimestring" inherit_type="local" line="692" name="MatchTimeString" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/Date.ecl" start="22160">
    <Type>function</Type>
    <Documentation>
     <firstline>Matches a string against a set of time string formats and returns a valid Time_t object from the first format that successfully parses the string</firstline><return>The time that was matched in the string. Returns 0 if failed to match.</return><content>Matches a string against a set of time string formats and returns a valid Time_t object from the first format that successfully parses the string.</content><param><name>time_text</name><desc>The string to be converted.</desc></param><param><name>formats</name><desc>A set of formats to check against the string. (See documentation for strftime)</desc></param></Documentation>
    <Signature sign="Time_t MatchTimeString(STRING time_text, SET OF VARSTRING formats)" name="MatchTimeString">Time_t MatchTimeString(STRING time_text, SET OF VARSTRING formats)</Signature><Params>
     <Param name="time_text"/>
     <Param name="formats"/>
    </Params>
   </Definition>
   <Definition body="22874" end="22914" exported="1" fullname="date.datetostring" inherit_type="local" line="708" name="DateToString" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/Date.ecl" start="22801">
    <Type>function</Type>
    <Documentation>
     <firstline>Formats a date as a string</firstline><return>Blank if date cannot be formatted, or the date in the requested format.</return><content>Formats a date as a string.</content><param><name>date</name><desc>The date to be converted.</desc></param><param><name>format</name><desc>The format template to use for the conversion; see strftime() for appropriate values. The maximum length of the resulting string is 255 characters. Optional; defaults to '%Y-%m-%d' which is YYYY-MM-DD.</desc></param></Documentation>
    <Signature sign="STRING DateToString(Date_t date, VARSTRING format = '%Y-%m-%d')" name="DateToString">STRING DateToString(Date_t date, VARSTRING format = '%Y-%m-%d')</Signature><Params>
     <Param name="date"/>
     <Param name="format"/>
    </Params>
   </Definition>
   <Definition body="23504" end="23544" exported="1" fullname="date.timetostring" inherit_type="local" line="724" name="TimeToString" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/Date.ecl" start="23431">
    <Type>function</Type>
    <Documentation>
     <firstline>Formats a time as a string</firstline><return>Blank if the time cannot be formatted, or the time in the requested format.</return><content>Formats a time as a string.</content><param><name>time</name><desc>The time to be converted.</desc></param><param><name>format</name><desc>The format template to use for the conversion; see strftime() for appropriate values. The maximum length of the resulting string is 255 characters. Optional; defaults to '%H:%M:%S' which is HH:MM:SS.</desc></param></Documentation>
    <Signature sign="STRING TimeToString(Time_t time, VARSTRING format = '%H:%M:%S')" name="TimeToString">STRING TimeToString(Time_t time, VARSTRING format = '%H:%M:%S')</Signature><Params>
     <Param name="time"/>
     <Param name="format"/>
    </Params>
   </Definition>
   <Definition body="24159" end="24205" exported="1" fullname="date.secondstostring" inherit_type="local" line="739" name="SecondsToString" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/Date.ecl" start="24068">
    <Type>function</Type>
    <Documentation>
     <firstline>Converts a Seconds_t value into a human-readable string using a format template</firstline><return>The converted seconds as a string.</return><content>Converts a Seconds_t value into a human-readable string using a format template.</content><param><name>seconds</name><desc>The seconds since epoch.</desc></param><param><name>format</name><desc>The format template to use for the conversion; see strftime() for appropriate values. The maximum length of the resulting string is 255 characters. Optional; defaults to '%Y-%m-%dT%H:%M:%S' which is YYYY-MM-DDTHH:MM:SS.</desc></param></Documentation>
    <Signature sign="STRING SecondsToString(Seconds_t seconds, VARSTRING format = '%Y-%m-%dT%H:%M:%S')" name="SecondsToString">STRING SecondsToString(Seconds_t seconds, VARSTRING format = '%Y-%m-%dT%H:%M:%S')</Signature><Params>
     <Param name="seconds"/>
     <Param name="format"/>
    </Params>
   </Definition>
   <Definition body="24592" end="24674" exported="1" fullname="date.tostring" inherit_type="local" line="753" name="ToString" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/Date.ecl" start="24536">
    <Type>function</Type>
    <Documentation>
     <firstline>Formats a date as a string</firstline><return>Blank if date cannot be formatted, or the date in the requested format.</return><content>Formats a date as a string.</content><param><name>date</name><desc>The date to be converted.</desc></param><param><name>format</name><desc>The format the date is output in. (See documentation for strftime)</desc></param></Documentation>
    <Signature sign="STRING ToString(Date_t date, VARSTRING format)" name="ToString">STRING ToString(Date_t date, VARSTRING format)</Signature><Params>
     <Param name="date"/>
     <Param name="format"/>
    </Params>
   </Definition>
   <Definition body="25148" end="25219" exported="1" fullname="date.convertdateformat" inherit_type="local" line="765" name="ConvertDateFormat" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/Date.ecl" start="25032">
    <Type>function</Type>
    <Documentation>
     <firstline>Converts a date from one format to another</firstline><return>The converted string, or blank if it failed to match the format.</return><content>Converts a date from one format to another</content><param><name>date_text</name><desc>The string containing the date to be converted.</desc></param><param><name>from_format</name><desc>The format the date is to be converted from.</desc></param><param><name>to_format</name><desc>The format the date is to be converted to.</desc></param></Documentation>
    <Signature sign="STRING ConvertDateFormat(STRING date_text, VARSTRING from_format='%m/%d/%Y', VARSTRING to_format='%Y%m%d')" name="ConvertDateFormat">STRING ConvertDateFormat(STRING date_text, VARSTRING from_format='%m/%d/%Y', VARSTRING to_format='%Y%m%d')</Signature><Params>
     <Param name="date_text"/>
     <Param name="from_format"/>
     <Param name="to_format"/>
    </Params>
   </Definition>
   <Definition body="25689" end="25806" exported="1" fullname="date.convertformat" inherit_type="local" line="778" name="ConvertFormat" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/Date.ecl" start="25577">
    <Type>function</Type>
    <Documentation>
     <firstline>Converts a date from one format to another</firstline><return>The converted string, or blank if it failed to match the format.</return><content>Converts a date from one format to another</content><param><name>date_text</name><desc>The string containing the date to be converted.</desc></param><param><name>from_format</name><desc>The format the date is to be converted from.</desc></param><param><name>to_format</name><desc>The format the date is to be converted to.</desc></param></Documentation>
    <Signature sign="STRING ConvertFormat(STRING date_text, VARSTRING from_format='%m/%d/%Y', VARSTRING to_format='%Y%m%d')" name="ConvertFormat">STRING ConvertFormat(STRING date_text, VARSTRING from_format='%m/%d/%Y', VARSTRING to_format='%Y%m%d')</Signature><Params>
     <Param name="date_text"/>
     <Param name="from_format"/>
     <Param name="to_format"/>
    </Params>
   </Definition>
   <Definition body="26280" end="26351" exported="1" fullname="date.converttimeformat" inherit_type="local" line="791" name="ConvertTimeFormat" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/Date.ecl" start="26164">
    <Type>function</Type>
    <Documentation>
     <firstline>Converts a time from one format to another</firstline><return>The converted string, or blank if it failed to match the format.</return><content>Converts a time from one format to another</content><param><name>time_text</name><desc>The string containing the time to be converted.</desc></param><param><name>from_format</name><desc>The format the time is to be converted from.</desc></param><param><name>to_format</name><desc>The format the time is to be converted to.</desc></param></Documentation>
    <Signature sign="STRING ConvertTimeFormat(STRING time_text, VARSTRING from_format='%H%M%S', VARSTRING to_format='%H:%M:%S')" name="ConvertTimeFormat">STRING ConvertTimeFormat(STRING time_text, VARSTRING from_format='%H%M%S', VARSTRING to_format='%H:%M:%S')</Signature><Params>
     <Param name="time_text"/>
     <Param name="from_format"/>
     <Param name="to_format"/>
    </Params>
   </Definition>
   <Definition body="26861" end="27058" exported="1" fullname="date.convertdateformatmultiple" inherit_type="local" line="804" name="ConvertDateFormatMultiple" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/Date.ecl" start="26740">
    <Type>function</Type>
    <Documentation>
     <firstline>Converts a date that matches one of a set of formats to another</firstline><return>The converted string, or blank if it failed to match the format.</return><content>Converts a date that matches one of a set of formats to another.</content><param><name>date_text</name><desc>The string containing the date to be converted.</desc></param><param><name>from_formats</name><desc>The list of formats the date is to be converted from.</desc></param><param><name>to_format</name><desc>The format the date is to be converted to.</desc></param></Documentation>
    <Signature sign="STRING ConvertDateFormatMultiple(STRING date_text, SET OF VARSTRING from_formats, VARSTRING to_format='%Y%m%d')" name="ConvertDateFormatMultiple">STRING ConvertDateFormatMultiple(STRING date_text, SET OF VARSTRING from_formats, VARSTRING to_format='%Y%m%d')</Signature><Params>
     <Param name="date_text"/>
     <Param name="from_formats"/>
     <Param name="to_format"/>
    </Params>
   </Definition>
   <Definition body="27564" end="27698" exported="1" fullname="date.convertformatmultiple" inherit_type="local" line="822" name="ConvertFormatMultiple" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/Date.ecl" start="27447">
    <Type>function</Type>
    <Documentation>
     <firstline>Converts a date that matches one of a set of formats to another</firstline><return>The converted string, or blank if it failed to match the format.</return><content>Converts a date that matches one of a set of formats to another.</content><param><name>date_text</name><desc>The string containing the date to be converted.</desc></param><param><name>from_formats</name><desc>The list of formats the date is to be converted from.</desc></param><param><name>to_format</name><desc>The format the date is to be converted to.</desc></param></Documentation>
    <Signature sign="STRING ConvertFormatMultiple(STRING date_text, SET OF VARSTRING from_formats, VARSTRING to_format='%Y%m%d')" name="ConvertFormatMultiple">STRING ConvertFormatMultiple(STRING date_text, SET OF VARSTRING from_formats, VARSTRING to_format='%Y%m%d')</Signature><Params>
     <Param name="date_text"/>
     <Param name="from_formats"/>
     <Param name="to_format"/>
    </Params>
   </Definition>
   <Definition body="28210" end="28281" exported="1" fullname="date.converttimeformatmultiple" inherit_type="local" line="835" name="ConvertTimeFormatMultiple" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/Date.ecl" start="28087">
    <Type>function</Type>
    <Documentation>
     <firstline>Converts a time that matches one of a set of formats to another</firstline><return>The converted string, or blank if it failed to match the format.</return><content>Converts a time that matches one of a set of formats to another.</content><param><name>time_text</name><desc>The string containing the time to be converted.</desc></param><param><name>from_formats</name><desc>The list of formats the time is to be converted from.</desc></param><param><name>to_format</name><desc>The format the time is to be converted to.</desc></param></Documentation>
    <Signature sign="STRING ConvertTimeFormatMultiple(STRING time_text, SET OF VARSTRING from_formats, VARSTRING to_format='%H:%m:%s')" name="ConvertTimeFormatMultiple">STRING ConvertTimeFormatMultiple(STRING time_text, SET OF VARSTRING from_formats, VARSTRING to_format='%H:%m:%s')</Signature><Params>
     <Param name="time_text"/>
     <Param name="from_formats"/>
     <Param name="to_format"/>
    </Params>
   </Definition>
   <Definition body="29227" end="29293" exported="1" fullname="date.adjustdate" inherit_type="local" line="855" name="AdjustDate" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/Date.ecl" start="29037">
    <Type>function</Type>
    <Documentation>
     <firstline>Adjusts a date by incrementing or decrementing year, month and/or day values</firstline><return>The adjusted Date_t value.</return><content>Adjusts a date by incrementing or decrementing year, month and/or day values. The date must be in the Gregorian calendar after the year 1600. If the new calculated date is invalid then it will be normalized according to mktime() rules. Example: 20140130 + 1 month = 20140302.</content><param><name>date</name><desc>The date to adjust.</desc></param><param><name>year_delta</name><desc>The requested change to the year value; optional, defaults to zero.</desc></param><param><name>month_delta</name><desc>The requested change to the month value; optional, defaults to zero.</desc></param><param><name>day_delta</name><desc>The requested change to the day of month value; optional, defaults to zero.</desc></param></Documentation>
    <Signature sign="Date_t AdjustDate(Date_t date,&#10;                         INTEGER2 year_delta = 0,&#10;                         INTEGER4 month_delta = 0,&#10;                         INTEGER4 day_delta = 0)" name="AdjustDate">Date_t AdjustDate(Date_t date,
                         INTEGER2 year_delta = 0,
                         INTEGER4 month_delta = 0,
                         INTEGER4 day_delta = 0)</Signature><Params>
     <Param name="date"/>
     <Param name="year_delta"/>
     <Param name="month_delta"/>
     <Param name="day_delta"/>
    </Params>
   </Definition>
   <Definition body="29814" end="29868" exported="1" fullname="date.adjustdatebyseconds" inherit_type="local" line="873" name="AdjustDateBySeconds" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/Date.ecl" start="29741">
    <Type>function</Type>
    <Documentation>
     <firstline>Adjusts a date by adding or subtracting seconds</firstline><return>The adjusted Date_t value.</return><content>Adjusts a date by adding or subtracting seconds. The date must be in the Gregorian calendar after the year 1600. If the new calculated date is invalid then it will be normalized according to mktime() rules. Example: 20140130 + 172800 seconds = 20140201.</content><param><name>date</name><desc>The date to adjust.</desc></param><param><name>seconds_delta</name><desc>The requested change to the date, in seconds.</desc></param></Documentation>
    <Signature sign="Date_t AdjustDateBySeconds(Date_t date, INTEGER4 seconds_delta)" name="AdjustDateBySeconds">Date_t AdjustDateBySeconds(Date_t date, INTEGER4 seconds_delta)</Signature><Params>
     <Param name="date"/>
     <Param name="seconds_delta"/>
    </Params>
   </Definition>
   <Definition body="30719" end="30789" exported="1" fullname="date.adjusttime" inherit_type="local" line="892" name="AdjustTime" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/Date.ecl" start="30525">
    <Type>function</Type>
    <Documentation>
     <firstline>Adjusts a time by incrementing or decrementing hour, minute and/or second values</firstline><return>The adjusted Time_t value.</return><content>Adjusts a time by incrementing or decrementing hour, minute and/or second values. If the new calculated time is invalid then it will be normalized according to mktime() rules.</content><param><name>time</name><desc>The time to adjust.</desc></param><param><name>hour_delta</name><desc>The requested change to the hour value; optional, defaults to zero.</desc></param><param><name>minute_delta</name><desc>The requested change to the minute value; optional, defaults to zero.</desc></param><param><name>second_delta</name><desc>The requested change to the second of month value; optional, defaults to zero.</desc></param></Documentation>
    <Signature sign="Time_t AdjustTime(Time_t time,&#10;                         INTEGER2 hour_delta = 0,&#10;                         INTEGER4 minute_delta = 0,&#10;                         INTEGER4 second_delta = 0)" name="AdjustTime">Time_t AdjustTime(Time_t time,
                         INTEGER2 hour_delta = 0,
                         INTEGER4 minute_delta = 0,
                         INTEGER4 second_delta = 0)</Signature><Params>
     <Param name="time"/>
     <Param name="hour_delta"/>
     <Param name="minute_delta"/>
     <Param name="second_delta"/>
    </Params>
   </Definition>
   <Definition body="31192" end="31246" exported="1" fullname="date.adjusttimebyseconds" inherit_type="local" line="908" name="AdjustTimeBySeconds" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/Date.ecl" start="31119">
    <Type>function</Type>
    <Documentation>
     <firstline>Adjusts a time by adding or subtracting seconds</firstline><return>The adjusted Time_t value.</return><content>Adjusts a time by adding or subtracting seconds. If the new calculated time is invalid then it will be normalized according to mktime() rules.</content><param><name>time</name><desc>The time to adjust.</desc></param><param><name>seconds_delta</name><desc>The requested change to the time, in seconds.</desc></param></Documentation>
    <Signature sign="Time_t AdjustTimeBySeconds(Time_t time, INTEGER4 seconds_delta)" name="AdjustTimeBySeconds">Time_t AdjustTimeBySeconds(Time_t time, INTEGER4 seconds_delta)</Signature><Params>
     <Param name="time"/>
     <Param name="seconds_delta"/>
    </Params>
   </Definition>
   <Definition body="33124" end="33236" exported="1" fullname="date.adjustseconds" inherit_type="local" line="939" name="AdjustSeconds" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/Date.ecl" start="32732">
    <Type>function</Type>
    <Documentation>
     <firstline>Adjusts a Seconds_t value by adding or subtracting years, months, days, hours, minutes and/or seconds</firstline><return>The adjusted Seconds_t value.</return><content>Adjusts a Seconds_t value by adding or subtracting years, months, days, hours, minutes and/or seconds. This is performed by first converting the seconds into a full date/time structure, applying any delta values to individual date/time components, then converting the structure back to the number of seconds. This interim date must lie within Gregorian calendar after the year 1600. If the interim structure is found to have an invalid date/time then it will be normalized according to mktime() rules. Therefore, some delta values (such as "1 month") are actually relative to the value of the seconds argument.</content><param><name>seconds</name><desc>The number of seconds to adjust.</desc></param><param><name>year_delta</name><desc>The requested change to the year value; optional, defaults to zero.</desc></param><param><name>month_delta</name><desc>The requested change to the month value; optional, defaults to zero.</desc></param><param><name>day_delta</name><desc>The requested change to the day of month value; optional, defaults to zero.</desc></param><param><name>hour_delta</name><desc>The requested change to the hour value; optional, defaults to zero.</desc></param><param><name>minute_delta</name><desc>The requested change to the minute value; optional, defaults to zero.</desc></param><param><name>second_delta</name><desc>The requested change to the second of month value; optional, defaults to zero.</desc></param></Documentation>
    <Signature sign="Seconds_t AdjustSeconds(Seconds_t seconds,&#10;                               INTEGER2 year_delta = 0,&#10;                               INTEGER4 month_delta = 0,&#10;                               INTEGER4 day_delta = 0,&#10;                               INTEGER4 hour_delta = 0,&#10;                               INTEGER4 minute_delta = 0,&#10;                               INTEGER4 second_delta = 0)" name="AdjustSeconds">Seconds_t AdjustSeconds(Seconds_t seconds,
                               INTEGER2 year_delta = 0,
                               INTEGER4 month_delta = 0,
                               INTEGER4 day_delta = 0,
                               INTEGER4 hour_delta = 0,
                               INTEGER4 minute_delta = 0,
                               INTEGER4 second_delta = 0)</Signature><Params>
     <Param name="seconds"/>
     <Param name="year_delta"/>
     <Param name="month_delta"/>
     <Param name="day_delta"/>
     <Param name="hour_delta"/>
     <Param name="minute_delta"/>
     <Param name="second_delta"/>
    </Params>
   </Definition>
   <Definition body="34807" end="34877" exported="1" fullname="date.adjustcalendar" inherit_type="local" line="973" name="AdjustCalendar" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/Date.ecl" start="34601">
    <Type>function</Type>
    <Documentation>
     <firstline>Adjusts a date by incrementing or decrementing months and/or years</firstline><return>The adjusted Date_t value.</return><content>Adjusts a date by incrementing or decrementing months and/or years. This routine uses the rule outlined in McGinn v. State, 46 Neb. 427, 65 N.W. 46 (1895): "The term calendar month, whether employed in statutes or contracts, and not appearing to have been used in a different sense, denotes a period terminating with the day of the succeeding month numerically corresponding to the day of its beginning, less one. If there be no corresponding day of the succeeding month, it terminates with the last day thereof." The internet suggests similar legal positions exist in the Commonwealth and Germany. Note that day adjustments are performed after year and month adjustments using the preceding rules. As an example, Jan. 31, 2014 + 1 month will result in Feb. 28, 2014; Jan. 31, 2014 + 1 month + 1 day will result in Mar. 1, 2014.</content><param><name>date</name><desc>The date to adjust, in the Gregorian calendar after 1600.</desc></param><param><name>year_delta</name><desc>The requested change to the year value; optional, defaults to zero.</desc></param><param><name>month_delta</name><desc>The requested change to the month value; optional, defaults to zero.</desc></param><param><name>day_delta</name><desc>The requested change to the day value; optional, defaults to zero.</desc></param></Documentation>
    <Signature sign="Date_t AdjustCalendar(Date_t date,&#10;                             INTEGER2 year_delta = 0,&#10;                             INTEGER4 month_delta = 0,&#10;                             INTEGER4 day_delta = 0)" name="AdjustCalendar">Date_t AdjustCalendar(Date_t date,
                             INTEGER2 year_delta = 0,
                             INTEGER4 month_delta = 0,
                             INTEGER4 day_delta = 0)</Signature><Params>
     <Param name="date"/>
     <Param name="year_delta"/>
     <Param name="month_delta"/>
     <Param name="day_delta"/>
    </Params>
   </Definition>
   <Definition body="35126" end="35172" exported="1" fullname="date.islocaldaylightsavingsineffect" inherit_type="local" line="987" name="IsLocalDaylightSavingsInEffect" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/Date.ecl" start="35076">
    <Type>function</Type>
    <Documentation>
     <firstline>Returns a boolean indicating whether daylight savings time is currently in effect locally</firstline><return>TRUE if daylight savings time is currently in effect, FALSE otherwise.</return><content>Returns a boolean indicating whether daylight savings time is currently in effect locally.</content></Documentation>
    <Signature sign="BOOLEAN IsLocalDaylightSavingsInEffect()" name="IsLocalDaylightSavingsInEffect">BOOLEAN IsLocalDaylightSavingsInEffect()</Signature><Params/>
   </Definition>
   <Definition body="35562" end="35597" exported="1" fullname="date.localtimezoneoffset" inherit_type="local" line="1000" name="LocalTimeZoneOffset" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/Date.ecl" start="35522">
    <Type>function</Type>
    <Documentation>
     <firstline>Returns the offset (in seconds) of the time represented from UTC, with positive values indicating locations east of the Prime Meridian</firstline><return>The number of seconds offset from UTC.</return><content>Returns the offset (in seconds) of the time represented from UTC, with positive values indicating locations east of the Prime Meridian. Given a UTC time in seconds since epoch, you can find the local time by adding the result of this function to the seconds.</content></Documentation>
    <Signature sign="INTEGER4 LocalTimeZoneOffset()" name="LocalTimeZoneOffset">INTEGER4 LocalTimeZoneOffset()</Signature><Params/>
   </Definition>
   <Definition body="35974" end="36014" exported="1" fullname="date.currentdate" inherit_type="local" line="1013" name="CurrentDate" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/Date.ecl" start="35915">
    <Type>function</Type>
    <Documentation>
     <firstline>Returns the current date</firstline><return>A Date_t representing the current date.</return><content>Returns the current date.</content><param><name>in_local_time</name><desc>TRUE if the returned value should be local to the cluster computing the date, FALSE for UTC. Optional, defaults to FALSE.</desc></param></Documentation>
    <Signature sign="Date_t CurrentDate(BOOLEAN in_local_time = FALSE)" name="CurrentDate">Date_t CurrentDate(BOOLEAN in_local_time = FALSE)</Signature><Params>
     <Param name="in_local_time"/>
    </Params>
   </Definition>
   <Definition body="36169" end="36188" exported="1" fullname="date.today" inherit_type="local" line="1023" name="Today" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/Date.ecl" start="36145">
    <Type>function</Type>
    <Documentation>
     <firstline>Returns the current date in the local time zone</firstline><return>A Date_t representing the current date.</return><content>Returns the current date in the local time zone.</content></Documentation>
    <Signature sign="Date_t Today()" name="Today">Date_t Today()</Signature><Params/>
   </Definition>
   <Definition body="36578" end="36618" exported="1" fullname="date.currenttime" inherit_type="local" line="1035" name="CurrentTime" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/Date.ecl" start="36519">
    <Type>function</Type>
    <Documentation>
     <firstline>Returns the current time of day</firstline><return>A Time_t representing the current time of day.</return><content>Returns the current time of day</content><param><name>in_local_time</name><desc>TRUE if the returned value should be local to the cluster computing the time, FALSE for UTC. Optional, defaults to FALSE.</desc></param></Documentation>
    <Signature sign="Time_t CurrentTime(BOOLEAN in_local_time = FALSE)" name="CurrentTime">Time_t CurrentTime(BOOLEAN in_local_time = FALSE)</Signature><Params>
     <Param name="in_local_time"/>
    </Params>
   </Definition>
   <Definition body="37126" end="37169" exported="1" fullname="date.currentseconds" inherit_type="local" line="1049" name="CurrentSeconds" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/Date.ecl" start="37061">
    <Type>function</Type>
    <Documentation>
     <firstline>Returns the current date and time as the number of seconds since epoch</firstline><return>A Seconds_t representing the current time in UTC or local time, depending on the argument.</return><content>Returns the current date and time as the number of seconds since epoch.</content><param><name>in_local_time</name><desc>TRUE if the returned value should be local to the cluster computing the time, FALSE for UTC. Optional, defaults to FALSE.</desc></param></Documentation>
    <Signature sign="Seconds_t CurrentSeconds(BOOLEAN in_local_time = FALSE)" name="CurrentSeconds">Seconds_t CurrentSeconds(BOOLEAN in_local_time = FALSE)</Signature><Params>
     <Param name="in_local_time"/>
    </Params>
   </Definition>
   <Definition body="37732" end="37777" exported="1" fullname="date.currenttimestamp" inherit_type="local" line="1064" name="CurrentTimestamp" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/Date.ecl" start="37663">
    <Type>function</Type>
    <Documentation>
     <firstline>Returns the current date and time as the number of microseconds since epoch</firstline><return>A Timestamp_t representing the current time in microseconds in UTC or local time, depending on the argument.</return><content>Returns the current date and time as the number of microseconds since epoch.</content><param><name>in_local_time</name><desc>TRUE if the returned value should be local to the cluster computing the time, FALSE for UTC. Optional, defaults to FALSE.</desc></param></Documentation>
    <Signature sign="Timestamp_t CurrentTimestamp(BOOLEAN in_local_time = FALSE)" name="CurrentTimestamp">Timestamp_t CurrentTimestamp(BOOLEAN in_local_time = FALSE)</Signature><Params>
     <Param name="in_local_time"/>
    </Params>
   </Definition>
   <Definition body="38283" end="38534" exported="1" fullname="date.datesformonth" inherit_type="local" line="1078" name="DatesForMonth" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/Date.ecl" start="38220">
    <Type>module</Type>
    <Params>
     <Param name="as_of_date"/>
    </Params>
    <Parents/>
    <Definition body="38448" end="38458" exported="1" fullname="date.datesformonth.result.startdate" inherit_type="local" line="1083" name="startDate" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/Date.ecl" start="38422">
     <Signature sign="Date_t startDate" name="startDate">Date_t startDate</Signature><Type>attribute</Type>
    </Definition>
    <Definition body="38491" end="38500" exported="1" fullname="date.datesformonth.result.enddate" inherit_type="local" line="1084" name="endDate" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/Date.ecl" start="38467">
     <Signature sign="Date_t endDate" name="endDate">Date_t endDate</Signature><Type>attribute</Type>
    </Definition>
    <Signature sign="DatesForMonth(Date_t as_of_date = CurrentDate(FALSE))" name="DatesForMonth">DatesForMonth(Date_t as_of_date = CurrentDate(FALSE))</Signature><Documentation>
     <firstline>Returns the beginning and ending dates for the month surrounding the given date</firstline><return>Module with exported attributes for startDate and endDate.</return><content>Returns the beginning and ending dates for the month surrounding the given date.</content><param><name>as_of_date</name><desc>The reference date from which the month will be calculated. This date must be a date within the Gregorian calendar. Optional, defaults to the current date in UTC.</desc></param></Documentation>
   </Definition>
   <Definition body="39079" end="39320" exported="1" fullname="date.datesforweek" inherit_type="local" line="1102" name="DatesForWeek" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/Date.ecl" start="39017">
    <Type>module</Type>
    <Params>
     <Param name="as_of_date"/>
    </Params>
    <Parents/>
    <Definition body="39205" end="39230" exported="1" fullname="date.datesforweek.result.startdate" inherit_type="local" line="1106" name="startDate" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/Date.ecl" start="39179">
     <Signature sign="Date_t startDate" name="startDate">Date_t startDate</Signature><Type>attribute</Type>
    </Definition>
    <Definition body="39263" end="39286" exported="1" fullname="date.datesforweek.result.enddate" inherit_type="local" line="1107" name="endDate" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/Date.ecl" start="39239">
     <Signature sign="Date_t endDate" name="endDate">Date_t endDate</Signature><Type>attribute</Type>
    </Definition>
    <Signature sign="DatesForWeek(Date_t as_of_date = CurrentDate(FALSE))" name="DatesForWeek">DatesForWeek(Date_t as_of_date = CurrentDate(FALSE))</Signature><Documentation>
     <firstline>Returns the beginning and ending dates for the week surrounding the given date (Sunday marks the beginning of a week)</firstline><return>Module with exported attributes for startDate and endDate.</return><content>Returns the beginning and ending dates for the week surrounding the given date (Sunday marks the beginning of a week).</content><param><name>as_of_date</name><desc>The reference date from which the week will be calculated. This date must be a date within the Gregorian calendar. Optional, defaults to the current date in UTC.</desc></param></Documentation>
   </Definition>
   <Definition body="39971" end="40342" exported="1" fullname="date.isvaliddate" inherit_type="local" line="1126" name="IsValidDate" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/Date.ecl" start="39811">
    <Type>function</Type>
    <Documentation>
     <firstline>Tests whether a date is valid, both by range-checking the year and by validating each of the other individual components</firstline><return>TRUE if the date is valid, FALSE otherwise.</return><content>Tests whether a date is valid, both by range-checking the year and by validating each of the other individual components.</content><param><name>date</name><desc>The date to validate.</desc></param><param><name>yearLowerBound</name><desc>The minimum acceptable year. Optional; defaults to 1800.</desc></param><param><name>yearUpperBound</name><desc>The maximum acceptable year. Optional; defaults to 2100.</desc></param></Documentation>
    <Signature sign="BOOLEAN IsValidDate(Date_t date,&#10;                           INTEGER2 yearLowerBound = 1800,&#10;                           INTEGER2 yearUpperBound = 2100)" name="IsValidDate">BOOLEAN IsValidDate(Date_t date,
                           INTEGER2 yearLowerBound = 1800,
                           INTEGER2 yearUpperBound = 2100)</Signature><Params>
     <Param name="date"/>
     <Param name="yearLowerBound"/>
     <Param name="yearUpperBound"/>
    </Params>
   </Definition>
   <Definition body="40637" end="40864" exported="1" fullname="date.isvalidgregoriandate" inherit_type="local" line="1146" name="IsValidGregorianDate" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/Date.ecl" start="40586">
    <Type>function</Type>
    <Documentation>
     <firstline>Tests whether a date is valid in the Gregorian calendar</firstline><return>TRUE if the date is valid, FALSE otherwise.</return><content>Tests whether a date is valid in the Gregorian calendar. The year must be between 1601 and 30827.</content><param><name>date</name><desc>The Date_t to validate.</desc></param></Documentation>
    <Signature sign="BOOLEAN IsValidGregorianDate(Date_t date)" name="IsValidGregorianDate">BOOLEAN IsValidGregorianDate(Date_t date)</Signature><Params>
     <Param name="date"/>
    </Params>
   </Definition>
   <Definition body="41077" end="41316" exported="1" fullname="date.isvalidtime" inherit_type="local" line="1161" name="IsValidTime" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/Date.ecl" start="41035">
    <Type>function</Type>
    <Documentation>
     <firstline>Tests whether a time is valid</firstline><return>TRUE if the time is valid, FALSE otherwise.</return><content>Tests whether a time is valid.</content><param><name>time</name><desc>The time to validate.</desc></param></Documentation>
    <Signature sign="BOOLEAN IsValidTime(Time_t time)" name="IsValidTime">BOOLEAN IsValidTime(Time_t time)</Signature><Params>
     <Param name="time"/>
    </Params>
   </Definition>
   <Definition body="41854" end="41938" exported="1" fullname="date.createdate" inherit_type="local" line="1182" name="CreateDate" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/Date.ecl" start="41778">
    <Type>transform</Type>
    <Params>
     <Param name="Year"/>
     <Param name="Month"/>
     <Param name="Day"/>
    </Params>
    <Return>date_rec</Return>
    <Signature sign="Date_rec CreateDate(INTEGER2 year, UNSIGNED1 month, UNSIGNED1 day)" name="CreateDate">Date_rec CreateDate(INTEGER2 year, UNSIGNED1 month, UNSIGNED1 day)</Signature><Documentation>
     <firstline>A transform to create a Date_rec from the individual elements</firstline><return>A transform that creates a Date_rec containing the date.</return><content>A transform to create a Date_rec from the individual elements</content><param><name>year</name><desc>The year</desc></param><param><name>month</name><desc>The month (1-12).</desc></param><param><name>day</name><desc>The day (1..daysInMonth).</desc></param></Documentation>
   </Definition>
   <Definition body="42209" end="42366" exported="1" fullname="date.createdatefromseconds" inherit_type="local" line="1196" name="CreateDateFromSeconds" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/Date.ecl" start="42150">
    <Type>transform</Type>
    <Params>
     <Param name="seconds"/>
    </Params>
    <Return>date_rec</Return>
    <Signature sign="Date_rec CreateDateFromSeconds(Seconds_t seconds)" name="CreateDateFromSeconds">Date_rec CreateDateFromSeconds(Seconds_t seconds)</Signature><Documentation>
     <firstline>A transform to create a Date_rec from a Seconds_t value</firstline><return>A transform that creates a Date_rec containing the date.</return><content>A transform to create a Date_rec from a Seconds_t value.</content><param><name>seconds</name><desc>The number seconds since epoch.</desc></param></Documentation>
   </Definition>
   <Definition body="42742" end="42834" exported="1" fullname="date.createtime" inherit_type="local" line="1214" name="CreateTime" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/Date.ecl" start="42661">
    <Type>transform</Type>
    <Params>
     <Param name="Hour"/>
     <Param name="Minute"/>
     <Param name="Second"/>
    </Params>
    <Return>time_rec</Return>
    <Signature sign="Time_rec CreateTime(UNSIGNED1 hour, UNSIGNED1 minute, UNSIGNED1 second)" name="CreateTime">Time_rec CreateTime(UNSIGNED1 hour, UNSIGNED1 minute, UNSIGNED1 second)</Signature><Documentation>
     <firstline>A transform to create a Time_rec from the individual elements</firstline><return>A transform that creates a Time_rec containing the time of day.</return><content>A transform to create a Time_rec from the individual elements</content><param><name>hour</name><desc>The hour (0-23).</desc></param><param><name>minute</name><desc>The minute (0-59).</desc></param><param><name>second</name><desc>The second (0-59).</desc></param></Documentation>
   </Definition>
   <Definition body="43112" end="43277" exported="1" fullname="date.createtimefromseconds" inherit_type="local" line="1228" name="CreateTimeFromSeconds" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/Date.ecl" start="43053">
    <Type>transform</Type>
    <Params>
     <Param name="seconds"/>
    </Params>
    <Return>time_rec</Return>
    <Signature sign="Time_rec CreateTimeFromSeconds(Seconds_t seconds)" name="CreateTimeFromSeconds">Time_rec CreateTimeFromSeconds(Seconds_t seconds)</Signature><Documentation>
     <firstline>A transform to create a Time_rec from a Seconds_t value</firstline><return>A transform that creates a Time_rec containing the time of day.</return><content>A transform to create a Time_rec from a Seconds_t value.</content><param><name>seconds</name><desc>The number seconds since epoch.</desc></param></Documentation>
   </Definition>
   <Definition body="44049" end="44210" exported="1" fullname="date.createdatetime" inherit_type="local" line="1250" name="CreateDateTime" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/Date.ecl" start="43738">
    <Type>transform</Type>
    <Params>
     <Param name="Year"/>
     <Param name="Month"/>
     <Param name="Day"/>
     <Param name="Hour"/>
     <Param name="Minute"/>
     <Param name="Second"/>
    </Params>
    <Return>datetime_rec</Return>
    <Signature sign="DateTime_rec CreateDateTime(INTEGER2 year,&#10;                                   UNSIGNED1 month,&#10;                                   UNSIGNED1 day,&#10;                                   UNSIGNED1 hour,&#10;                                   UNSIGNED1 minute,&#10;                                   UNSIGNED1 second)" name="CreateDateTime">DateTime_rec CreateDateTime(INTEGER2 year,
                                   UNSIGNED1 month,
                                   UNSIGNED1 day,
                                   UNSIGNED1 hour,
                                   UNSIGNED1 minute,
                                   UNSIGNED1 second)</Signature><Documentation>
     <firstline>A transform to create a DateTime_rec from the individual elements</firstline><return>A transform that creates a DateTime_rec containing date and time components.</return><content>A transform to create a DateTime_rec from the individual elements</content><param><name>year</name><desc>The year</desc></param><param><name>month</name><desc>The month (1-12).</desc></param><param><name>day</name><desc>The day (1..daysInMonth).</desc></param><param><name>hour</name><desc>The hour (0-23).</desc></param><param><name>minute</name><desc>The minute (0-59).</desc></param><param><name>second</name><desc>The second (0-59).</desc></param></Documentation>
   </Definition>
   <Definition body="44537" end="44801" exported="1" fullname="date.createdatetimefromseconds" inherit_type="local" line="1273" name="CreateDateTimeFromSeconds" source="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/Date.ecl" start="44470">
    <Type>transform</Type>
    <Params>
     <Param name="seconds"/>
    </Params>
    <Return>datetime_rec</Return>
    <Signature sign="DateTime_rec CreateDateTimeFromSeconds(Seconds_t seconds)" name="CreateDateTimeFromSeconds">DateTime_rec CreateDateTimeFromSeconds(Seconds_t seconds)</Signature><Documentation>
     <firstline>A transform to create a DateTime_rec from a Seconds_t value</firstline><return>A transform that creates a DateTime_rec containing date and time components.</return><content>A transform to create a DateTime_rec from a Seconds_t value.</content><param><name>seconds</name><desc>The number seconds since epoch.</desc></param></Documentation>
   </Definition>
   <Signature sign="Date" name="Date">Date</Signature><Parents/>
  </Definition>
  <Import body="0" end="334" inherit_type="local" line="7" name="StringLib" start="334">
   <Type>attribute</Type>
  </Import>
  <Import body="0" end="366" inherit_type="local" line="8" name="TimeLib" start="366">
   <Type>attribute</Type>
  </Import>
 <Documentation><content> </content></Documentation></Source>
 <Depends sourcePath="lib_timelib" target="lib_timelib"/><Depends sourcePath="lib_stringlib" target="lib_stringlib"/></Meta>