IMPORTS
=======


lib_fileservices <lib_fileservices/pkg.toc.txt>

DESCRIPTIONS
============

----------------------------------------------------------------------------------------------------------------------------------
MODULE : File
----------------------------------------------------------------------------------------------------------------------------------

No Documentation Found

  | ----------------------------------------------------------------------------------------------------------------------------------
  | RECORD : FsFilenameRecord
  | ----------------------------------------------------------------------------------------------------------------------------------
  | 
  | A record containing information about filename. Includes name, size and
  | when last modified. export FsFilenameRecord := RECORD string name; integer8
  | size; string19 modified; END;
  | 
  | Field : size INTEGER8 --- No Doc
  | 
  | Field : name STRING --- No Doc
  | 
  | Field : modified STRING19 --- No Doc
  | 
  | ----------------------------------------------------------------------------------------------------------------------------------
  | ATTRIBUTE : FsLogicalFileName
  | ----------------------------------------------------------------------------------------------------------------------------------
  | 
  | An alias for a logical filename that is stored in a row.
  | 
  | Return : STRING
  | 
  | ----------------------------------------------------------------------------------------------------------------------------------
  | RECORD : FsLogicalFileNameRecord
  | ----------------------------------------------------------------------------------------------------------------------------------
  | 
  | A record containing a logical filename. It contains the following fields:
  | 
  | Field : name STRING --- The logical name of the file;
  | 
  | ----------------------------------------------------------------------------------------------------------------------------------
  | RECORD : FsLogicalFileInfoRecord
  | ----------------------------------------------------------------------------------------------------------------------------------
  | 
  | A record containing information about a logical file.
  | 
  | Field : size INTEGER8 --- Number of bytes in the file (before
  |              compression)
  | 
  | Field : superfile BOOLEAN --- Is this a superfile?
  | 
  | Field : rowcount INTEGER8 --- Number of rows in the file.
  | 
  | Field : name STRING --- No Doc
  | 
  | Field : owner STRING --- No Doc
  | 
  | Field : modified STRING19 --- No Doc
  | 
  | Field : cluster STRING --- No Doc
  | 
  | ----------------------------------------------------------------------------------------------------------------------------------
  | RECORD : FsLogicalSuperSubRecord
  | ----------------------------------------------------------------------------------------------------------------------------------
  | 
  | A record containing information about a superfile and its contents.
  | 
  | Field : subname STRING --- The name of the sub-file
  | 
  | Field : supername STRING --- The name of the superfile
  | 
  | ----------------------------------------------------------------------------------------------------------------------------------
  | RECORD : FsFileRelationshipRecord
  | ----------------------------------------------------------------------------------------------------------------------------------
  | 
  | A record containing information about the relationship between two files.
  | 
  | Field : payload BOOLEAN --- Indicates whether the primary or
  |                 secondary are payload INDEXes.
  | 
  | Field : primaryfile STRING --- The logical filename of the primary
  |                     file
  | 
  | Field : primaryflds STRING --- The name of the primary key field for
  |                     the primary file. The value "__fileposition__"
  |                     indicates the secondary is an INDEX that must use
  |                     FETCH to access non-keyed fields.
  | 
  | Field : secondaryfile STRING --- The logical filename of the secondary
  |                       file.
  | 
  | Field : kind STRING --- The type of relationship between the
  |              primary and secondary files. Containing either
  |              'link' or 'view'.
  | 
  | Field : secondaryflds STRING --- The name of the foreign key field
  |                       relating to the primary file.
  | 
  | Field : cardinality STRING --- The cardinality of the relationship.
  |                     The format is <primary>:<secondary>. Valid values
  |                     are "1" or "M".</secondary></primary>
  | 
  | Field : description STRING --- The description of the relationship.
  | 
  | ----------------------------------------------------------------------------------------------------------------------------------
  | ATTRIBUTE : RECFMV_RECSIZE
  | ----------------------------------------------------------------------------------------------------------------------------------
  | 
  | Constant that indicates IBM RECFM V format file. Can be passed to
  | SprayFixed for the record size.
  | 
  | Return : INTEGER4
  | 
  | ----------------------------------------------------------------------------------------------------------------------------------
  | ATTRIBUTE : RECFMVB_RECSIZE
  | ----------------------------------------------------------------------------------------------------------------------------------
  | 
  | Constant that indicates IBM RECFM VB format file. Can be passed to
  | SprayFixed for the record size.
  | 
  | Return : INTEGER4
  | 
  | ----------------------------------------------------------------------------------------------------------------------------------
  | ATTRIBUTE : INTEGER4 PREFIX_VARIABLE_RECSIZE
  | ----------------------------------------------------------------------------------------------------------------------------------
  | 
  | Constant that indicates a variable little endian 4 byte length prefixed
  | file. Can be passed to SprayFixed for the record size.
  | 
  | Return : INTEGER4
  | 
  | ----------------------------------------------------------------------------------------------------------------------------------
  | ATTRIBUTE : INTEGER4 PREFIX_VARIABLE_BIGENDIAN_RECSIZE
  | ----------------------------------------------------------------------------------------------------------------------------------
  | 
  | Constant that indicates a variable big endian 4 byte length prefixed file.
  | Can be passed to SprayFixed for the record size.
  | 
  | Return : INTEGER4
  | 
  | ----------------------------------------------------------------------------------------------------------------------------------
  | FUNCTION : boolean FileExists(varstring lfn, boolean physical=FALSE)
  | ----------------------------------------------------------------------------------------------------------------------------------
  | 
  | Returns whether the file exists.
  | 
  | Parameter : lfn VARSTRING --- The logical name of the file.
  | 
  | Parameter : physical BOOLEAN --- Whether to also check for the physical
  |                      existence on disk. Defaults to FALSE.
  | 
  | Return : BOOLEAN Whether the file exists.
  | 
  | ----------------------------------------------------------------------------------------------------------------------------------
  | FUNCTION : DeleteLogicalFile(varstring lfn, boolean allowMissing=FALSE)
  | ----------------------------------------------------------------------------------------------------------------------------------
  | 
  | Removes the logical file from the system, and deletes from the disk.
  | 
  | Parameter : lfn VARSTRING --- The logical name of the file.
  | 
  | Parameter : allowMissing BOOLEAN --- Whether to suppress an error if the
  |                          filename does not exist. Defaults to FALSE.
  | 
  | Return : 
  | 
  | ----------------------------------------------------------------------------------------------------------------------------------
  | FUNCTION : SetReadOnly(varstring lfn, boolean ro=TRUE)
  | ----------------------------------------------------------------------------------------------------------------------------------
  | 
  | Changes whether access to a file is read only or not.
  | 
  | Parameter : ro BOOLEAN --- Whether updates to the file are
  |                disallowed. Defaults to TRUE.
  | 
  | Parameter : lfn VARSTRING --- The logical name of the file.
  | 
  | Return : 
  | 
  | ----------------------------------------------------------------------------------------------------------------------------------
  | FUNCTION : RenameLogicalFile(varstring oldname, varstring newname)
  | ----------------------------------------------------------------------------------------------------------------------------------
  | 
  | Changes the name of a logical file.
  | 
  | Parameter : newname VARSTRING --- The new logical name of the file.
  | 
  | Parameter : oldname VARSTRING --- The current name of the file to be
  |                     renamed.
  | 
  | Return : 
  | 
  | ----------------------------------------------------------------------------------------------------------------------------------
  | FUNCTION : varstring ForeignLogicalFileName(varstring name, varstring foreigndali='', boolean
  |                                            abspath=FALSE)
  | ----------------------------------------------------------------------------------------------------------------------------------
  | 
  | Returns a logical filename that can be used to refer to a logical file in a
  | local or remote dali.
  | 
  | Parameter : foreigndali VARSTRING --- The IP address of the foreign dali
  |                         used to resolve the file. If blank then the file
  |                         is resolved locally. Defaults to blank.
  | 
  | Parameter : name VARSTRING --- The logical name of the file.
  | 
  | Parameter : abspath BOOLEAN --- Should a tilde (~) be prepended to the
  |                     resulting logical file name. Defaults to FALSE.
  | 
  | Return : VARSTRING
  | 
  | ----------------------------------------------------------------------------------------------------------------------------------
  | FUNCTION : varstring ExternalLogicalFileName(varstring location, varstring path, boolean
  |                                             abspath=TRUE)
  | ----------------------------------------------------------------------------------------------------------------------------------
  | 
  | Returns an encoded logical filename that can be used to refer to a external
  | file. Examples include directly reading from a landing zone. Upper case
  | characters and other details are escaped.
  | 
  | Parameter : location VARSTRING --- The IP address of the remote
  |                      machine. '.' can be used for the local machine.
  | 
  | Parameter : path VARSTRING --- The path/name of the file on the
  |                  remote machine.
  | 
  | Parameter : abspath BOOLEAN --- Should a tilde (~) be prepended to the
  |                     resulting logical file name. Defaults to TRUE.
  | 
  | Return : VARSTRING The encoded logical filename.
  | 
  | ----------------------------------------------------------------------------------------------------------------------------------
  | FUNCTION : varstring GetFileDescription(varstring lfn)
  | ----------------------------------------------------------------------------------------------------------------------------------
  | 
  | Returns a string containing the description information associated with the
  | specified filename. This description is set either through ECL watch or by
  | using the FileServices.SetFileDescription function.
  | 
  | Parameter : lfn VARSTRING --- The logical name of the file.
  | 
  | Return : VARSTRING
  | 
  | ----------------------------------------------------------------------------------------------------------------------------------
  | FUNCTION : SetFileDescription(varstring lfn, varstring val)
  | ----------------------------------------------------------------------------------------------------------------------------------
  | 
  | Sets the description associated with the specified filename.
  | 
  | Parameter : val VARSTRING --- The description to be associated
  |                 with the file.
  | 
  | Parameter : lfn VARSTRING --- The logical name of the file.
  | 
  | Return : 
  | 
  | ----------------------------------------------------------------------------------------------------------------------------------
  | FUNCTION : dataset(FsFilenameRecord) RemoteDirectory(varstring machineIP, varstring dir, varstring
  |                                                     mask='*', boolean recurse=FALSE)
  | ----------------------------------------------------------------------------------------------------------------------------------
  | 
  | Returns a dataset containing a list of files from the specified machineIP
  | and directory.
  | 
  | Parameter : mask VARSTRING --- The filemask specifying which files
  |                  to include in the result. Defaults to '*' (all
  |                  files).
  | 
  | Parameter : machineIP VARSTRING --- The IP address of the remote
  |                       machine.
  | 
  | Parameter : recurse BOOLEAN --- Whether to include files from
  |                     subdirectories under the directory. Defaults to
  |                     FALSE.
  | 
  | Parameter : directory  --- The path to the directory to read. This must
  |                       be in the appropriate format for the operating
  |                       system running on the remote machine.
  | 
  | Parameter : dir VARSTRING --- No Doc
  | 
  | Return : TABLE ( FsFilenameRecord )
  | 
  | ----------------------------------------------------------------------------------------------------------------------------------
  | FUNCTION : dataset(FsLogicalFileInfoRecord) LogicalFileList(varstring namepattern='*', boolean
  |                                                            includenormal=TRUE, boolean includesuper=FALSE, boolean unknownszero=FALSE, varstring
  |                                                            foreigndali='')
  | ----------------------------------------------------------------------------------------------------------------------------------
  | 
  | Returns a dataset of information about the logical files known to the
  | system.
  | 
  | Parameter : unknownszero BOOLEAN --- Whether to set file sizes that are
  |                          unknown to zero(0) instead of minus-one (-1).
  |                          Defaults to FALSE.
  | 
  | Parameter : namepattern VARSTRING --- The mask of the files to list.
  |                         Defaults to '*' (all files).
  | 
  | Parameter : foreigndali VARSTRING --- The IP address of the foreign dali
  |                         used to resolve the file. If blank then the file
  |                         is resolved locally. Defaults to blank.
  | 
  | Parameter : includesuper BOOLEAN --- Whether to include SuperFiles.
  |                          Defaults to FALSE.
  | 
  | Parameter : includenormal BOOLEAN --- Whether to include 'normal' files.
  |                           Defaults to TRUE.
  | 
  | Return : TABLE ( FsLogicalFileInfoRecord )
  | 
  | ----------------------------------------------------------------------------------------------------------------------------------
  | FUNCTION : INTEGER4 CompareFiles(varstring lfn1, varstring lfn2, boolean logical_only=TRUE, boolean
  |                                 use_crcs=FALSE)
  | ----------------------------------------------------------------------------------------------------------------------------------
  | 
  | Compares two files, and returns a result indicating how well they match.
  | 
  | Parameter : logical_only BOOLEAN --- Whether to only compare logical
  |                          information in the system datastore (Dali), and
  |                          ignore physical information on disk. [Default
  |                          TRUE]
  | 
  | Parameter : file1  --- The logical name of the first file.
  | 
  | Parameter : file2  --- The logical name of the second file.
  | 
  | Parameter : use_crcs BOOLEAN --- Whether to compare physical CRCs of
  |                      all the parts on disk. This may be slow on large
  |                      files. Defaults to FALSE.
  | 
  | Parameter : lfn2 VARSTRING --- No Doc
  | 
  | Parameter : lfn1 VARSTRING --- No Doc
  | 
  | Return : INTEGER4 0 if file1 and file2 match exactly 1 if
  |          file1 and file2 contents match, but file1 is newer
  |          than file2 -1 if file1 and file2 contents match,
  |          but file2 is newer than file1 2 if file1 and file2
  |          contents do not match and file1 is newer than
  |          file2 -2 if file1 and file2 contents do not match
  |          and file2 is newer than file1
  | 
  | ----------------------------------------------------------------------------------------------------------------------------------
  | FUNCTION : varstring VerifyFile(varstring lfn, boolean usecrcs)
  | ----------------------------------------------------------------------------------------------------------------------------------
  | 
  | Checks the system datastore (Dali) information for the file against the
  | physical parts on disk.
  | 
  | Parameter : use_crcs  --- Whether to compare physical CRCs of all the
  |                      parts on disk. This may be slow on large files.
  | 
  | Parameter : lfn VARSTRING --- The name of the file to check.
  | 
  | Parameter : usecrcs BOOLEAN --- No Doc
  | 
  | Return : VARSTRING 'OK' - The file parts match the
  |          datastore information 'Could not find file:
  |          <filename>' - The logical filename was not found
  |          'Could not find part file: <partname>' - The
  |          partname was not found 'Modified time differs for:
  |          <partname>' - The partname has a different
  |          timestamp 'File size differs for: <partname>' -
  |          The partname has a file size 'File CRC differs
  |          for: <partname>' - The partname has a different CR
  |          C</partname></partname></partname></partname></fil
  |          ename>
  | 
  | ----------------------------------------------------------------------------------------------------------------------------------
  | FUNCTION : AddFileRelationship(varstring primary, varstring secondary, varstring primaryflds,
  |                               varstring secondaryflds, varstring kind='link', varstring cardinality, boolean payload,
  |                               varstring description='')
  | ----------------------------------------------------------------------------------------------------------------------------------
  | 
  | Defines the relationship between two files. These may be DATASETs or
  | INDEXes. Each record in the primary file should be uniquely defined by the
  | primaryfields (ideally), preferably efficiently. This information is used
  | by the roxie browser to link files together.
  | 
  | Parameter : primaryfields  --- The name of the primary key field for the
  |                           primary file. The value "__fileposition__"
  |                           indicates the secondary is an INDEX that must use
  |                           FETCH to access non-keyed fields.
  | 
  | Parameter : payload BOOLEAN --- Indicates whether the primary or
  |                     secondary are payload INDEXes.
  | 
  | Parameter : description VARSTRING --- The description of the relationship.
  | 
  | Parameter : secondary VARSTRING --- The logical filename of the
  |                       secondary file.
  | 
  | Parameter : cardinality VARSTRING --- The cardinality of the relationship.
  |                         The format is <primary>:<secondary>. Valid values
  |                         are "1" or "M".</secondary></primary>
  | 
  | Parameter : relationship  --- The type of relationship between the primary
  |                          and secondary files. Containing either 'link' or
  |                          'view'. Default is "link".
  | 
  | Parameter : secondaryfields  --- The name of the foreign key field relating to
  |                             the primary file.
  | 
  | Parameter : primary VARSTRING --- The logical filename of the primary
  |                     file.
  | 
  | Parameter : primaryflds VARSTRING --- No Doc
  | 
  | Parameter : kind VARSTRING --- No Doc
  | 
  | Parameter : secondaryflds VARSTRING --- No Doc
  | 
  | Return : 
  | 
  | ----------------------------------------------------------------------------------------------------------------------------------
  | FUNCTION : dataset(FsFileRelationshipRecord) FileRelationshipList(varstring primary, varstring
  |                                                                  secondary, varstring primflds='', varstring secondaryflds='', varstring kind='link')
  | ----------------------------------------------------------------------------------------------------------------------------------
  | 
  | Returns a dataset of relationships. The return records are structured in
  | the FsFileRelationshipRecord format.
  | 
  | Parameter : primaryfields  --- The name of the primary key field for the
  |                           primary file.
  | 
  | Parameter : relationship  --- The type of relationship between the primary
  |                          and secondary files. Containing either 'link' or
  |                          'view'. Default is "link".
  | 
  | Parameter : secondaryfields  --- The name of the foreign key field relating to
  |                             the primary file.
  | 
  | Parameter : primary VARSTRING --- The logical filename of the primary
  |                     file.
  | 
  | Parameter : secondary VARSTRING --- The logical filename of the
  |                       secondary file.
  | 
  | Parameter : secondaryflds VARSTRING --- No Doc
  | 
  | Parameter : primflds VARSTRING --- No Doc
  | 
  | Parameter : kind VARSTRING --- No Doc
  | 
  | Return : TABLE ( FsFileRelationshipRecord )
  | 
  | ----------------------------------------------------------------------------------------------------------------------------------
  | FUNCTION : RemoveFileRelationship(varstring primary, varstring secondary, varstring primaryflds='',
  |                                  varstring secondaryflds='', varstring kind='link')
  | ----------------------------------------------------------------------------------------------------------------------------------
  | 
  | Removes a relationship between two files.
  | 
  | Parameter : primaryfields  --- The name of the primary key field for the
  |                           primary file.
  | 
  | Parameter : relationship  --- The type of relationship between the primary
  |                          and secondary files. Containing either 'link' or
  |                          'view'. Default is "link".
  | 
  | Parameter : secondaryfields  --- The name of the foreign key field relating to
  |                             the primary file.
  | 
  | Parameter : primary VARSTRING --- The logical filename of the primary
  |                     file.
  | 
  | Parameter : secondary VARSTRING --- The logical filename of the
  |                       secondary file.
  | 
  | Parameter : secondaryflds VARSTRING --- No Doc
  | 
  | Parameter : kind VARSTRING --- No Doc
  | 
  | Parameter : primaryflds VARSTRING --- No Doc
  | 
  | Return : 
  | 
  | ----------------------------------------------------------------------------------------------------------------------------------
  | FUNCTION : varstring GetColumnMapping(varstring lfn)
  | ----------------------------------------------------------------------------------------------------------------------------------
  | 
  | Returns the field mappings for the file, in the same format specified for
  | the SetColumnMapping function.
  | 
  | Parameter : lfn VARSTRING --- The logical filename of the primary
  |                 file.
  | 
  | Return : VARSTRING
  | 
  | ----------------------------------------------------------------------------------------------------------------------------------
  | FUNCTION : SetColumnMapping(varstring lfn, varstring mapping)
  | ----------------------------------------------------------------------------------------------------------------------------------
  | 
  | Defines how the data in the fields of the file mist be transformed between
  | the actual data storage format and the input format used to query that
  | data. This is used by the user interface of the roxie browser.
  | 
  | Parameter : mapping VARSTRING --- A string containing a comma
  |                     separated list of field mappings.
  | 
  | Parameter : lfn VARSTRING --- The logical filename of the primary
  |                 file.
  | 
  | Return : 
  | 
  | ----------------------------------------------------------------------------------------------------------------------------------
  | FUNCTION : varstring EncodeRfsQuery(varstring server, varstring query)
  | ----------------------------------------------------------------------------------------------------------------------------------
  | 
  | Returns a string that can be used in a DATASET declaration to read data
  | from an RFS (Remote File Server) instance (e.g. rfsmysql) on another node.
  | 
  | Parameter : query VARSTRING --- The text of the query to send to the
  |                   server
  | 
  | Parameter : server VARSTRING --- A string containing the ip:port
  |                    address for the remote file server.
  | 
  | Return : VARSTRING
  | 
  | ----------------------------------------------------------------------------------------------------------------------------------
  | FUNCTION : RfsAction(varstring server, varstring query)
  | ----------------------------------------------------------------------------------------------------------------------------------
  | 
  | Sends the query to the rfs server.
  | 
  | Parameter : query VARSTRING --- The text of the query to send to the
  |                   server
  | 
  | Parameter : server VARSTRING --- A string containing the ip:port
  |                    address for the remote file server.
  | 
  | Return : 
  | 
  | ----------------------------------------------------------------------------------------------------------------------------------
  | FUNCTION : MoveExternalFile(varstring location, varstring frompath, varstring topath)
  | ----------------------------------------------------------------------------------------------------------------------------------
  | 
  | Moves the single physical file between two locations on the same remote
  | machine. The dafileserv utility program must be running on the location
  | machine.
  | 
  | Parameter : location VARSTRING --- The IP address of the remote
  |                      machine.
  | 
  | Parameter : frompath VARSTRING --- The path/name of the file to move.
  | 
  | Parameter : topath VARSTRING --- The path/name of the target file.
  | 
  | Return : 
  | 
  | ----------------------------------------------------------------------------------------------------------------------------------
  | FUNCTION : DeleteExternalFile(varstring location, varstring path)
  | ----------------------------------------------------------------------------------------------------------------------------------
  | 
  | Removes a single physical file from a remote machine. The dafileserv
  | utility program must be running on the location machine.
  | 
  | Parameter : location VARSTRING --- The IP address of the remote
  |                      machine.
  | 
  | Parameter : path VARSTRING --- The path/name of the file to remove.
  | 
  | Return : 
  | 
  | ----------------------------------------------------------------------------------------------------------------------------------
  | FUNCTION : CreateExternalDirectory(varstring location, varstring path)
  | ----------------------------------------------------------------------------------------------------------------------------------
  | 
  | Creates the path on the location (if it does not already exist). The
  | dafileserv utility program must be running on the location machine.
  | 
  | Parameter : location VARSTRING --- The IP address of the remote
  |                      machine.
  | 
  | Parameter : path VARSTRING --- The path/name of the file to remove.
  | 
  | Return : 
  | 
  | ----------------------------------------------------------------------------------------------------------------------------------
  | FUNCTION : varstring GetLogicalFileAttribute(varstring lfn, varstring attrname)
  | ----------------------------------------------------------------------------------------------------------------------------------
  | 
  | Returns the value of the given attribute for the specified logicalfilename.
  | 
  | Parameter : attrname VARSTRING --- The name of the file attribute to
  |                      return.
  | 
  | Parameter : lfn VARSTRING --- The name of the logical file.
  | 
  | Return : VARSTRING
  | 
  | ----------------------------------------------------------------------------------------------------------------------------------
  | FUNCTION : ProtectLogicalFile(varstring lfn, boolean value=TRUE)
  | ----------------------------------------------------------------------------------------------------------------------------------
  | 
  | Toggles protection on and off for the specified logicalfilename.
  | 
  | Parameter : lfn VARSTRING --- The name of the logical file.
  | 
  | Parameter : value BOOLEAN --- TRUE to enable protection, FALSE to
  |                   disable.
  | 
  | Return : 
  | 
  | ----------------------------------------------------------------------------------------------------------------------------------
  | FUNCTION : DfuPlusExec(varstring cmdline)
  | ----------------------------------------------------------------------------------------------------------------------------------
  | 
  | The DfuPlusExec action executes the specified command line just as the
  | DfuPLus.exe program would do. This allows you to have all the functionality
  | of the DfuPLus.exe program available within your ECL code. param cmdline
  | The DFUPlus.exe command line to execute. The valid arguments are documented
  | in the Client Tools manual, in the section describing the DfuPlus.exe
  | program.
  | 
  | Parameter : cmdline VARSTRING --- No Doc
  | 
  | Return : 
  | 
  | ----------------------------------------------------------------------------------------------------------------------------------
  | FUNCTION : varstring fSprayFixed(varstring sourceIP, varstring sourcePath, integer4 recordSize,
  |                                 varstring destinationGroup, varstring destinationLogicalName, integer4 timeOut=-1,
  |                                 varstring espServerIpPort=GETENV('ws_fs_server'), integer4 maxConnections=-1, boolean
  |                                 allowOverwrite=FALSE, boolean replicate=FALSE, boolean compress=FALSE, boolean
  |                                 failIfNoSourceFile=FALSE, integer4 expireDays=-1)
  | ----------------------------------------------------------------------------------------------------------------------------------
  | 
  | Sprays a file of fixed length records from a single machine and distributes
  | it across the nodes of the destination group.
  | 
  | Parameter : destinationLogicalName VARSTRING --- The logical name of the file to
  |                                    create.
  | 
  | Parameter : expireDays INTEGER4 --- Number of days to auto-remove file.
  |                        Default is -1, not expire.
  | 
  | Parameter : espServerIpPort VARSTRING --- The url of the ESP file copying
  |                             service. Defaults to the value of ws_fs_server in
  |                             the environment.
  | 
  | Parameter : recordsize INTEGER4 --- The size (in bytes) of the records in
  |                        the file.
  | 
  | Parameter : sourcePath VARSTRING --- The path and name of the file.
  | 
  | Parameter : timeOut INTEGER4 --- The time in ms to wait for the
  |                     operation to complete. A value of 0 causes the
  |                     call to return immediately. Defaults to no timeout
  |                     (-1).
  | 
  | Parameter : compress BOOLEAN --- Whether to compress the new file.
  |                      Defaults to FALSE.
  | 
  | Parameter : sourceIP VARSTRING --- The IP address of the file.
  | 
  | Parameter : replicate BOOLEAN --- Whether to replicate the new file.
  |                       Defaults to FALSE.
  | 
  | Parameter : destinationGroup VARSTRING --- The name of the group to distribute
  |                              the file across.
  | 
  | Parameter : maxConnections INTEGER4 --- The maximum number of target nodes to
  |                            write to concurrently. Defaults to 1.
  | 
  | Parameter : failIfNoSourceFile BOOLEAN --- If TRUE it causes a missing source
  |                                file to trigger a failure. Defaults to FALSE.
  | 
  | Parameter : allowOverwrite BOOLEAN --- Is it valid to overwrite an existing
  |                            file of the same name? Defaults to FALSE
  | 
  | Return : VARSTRING The DFU workunit id for the job.
  | 
  | ----------------------------------------------------------------------------------------------------------------------------------
  | FUNCTION : SprayFixed(varstring sourceIP, varstring sourcePath, integer4 recordSize, varstring
  |                      destinationGroup, varstring destinationLogicalName, integer4 timeOut=-1, varstring
  |                      espServerIpPort=GETENV('ws_fs_server'), integer4 maxConnections=-1, boolean
  |                      allowOverwrite=FALSE, boolean replicate=FALSE, boolean compress=FALSE, boolean
  |                      failIfNoSourceFile=FALSE, integer4 expireDays=-1)
  | ----------------------------------------------------------------------------------------------------------------------------------
  | 
  | Same as fSprayFixed, but does not return the DFU Workunit ID.
  | 
  | Parameter : sourceip VARSTRING --- No Doc
  | 
  | Parameter : recordsize INTEGER4 --- No Doc
  | 
  | Parameter : expiredays INTEGER4 --- No Doc
  | 
  | Parameter : failifnosourcefile BOOLEAN --- No Doc
  | 
  | Parameter : timeout INTEGER4 --- No Doc
  | 
  | Parameter : maxconnections INTEGER4 --- No Doc
  | 
  | Parameter : compress BOOLEAN --- No Doc
  | 
  | Parameter : sourcepath VARSTRING --- No Doc
  | 
  | Parameter : allowoverwrite BOOLEAN --- No Doc
  | 
  | Parameter : replicate BOOLEAN --- No Doc
  | 
  | Parameter : espserveripport VARSTRING --- No Doc
  | 
  | Parameter : destinationlogicalname VARSTRING --- No Doc
  | 
  | Parameter : destinationgroup VARSTRING --- No Doc
  | 
  | Return : 
  | 
  | See : fSprayFixed
  | 
  | ----------------------------------------------------------------------------------------------------------------------------------
  | FUNCTION : varstring fSprayVariable(varstring sourceIP, varstring sourcePath, integer4
  |                                    sourceMaxRecordSize=8192, varstring sourceCsvSeparate='\\,', varstring
  |                                    sourceCsvTerminate='\\n,\\r\\n', varstring sourceCsvQuote='\"', varstring
  |                                    destinationGroup, varstring destinationLogicalName, integer4 timeOut=-1, varstring
  |                                    espServerIpPort=GETENV('ws_fs_server'), integer4 maxConnections=-1, boolean
  |                                    allowOverwrite=FALSE, boolean replicate=FALSE, boolean compress=FALSE, varstring
  |                                    sourceCsvEscape='', boolean failIfNoSourceFile=FALSE, boolean
  |                                    recordStructurePresent=FALSE, boolean quotedTerminator=TRUE, varstring encoding='ascii',
  |                                    integer4 expireDays=-1)
  | ----------------------------------------------------------------------------------------------------------------------------------
  | 
  | No Documentation Found
  | 
  | Parameter : sourceip VARSTRING --- No Doc
  | 
  | Parameter : quotedterminator BOOLEAN --- No Doc
  | 
  | Parameter : destinationgroup VARSTRING --- No Doc
  | 
  | Parameter : failifnosourcefile BOOLEAN --- No Doc
  | 
  | Parameter : sourcemaxrecordsize INTEGER4 --- No Doc
  | 
  | Parameter : sourcecsvseparate VARSTRING --- No Doc
  | 
  | Parameter : encoding VARSTRING --- No Doc
  | 
  | Parameter : sourcecsvquote VARSTRING --- No Doc
  | 
  | Parameter : maxconnections INTEGER4 --- No Doc
  | 
  | Parameter : sourcecsvescape VARSTRING --- No Doc
  | 
  | Parameter : recordstructurepresent BOOLEAN --- No Doc
  | 
  | Parameter : compress BOOLEAN --- No Doc
  | 
  | Parameter : sourcepath VARSTRING --- No Doc
  | 
  | Parameter : allowoverwrite BOOLEAN --- No Doc
  | 
  | Parameter : replicate BOOLEAN --- No Doc
  | 
  | Parameter : expiredays INTEGER4 --- No Doc
  | 
  | Parameter : espserveripport VARSTRING --- No Doc
  | 
  | Parameter : sourcecsvterminate VARSTRING --- No Doc
  | 
  | Parameter : destinationlogicalname VARSTRING --- No Doc
  | 
  | Parameter : timeout INTEGER4 --- No Doc
  | 
  | Return : VARSTRING
  | 
  | ----------------------------------------------------------------------------------------------------------------------------------
  | FUNCTION : SprayVariable(varstring sourceIP, varstring sourcePath, integer4
  |                         sourceMaxRecordSize=8192, varstring sourceCsvSeparate='\\,', varstring
  |                         sourceCsvTerminate='\\n,\\r\\n', varstring sourceCsvQuote='\"', varstring
  |                         destinationGroup, varstring destinationLogicalName, integer4 timeOut=-1, varstring
  |                         espServerIpPort=GETENV('ws_fs_server'), integer4 maxConnections=-1, boolean
  |                         allowOverwrite=FALSE, boolean replicate=FALSE, boolean compress=FALSE, varstring
  |                         sourceCsvEscape='', boolean failIfNoSourceFile=FALSE, boolean
  |                         recordStructurePresent=FALSE, boolean quotedTerminator=TRUE, varstring encoding='ascii',
  |                         integer4 expireDays=-1)
  | ----------------------------------------------------------------------------------------------------------------------------------
  | 
  | No Documentation Found
  | 
  | Parameter : sourceip VARSTRING --- No Doc
  | 
  | Parameter : quotedterminator BOOLEAN --- No Doc
  | 
  | Parameter : destinationgroup VARSTRING --- No Doc
  | 
  | Parameter : failifnosourcefile BOOLEAN --- No Doc
  | 
  | Parameter : sourcemaxrecordsize INTEGER4 --- No Doc
  | 
  | Parameter : sourcecsvseparate VARSTRING --- No Doc
  | 
  | Parameter : encoding VARSTRING --- No Doc
  | 
  | Parameter : sourcecsvquote VARSTRING --- No Doc
  | 
  | Parameter : maxconnections INTEGER4 --- No Doc
  | 
  | Parameter : sourcecsvescape VARSTRING --- No Doc
  | 
  | Parameter : recordstructurepresent BOOLEAN --- No Doc
  | 
  | Parameter : compress BOOLEAN --- No Doc
  | 
  | Parameter : sourcepath VARSTRING --- No Doc
  | 
  | Parameter : allowoverwrite BOOLEAN --- No Doc
  | 
  | Parameter : replicate BOOLEAN --- No Doc
  | 
  | Parameter : expiredays INTEGER4 --- No Doc
  | 
  | Parameter : espserveripport VARSTRING --- No Doc
  | 
  | Parameter : sourcecsvterminate VARSTRING --- No Doc
  | 
  | Parameter : destinationlogicalname VARSTRING --- No Doc
  | 
  | Parameter : timeout INTEGER4 --- No Doc
  | 
  | Return : 
  | 
  | ----------------------------------------------------------------------------------------------------------------------------------
  | FUNCTION : varstring fSprayDelimited(varstring sourceIP, varstring sourcePath, integer4
  |                                     sourceMaxRecordSize=8192, varstring sourceCsvSeparate='\\,', varstring
  |                                     sourceCsvTerminate='\\n,\\r\\n', varstring sourceCsvQuote='\"', varstring
  |                                     destinationGroup, varstring destinationLogicalName, integer4 timeOut=-1, varstring
  |                                     espServerIpPort=GETENV('ws_fs_server'), integer4 maxConnections=-1, boolean
  |                                     allowOverwrite=FALSE, boolean replicate=FALSE, boolean compress=FALSE, varstring
  |                                     sourceCsvEscape='', boolean failIfNoSourceFile=FALSE, boolean
  |                                     recordStructurePresent=FALSE, boolean quotedTerminator=TRUE, varstring encoding='ascii',
  |                                     integer4 expireDays=-1)
  | ----------------------------------------------------------------------------------------------------------------------------------
  | 
  | Sprays a file of fixed delimited records from a single machine and
  | distributes it across the nodes of the destination group.
  | 
  | Parameter : destinationLogicalName VARSTRING --- The logical name of the file to
  |                                    create.
  | 
  | Parameter : expireDays INTEGER4 --- Number of days to auto-remove file.
  |                        Default is -1, not expire.
  | 
  | Parameter : sourceMaxRecordSize INTEGER4 --- The maximum size (in bytes) of the
  |                                 records in the file.
  | 
  | Parameter : espServerIpPort VARSTRING --- The url of the ESP file copying
  |                             service. Defaults to the value of ws_fs_server in
  |                             the environment.
  | 
  | Parameter : quotedTerminator BOOLEAN --- Can the terminator character be
  |                              included in a quoted field. Defaults to TRUE. If
  |                              FALSE it allows quicker partitioning of the file
  |                              (avoiding a complete file scan).
  | 
  | Parameter : sourcePath VARSTRING --- The path and name of the file.
  | 
  | Parameter : timeOut INTEGER4 --- The time in ms to wait for the
  |                     operation to complete. A value of 0 causes the
  |                     call to return immediately. Defaults to no timeout
  |                     (-1).
  | 
  | Parameter : compress BOOLEAN --- Whether to compress the new file.
  |                      Defaults to FALSE.
  | 
  | Parameter : sourceIP VARSTRING --- The IP address of the file.
  | 
  | Parameter : sourceCsvSeparate VARSTRING --- The character sequence which
  |                               separates fields in the file.
  | 
  | Parameter : replicate BOOLEAN --- Whether to replicate the new file.
  |                       Defaults to FALSE.
  | 
  | Parameter : sourceCsvTerminate VARSTRING --- The character sequence which
  |                                separates records in the file.
  | 
  | Parameter : destinationGroup VARSTRING --- The name of the group to distribute
  |                              the file across.
  | 
  | Parameter : recordStructurePresent BOOLEAN --- If TRUE derives the record structure
  |                                    from the header of the file.
  | 
  | Parameter : sourceCsvEscape VARSTRING --- A character that is used to escape
  |                             quote characters. Defaults to none.
  | 
  | Parameter : maxConnections INTEGER4 --- The maximum number of target nodes to
  |                            write to concurrently. Defaults to 1.
  | 
  | Parameter : failIfNoSourceFile BOOLEAN --- If TRUE it causes a missing source
  |                                file to trigger a failure. Defaults to FALSE.
  | 
  | Parameter : allowOverwrite BOOLEAN --- Is it valid to overwrite an existing
  |                            file of the same name? Defaults to FALSE
  | 
  | Parameter : sourceCsvQuote VARSTRING --- A string which can be used to
  |                            delimit fields in the file.
  | 
  | Parameter : encoding VARSTRING --- No Doc
  | 
  | Return : VARSTRING The DFU workunit id for the job.
  | 
  | ----------------------------------------------------------------------------------------------------------------------------------
  | FUNCTION : SprayDelimited(varstring sourceIP, varstring sourcePath, integer4
  |                          sourceMaxRecordSize=8192, varstring sourceCsvSeparate='\\,', varstring
  |                          sourceCsvTerminate='\\n,\\r\\n', varstring sourceCsvQuote='\"', varstring
  |                          destinationGroup, varstring destinationLogicalName, integer4 timeOut=-1, varstring
  |                          espServerIpPort=GETENV('ws_fs_server'), integer4 maxConnections=-1, boolean
  |                          allowOverwrite=FALSE, boolean replicate=FALSE, boolean compress=FALSE, varstring
  |                          sourceCsvEscape='', boolean failIfNoSourceFile=FALSE, boolean
  |                          recordStructurePresent=FALSE, boolean quotedTerminator=TRUE, const varstring
  |                          encoding='ascii', integer4 expireDays=-1)
  | ----------------------------------------------------------------------------------------------------------------------------------
  | 
  | Same as fSprayDelimited, but does not return the DFU Workunit ID.
  | 
  | Parameter : sourceip VARSTRING --- No Doc
  | 
  | Parameter : quotedterminator BOOLEAN --- No Doc
  | 
  | Parameter : destinationgroup VARSTRING --- No Doc
  | 
  | Parameter : failifnosourcefile BOOLEAN --- No Doc
  | 
  | Parameter : sourcemaxrecordsize INTEGER4 --- No Doc
  | 
  | Parameter : sourcecsvseparate VARSTRING --- No Doc
  | 
  | Parameter : encoding VARSTRING --- No Doc
  | 
  | Parameter : sourcecsvquote VARSTRING --- No Doc
  | 
  | Parameter : maxconnections INTEGER4 --- No Doc
  | 
  | Parameter : sourcecsvescape VARSTRING --- No Doc
  | 
  | Parameter : recordstructurepresent BOOLEAN --- No Doc
  | 
  | Parameter : compress BOOLEAN --- No Doc
  | 
  | Parameter : sourcepath VARSTRING --- No Doc
  | 
  | Parameter : allowoverwrite BOOLEAN --- No Doc
  | 
  | Parameter : replicate BOOLEAN --- No Doc
  | 
  | Parameter : expiredays INTEGER4 --- No Doc
  | 
  | Parameter : espserveripport VARSTRING --- No Doc
  | 
  | Parameter : sourcecsvterminate VARSTRING --- No Doc
  | 
  | Parameter : destinationlogicalname VARSTRING --- No Doc
  | 
  | Parameter : timeout INTEGER4 --- No Doc
  | 
  | Return : 
  | 
  | See : fSprayDelimited
  | 
  | ----------------------------------------------------------------------------------------------------------------------------------
  | FUNCTION : varstring fSprayXml(varstring sourceIP, varstring sourcePath, integer4
  |                               sourceMaxRecordSize=8192, varstring sourceRowTag, varstring sourceEncoding='utf8',
  |                               varstring destinationGroup, varstring destinationLogicalName, integer4 timeOut=-1,
  |                               varstring espServerIpPort=GETENV('ws_fs_server'), integer4 maxConnections=-1, boolean
  |                               allowOverwrite=FALSE, boolean replicate=FALSE, boolean compress=FALSE, boolean
  |                               failIfNoSourceFile=FALSE, integer4 expireDays=-1)
  | ----------------------------------------------------------------------------------------------------------------------------------
  | 
  | Sprays an xml file from a single machine and distributes it across the
  | nodes of the destination group.
  | 
  | Parameter : destinationLogicalName VARSTRING --- The logical name of the file to
  |                                    create.
  | 
  | Parameter : expireDays INTEGER4 --- Number of days to auto-remove file.
  |                        Default is -1, not expire.
  | 
  | Parameter : sourceMaxRecordSize INTEGER4 --- The maximum size (in bytes) of the
  |                                 records in the file.
  | 
  | Parameter : espServerIpPort VARSTRING --- The url of the ESP file copying
  |                             service. Defaults to the value of ws_fs_server in
  |                             the environment.
  | 
  | Parameter : sourceRowTag VARSTRING --- The xml tag that is used to delimit
  |                          records in the source file. (This tag cannot
  |                          recursivly nest.)
  | 
  | Parameter : sourcePath VARSTRING --- The path and name of the file.
  | 
  | Parameter : timeOut INTEGER4 --- The time in ms to wait for the
  |                     operation to complete. A value of 0 causes the
  |                     call to return immediately. Defaults to no timeout
  |                     (-1).
  | 
  | Parameter : compress BOOLEAN --- Whether to compress the new file.
  |                      Defaults to FALSE.
  | 
  | Parameter : sourceIP VARSTRING --- The IP address of the file.
  | 
  | Parameter : replicate BOOLEAN --- Whether to replicate the new file.
  |                       Defaults to FALSE.
  | 
  | Parameter : destinationGroup VARSTRING --- The name of the group to distribute
  |                              the file across.
  | 
  | Parameter : sourceEncoding VARSTRING --- The unicode encoding of the file.
  |                            (utf8,utf8n,utf16be,utf16le,utf32be,utf32le)
  | 
  | Parameter : maxConnections INTEGER4 --- The maximum number of target nodes to
  |                            write to concurrently. Defaults to 1.
  | 
  | Parameter : failIfNoSourceFile BOOLEAN --- If TRUE it causes a missing source
  |                                file to trigger a failure. Defaults to FALSE.
  | 
  | Parameter : allowOverwrite BOOLEAN --- Is it valid to overwrite an existing
  |                            file of the same name? Defaults to FALSE
  | 
  | Return : VARSTRING The DFU workunit id for the job.
  | 
  | ----------------------------------------------------------------------------------------------------------------------------------
  | FUNCTION : SprayXml(varstring sourceIP, varstring sourcePath, integer4 sourceMaxRecordSize=8192,
  |                    varstring sourceRowTag, varstring sourceEncoding='utf8', varstring destinationGroup,
  |                    varstring destinationLogicalName, integer4 timeOut=-1, varstring
  |                    espServerIpPort=GETENV('ws_fs_server'), integer4 maxConnections=-1, boolean
  |                    allowOverwrite=FALSE, boolean replicate=FALSE, boolean compress=FALSE, boolean
  |                    failIfNoSourceFile=FALSE, integer4 expireDays=-1)
  | ----------------------------------------------------------------------------------------------------------------------------------
  | 
  | Same as fSprayXml, but does not return the DFU Workunit ID.
  | 
  | Parameter : sourceip VARSTRING --- No Doc
  | 
  | Parameter : expiredays INTEGER4 --- No Doc
  | 
  | Parameter : failifnosourcefile BOOLEAN --- No Doc
  | 
  | Parameter : timeout INTEGER4 --- No Doc
  | 
  | Parameter : sourceencoding VARSTRING --- No Doc
  | 
  | Parameter : maxconnections INTEGER4 --- No Doc
  | 
  | Parameter : compress BOOLEAN --- No Doc
  | 
  | Parameter : sourcepath VARSTRING --- No Doc
  | 
  | Parameter : allowoverwrite BOOLEAN --- No Doc
  | 
  | Parameter : replicate BOOLEAN --- No Doc
  | 
  | Parameter : espserveripport VARSTRING --- No Doc
  | 
  | Parameter : destinationlogicalname VARSTRING --- No Doc
  | 
  | Parameter : sourcerowtag VARSTRING --- No Doc
  | 
  | Parameter : sourcemaxrecordsize INTEGER4 --- No Doc
  | 
  | Parameter : destinationgroup VARSTRING --- No Doc
  | 
  | Return : 
  | 
  | See : fSprayXml
  | 
  | ----------------------------------------------------------------------------------------------------------------------------------
  | FUNCTION : varstring fDespray(varstring logicalName, varstring destinationIP, varstring
  |                              destinationPath, integer4 timeOut=-1, varstring espServerIpPort=GETENV('ws_fs_server'),
  |                              integer4 maxConnections=-1, boolean allowOverwrite=FALSE)
  | ----------------------------------------------------------------------------------------------------------------------------------
  | 
  | Copies a distributed file from multiple machines, and desprays it to a
  | single file on a single machine.
  | 
  | Parameter : maxConnections INTEGER4 --- The maximum number of target nodes to
  |                            write to concurrently. Defaults to 1.
  | 
  | Parameter : espServerIpPort VARSTRING --- The url of the ESP file copying
  |                             service. Defaults to the value of ws_fs_server in
  |                             the environment.
  | 
  | Parameter : destinationPath VARSTRING --- The path of the file to create on
  |                             the destination machine.
  | 
  | Parameter : timeOut INTEGER4 --- The time in ms to wait for the
  |                     operation to complete. A value of 0 causes the
  |                     call to return immediately. Defaults to no timeout
  |                     (-1).
  | 
  | Parameter : logicalName VARSTRING --- The name of the file to despray.
  | 
  | Parameter : allowOverwrite BOOLEAN --- Is it valid to overwrite an existing
  |                            file of the same name? Defaults to FALSE
  | 
  | Parameter : destinationIP VARSTRING --- The IP of the target machine.
  | 
  | Return : VARSTRING The DFU workunit id for the job.
  | 
  | ----------------------------------------------------------------------------------------------------------------------------------
  | FUNCTION : Despray(varstring logicalName, varstring destinationIP, varstring destinationPath,
  |                   integer4 timeOut=-1, varstring espServerIpPort=GETENV('ws_fs_server'), integer4
  |                   maxConnections=-1, boolean allowOverwrite=FALSE)
  | ----------------------------------------------------------------------------------------------------------------------------------
  | 
  | Same as fDespray, but does not return the DFU Workunit ID.
  | 
  | Parameter : allowoverwrite BOOLEAN --- No Doc
  | 
  | Parameter : destinationpath VARSTRING --- No Doc
  | 
  | Parameter : espserveripport VARSTRING --- No Doc
  | 
  | Parameter : logicalname VARSTRING --- No Doc
  | 
  | Parameter : destinationip VARSTRING --- No Doc
  | 
  | Parameter : maxconnections INTEGER4 --- No Doc
  | 
  | Parameter : timeout INTEGER4 --- No Doc
  | 
  | Return : 
  | 
  | See : fDespray
  | 
  | ----------------------------------------------------------------------------------------------------------------------------------
  | FUNCTION : varstring fCopy(varstring sourceLogicalName, varstring destinationGroup, varstring
  |                           destinationLogicalName, varstring sourceDali='', integer4 timeOut=-1, varstring
  |                           espServerIpPort=GETENV('ws_fs_server'), integer4 maxConnections=-1, boolean
  |                           allowOverwrite=FALSE, boolean replicate=FALSE, boolean asSuperfile=FALSE, boolean
  |                           compress=FALSE, boolean forcePush=FALSE, integer4 transferBufferSize=0, boolean
  |                           preserveCompression=TRUE)
  | ----------------------------------------------------------------------------------------------------------------------------------
  | 
  | Copies a distributed file to another distributed file.
  | 
  | Parameter : sourceDali VARSTRING --- The dali that contains the source
  |                        file (blank implies same dali). Defaults to same
  |                        dali.
  | 
  | Parameter : espServerIpPort VARSTRING --- The url of the ESP file copying
  |                             service. Defaults to the value of ws_fs_server in
  |                             the environment.
  | 
  | Parameter : timeOut INTEGER4 --- The time in ms to wait for the
  |                     operation to complete. A value of 0 causes the
  |                     call to return immediately. Defaults to no timeout
  |                     (-1).
  | 
  | Parameter : compress BOOLEAN --- Whether to compress the new file.
  |                      Defaults to FALSE.
  | 
  | Parameter : asSuperfile BOOLEAN --- Should the file be copied as a
  |                         superfile? If TRUE and source is a superfile, then
  |                         the operation creates a superfile on the target,
  |                         creating sub-files as needed and only overwriting
  |                         existing sub-files whose content has changed. If
  |                         FALSE, a single file is created. Defaults to
  |                         FALSE.
  | 
  | Parameter : destinationLogicalName VARSTRING --- The logical name of the file to
  |                                    create.
  | 
  | Parameter : sourceLogicalName VARSTRING --- The name of the file to despray.
  | 
  | Parameter : transferBufferSize INTEGER4 --- Overrides the size (in bytes) of the
  |                                internal buffer used to copy the file. Default is
  |                                64k.
  | 
  | Parameter : replicate BOOLEAN --- Should the copied file also be
  |                       replicated on the destination? Defaults to FALSE
  | 
  | Parameter : destinationGroup VARSTRING --- The name of the group to distribute
  |                              the file across.
  | 
  | Parameter : maxConnections INTEGER4 --- The maximum number of target nodes to
  |                            write to concurrently. Defaults to 1.
  | 
  | Parameter : allowOverwrite BOOLEAN --- Is it valid to overwrite an existing
  |                            file of the same name? Defaults to FALSE
  | 
  | Parameter : forcePush BOOLEAN --- Should the copy process be executed on
  |                       the source nodes (push) or on the destination
  |                       nodes (pull)? Default is to pull.
  | 
  | Parameter : preservecompression BOOLEAN --- No Doc
  | 
  | Return : VARSTRING The DFU workunit id for the job.
  | 
  | ----------------------------------------------------------------------------------------------------------------------------------
  | FUNCTION : Copy(varstring sourceLogicalName, varstring destinationGroup, varstring
  |                destinationLogicalName, varstring sourceDali='', integer4 timeOut=-1, varstring
  |                espServerIpPort=GETENV('ws_fs_server'), integer4 maxConnections=-1, boolean
  |                allowOverwrite=FALSE, boolean replicate=FALSE, boolean asSuperfile=FALSE, boolean
  |                compress=FALSE, boolean forcePush=FALSE, integer4 transferBufferSize=0, boolean
  |                preserveCompression=TRUE)
  | ----------------------------------------------------------------------------------------------------------------------------------
  | 
  | Same as fCopy, but does not return the DFU Workunit ID.
  | 
  | Parameter : forcepush BOOLEAN --- No Doc
  | 
  | Parameter : timeout INTEGER4 --- No Doc
  | 
  | Parameter : transferbuffersize INTEGER4 --- No Doc
  | 
  | Parameter : sourcelogicalname VARSTRING --- No Doc
  | 
  | Parameter : assuperfile BOOLEAN --- No Doc
  | 
  | Parameter : maxconnections INTEGER4 --- No Doc
  | 
  | Parameter : sourcedali VARSTRING --- No Doc
  | 
  | Parameter : compress BOOLEAN --- No Doc
  | 
  | Parameter : allowoverwrite BOOLEAN --- No Doc
  | 
  | Parameter : replicate BOOLEAN --- No Doc
  | 
  | Parameter : espserveripport VARSTRING --- No Doc
  | 
  | Parameter : preservecompression BOOLEAN --- No Doc
  | 
  | Parameter : destinationlogicalname VARSTRING --- No Doc
  | 
  | Parameter : destinationgroup VARSTRING --- No Doc
  | 
  | Return : 
  | 
  | See : fCopy
  | 
  | ----------------------------------------------------------------------------------------------------------------------------------
  | FUNCTION : varstring fReplicate(varstring logicalName, integer4 timeOut=-1, varstring
  |                                espServerIpPort=GETENV('ws_fs_server'))
  | ----------------------------------------------------------------------------------------------------------------------------------
  | 
  | Ensures the specified file is replicated to its mirror copies.
  | 
  | Parameter : timeOut INTEGER4 --- The time in ms to wait for the
  |                     operation to complete. A value of 0 causes the
  |                     call to return immediately. Defaults to no timeout
  |                     (-1).
  | 
  | Parameter : espServerIpPort VARSTRING --- The url of the ESP file copying
  |                             service. Defaults to the value of ws_fs_server in
  |                             the environment.
  | 
  | Parameter : logicalName VARSTRING --- The name of the file to replicate.
  | 
  | Return : VARSTRING The DFU workunit id for the job.
  | 
  | ----------------------------------------------------------------------------------------------------------------------------------
  | FUNCTION : Replicate(varstring logicalName, integer4 timeOut=-1, varstring
  |                     espServerIpPort=GETENV('ws_fs_server'))
  | ----------------------------------------------------------------------------------------------------------------------------------
  | 
  | Same as fReplicated, but does not return the DFU Workunit ID.
  | 
  | Parameter : logicalname VARSTRING --- No Doc
  | 
  | Parameter : timeout INTEGER4 --- No Doc
  | 
  | Parameter : espserveripport VARSTRING --- No Doc
  | 
  | Return : 
  | 
  | See : fReplicate
  | 
  | ----------------------------------------------------------------------------------------------------------------------------------
  | FUNCTION : varstring fRemotePull(varstring remoteEspFsURL, varstring sourceLogicalName, varstring
  |                                 destinationGroup, varstring destinationLogicalName, integer4 timeOut=-1, integer4
  |                                 maxConnections=-1, boolean allowOverwrite=FALSE, boolean replicate=FALSE, boolean
  |                                 asSuperfile=FALSE, boolean forcePush=FALSE, integer4 transferBufferSize=0, boolean
  |                                 wrap=FALSE, boolean compress=FALSE)
  | ----------------------------------------------------------------------------------------------------------------------------------
  | 
  | Copies a distributed file to a distributed file on remote system. Similar
  | to fCopy, except the copy executes remotely. Since the DFU workunit
  | executes on the remote DFU server, the user name authentication must be the
  | same on both systems, and the user must have rights to copy files on both
  | systems.
  | 
  | Parameter : timeOut INTEGER4 --- The time in ms to wait for the
  |                     operation to complete. A value of 0 causes the
  |                     call to return immediately. Defaults to no timeout
  |                     (-1).
  | 
  | Parameter : wrap BOOLEAN --- Should the fileparts be wrapped when
  |                  copying to a smaller sized cluster? The default is
  |                  FALSE.
  | 
  | Parameter : compress BOOLEAN --- Whether to compress the new file.
  |                      Defaults to FALSE.
  | 
  | Parameter : asSuperfile BOOLEAN --- Should the file be copied as a
  |                         superfile? If TRUE and source is a superfile, then
  |                         the operation creates a superfile on the target,
  |                         creating sub-files as needed and only overwriting
  |                         existing sub-files whose content has changed. If
  |                         FALSE a single file is created. Defaults to FALSE.
  | 
  | Parameter : destinationLogicalName VARSTRING --- The logical name of the file to
  |                                    create.
  | 
  | Parameter : sourceLogicalName VARSTRING --- The name of the file to despray.
  | 
  | Parameter : remoteEspFsURL VARSTRING --- The url of the remote ESP file
  |                            copying service.
  | 
  | Parameter : transferBufferSize INTEGER4 --- Overrides the size (in bytes) of the
  |                                internal buffer used to copy the file. Default is
  |                                64k.
  | 
  | Parameter : replicate BOOLEAN --- Should the copied file also be
  |                       replicated on the destination? Defaults to FALSE
  | 
  | Parameter : destinationGroup VARSTRING --- The name of the group to distribute
  |                              the file across.
  | 
  | Parameter : maxConnections INTEGER4 --- The maximum number of target nodes to
  |                            write to concurrently. Defaults to 1.
  | 
  | Parameter : allowOverwrite BOOLEAN --- Is it valid to overwrite an existing
  |                            file of the same name? Defaults to FALSE
  | 
  | Parameter : forcePush BOOLEAN --- Should the copy process should be
  |                       executed on the source nodes (push) or on the
  |                       destination nodes (pull)? Default is to pull.
  | 
  | Return : VARSTRING The DFU workunit id for the job.
  | 
  | ----------------------------------------------------------------------------------------------------------------------------------
  | FUNCTION : RemotePull(varstring remoteEspFsURL, varstring sourceLogicalName, varstring
  |                      destinationGroup, varstring destinationLogicalName, integer4 timeOut=-1, integer4
  |                      maxConnections=-1, boolean allowOverwrite=FALSE, boolean replicate=FALSE, boolean
  |                      asSuperfile=FALSE, boolean forcePush=FALSE, integer4 transferBufferSize=0, boolean
  |                      wrap=FALSE, boolean compress=FALSE)
  | ----------------------------------------------------------------------------------------------------------------------------------
  | 
  | Same as fRemotePull, but does not return the DFU Workunit ID.
  | 
  | Parameter : forcepush BOOLEAN --- No Doc
  | 
  | Parameter : timeout INTEGER4 --- No Doc
  | 
  | Parameter : transferbuffersize INTEGER4 --- No Doc
  | 
  | Parameter : sourcelogicalname VARSTRING --- No Doc
  | 
  | Parameter : assuperfile BOOLEAN --- No Doc
  | 
  | Parameter : maxconnections INTEGER4 --- No Doc
  | 
  | Parameter : wrap BOOLEAN --- No Doc
  | 
  | Parameter : compress BOOLEAN --- No Doc
  | 
  | Parameter : allowoverwrite BOOLEAN --- No Doc
  | 
  | Parameter : replicate BOOLEAN --- No Doc
  | 
  | Parameter : remoteespfsurl VARSTRING --- No Doc
  | 
  | Parameter : destinationlogicalname VARSTRING --- No Doc
  | 
  | Parameter : destinationgroup VARSTRING --- No Doc
  | 
  | Return : 
  | 
  | See : fRemotePull
  | 
  | ----------------------------------------------------------------------------------------------------------------------------------
  | FUNCTION : varstring fMonitorLogicalFileName(varstring eventToFire, varstring name, integer4
  |                                             shotCount=1, varstring espServerIpPort=GETENV('ws_fs_server'))
  | ----------------------------------------------------------------------------------------------------------------------------------
  | 
  | Creates a file monitor job in the DFU Server. If an appropriately named
  | file arrives in this interval it will fire the event with the name of the
  | triggering object as the event subtype (see the EVENT function).
  | 
  | Parameter : espServerIpPort VARSTRING --- The url of the ESP file copying
  |                             service. Defaults to the value of ws_fs_server in
  |                             the environment.
  | 
  | Parameter : eventToFire VARSTRING --- The user-defined name of the event
  |                         to fire when the filename appears. This value is
  |                         used as the first parameter to the EVENT function.
  | 
  | Parameter : name VARSTRING --- The name of the logical file to
  |                  monitor. This may contain wildcard characters ( *
  |                  and ?)
  | 
  | Parameter : shotCount INTEGER4 --- The number of times to generate the
  |                       event before the monitoring job completes. A value
  |                       of -1 indicates the monitoring job continues until
  |                       manually aborted. The default is 1.
  | 
  | Return : VARSTRING The DFU workunit id for the job.
  | 
  | ----------------------------------------------------------------------------------------------------------------------------------
  | FUNCTION : MonitorLogicalFileName(varstring eventToFire, varstring name, integer4 shotCount=1,
  |                                  varstring espServerIpPort=GETENV('ws_fs_server'))
  | ----------------------------------------------------------------------------------------------------------------------------------
  | 
  | Same as fMonitorLogicalFileName, but does not return the DFU Workunit ID.
  | 
  | Parameter : shotcount INTEGER4 --- No Doc
  | 
  | Parameter : eventtofire VARSTRING --- No Doc
  | 
  | Parameter : name VARSTRING --- No Doc
  | 
  | Parameter : espserveripport VARSTRING --- No Doc
  | 
  | Return : 
  | 
  | See : fMonitorLogicalFileName
  | 
  | ----------------------------------------------------------------------------------------------------------------------------------
  | FUNCTION : varstring fMonitorFile(varstring eventToFire, varstring ip, varstring filename, boolean
  |                                  subDirs=FALSE, integer4 shotCount=1, varstring espServerIpPort=GETENV('ws_fs_server'))
  | ----------------------------------------------------------------------------------------------------------------------------------
  | 
  | Creates a file monitor job in the DFU Server. If an appropriately named
  | file arrives in this interval it will fire the event with the name of the
  | triggering object as the event subtype (see the EVENT function).
  | 
  | Parameter : filename VARSTRING --- The full path of the file(s) to
  |                      monitor. This may contain wildcard characters ( *
  |                      and ?)
  | 
  | Parameter : subDirs BOOLEAN --- Whether to include files in sub-
  |                     directories (when the filename contains
  |                     wildcards). Defaults to FALSE.
  | 
  | Parameter : espServerIpPort VARSTRING --- The url of the ESP file copying
  |                             service. Defaults to the value of ws_fs_server in
  |                             the environment.
  | 
  | Parameter : shotCount INTEGER4 --- The number of times to generate the
  |                       event before the monitoring job completes. A value
  |                       of -1 indicates the monitoring job continues until
  |                       manually aborted. The default is 1.
  | 
  | Parameter : ip VARSTRING --- The the IP address for the file to
  |                monitor. This may be omitted if the filename
  |                parameter contains a complete URL.
  | 
  | Parameter : eventToFire VARSTRING --- The user-defined name of the event
  |                         to fire when the filename appears. This value is
  |                         used as the first parameter to the EVENT function.
  | 
  | Return : VARSTRING The DFU workunit id for the job.
  | 
  | ----------------------------------------------------------------------------------------------------------------------------------
  | FUNCTION : MonitorFile(varstring eventToFire, varstring ip, varstring filename, boolean
  |                       subdirs=FALSE, integer4 shotCount=1, varstring espServerIpPort=GETENV('ws_fs_server'))
  | ----------------------------------------------------------------------------------------------------------------------------------
  | 
  | Same as fMonitorFile, but does not return the DFU Workunit ID.
  | 
  | Parameter : filename VARSTRING --- No Doc
  | 
  | Parameter : shotcount INTEGER4 --- No Doc
  | 
  | Parameter : subdirs BOOLEAN --- No Doc
  | 
  | Parameter : ip VARSTRING --- No Doc
  | 
  | Parameter : espserveripport VARSTRING --- No Doc
  | 
  | Parameter : eventtofire VARSTRING --- No Doc
  | 
  | Return : 
  | 
  | See : fMonitorFile
  | 
  | ----------------------------------------------------------------------------------------------------------------------------------
  | FUNCTION : varstring WaitDfuWorkunit(varstring wuid, integer4 timeOut=-1, varstring
  |                                     espServerIpPort=GETENV('ws_fs_server'))
  | ----------------------------------------------------------------------------------------------------------------------------------
  | 
  | Waits for the specified DFU workunit to finish.
  | 
  | Parameter : timeOut INTEGER4 --- The time in ms to wait for the
  |                     operation to complete. A value of 0 causes the
  |                     call to return immediately. Defaults to no timeout
  |                     (-1).
  | 
  | Parameter : wuid VARSTRING --- The dfu wfid to wait for.
  | 
  | Parameter : espServerIpPort VARSTRING --- The url of the ESP file copying
  |                             service. Defaults to the value of ws_fs_server in
  |                             the environment.
  | 
  | Return : VARSTRING A string containing the final status
  |          string of the DFU workunit.
  | 
  | ----------------------------------------------------------------------------------------------------------------------------------
  | FUNCTION : AbortDfuWorkunit(varstring wuid, varstring espServerIpPort=GETENV('ws_fs_server'))
  | ----------------------------------------------------------------------------------------------------------------------------------
  | 
  | Aborts the specified DFU workunit.
  | 
  | Parameter : wuid VARSTRING --- The dfu wfid to abort.
  | 
  | Parameter : espServerIpPort VARSTRING --- The url of the ESP file copying
  |                             service. Defaults to the value of ws_fs_server in
  |                             the environment.
  | 
  | Return : 
  | 
  | ----------------------------------------------------------------------------------------------------------------------------------
  | FUNCTION : CreateSuperFile(varstring superName, boolean sequentialParts=FALSE, boolean
  |                           allowExist=FALSE)
  | ----------------------------------------------------------------------------------------------------------------------------------
  | 
  | Creates an empty superfile. This function is not included in a superfile
  | transaction.
  | 
  | Parameter : superName VARSTRING --- The logical name of the superfile.
  | 
  | Parameter : sequentialParts BOOLEAN --- Whether the sub-files must be
  |                             sequentially ordered. Default to FALSE.
  | 
  | Parameter : allowExist BOOLEAN --- Indicating whether to post an error if
  |                        the superfile already exists. If TRUE, no error is
  |                        posted. Defaults to FALSE.
  | 
  | Return : 
  | 
  | ----------------------------------------------------------------------------------------------------------------------------------
  | FUNCTION : boolean SuperFileExists(varstring superName)
  | ----------------------------------------------------------------------------------------------------------------------------------
  | 
  | Checks if the specified filename is present in the Distributed File Utility
  | (DFU) and is a SuperFile.
  | 
  | Parameter : superName VARSTRING --- The logical name of the superfile.
  | 
  | Return : BOOLEAN Whether the file exists.
  | 
  | See : FileExists
  | 
  | ----------------------------------------------------------------------------------------------------------------------------------
  | FUNCTION : DeleteSuperFile(varstring superName, boolean deletesub=FALSE)
  | ----------------------------------------------------------------------------------------------------------------------------------
  | 
  | Deletes the superfile.
  | 
  | Parameter : superName VARSTRING --- The logical name of the superfile.
  | 
  | Parameter : deletesub BOOLEAN --- No Doc
  | 
  | Return : 
  | 
  | See : FileExists
  | 
  | ----------------------------------------------------------------------------------------------------------------------------------
  | FUNCTION : unsigned4 GetSuperFileSubCount(varstring superName)
  | ----------------------------------------------------------------------------------------------------------------------------------
  | 
  | Returns the number of sub-files contained within a superfile.
  | 
  | Parameter : superName VARSTRING --- The logical name of the superfile.
  | 
  | Return : UNSIGNED4 The number of sub-files within the
  |          superfile.
  | 
  | ----------------------------------------------------------------------------------------------------------------------------------
  | FUNCTION : varstring GetSuperFileSubName(varstring superName, unsigned4 fileNum, boolean
  |                                         absPath=FALSE)
  | ----------------------------------------------------------------------------------------------------------------------------------
  | 
  | Returns the name of the Nth sub-file within a superfile.
  | 
  | Parameter : superName VARSTRING --- The logical name of the superfile.
  | 
  | Parameter : absPath BOOLEAN --- Whether to prepend '~' to the name of
  |                     the resulting logical file name.
  | 
  | Parameter : fileNum UNSIGNED4 --- The 1-based position of the sub-file
  |                     to return the name of.
  | 
  | Return : VARSTRING The logical name of the selected sub-
  |          file.
  | 
  | ----------------------------------------------------------------------------------------------------------------------------------
  | FUNCTION : unsigned4 FindSuperFileSubName(varstring superName, varstring subName)
  | ----------------------------------------------------------------------------------------------------------------------------------
  | 
  | Returns the position of a file within a superfile.
  | 
  | Parameter : superName VARSTRING --- The logical name of the superfile.
  | 
  | Parameter : subName VARSTRING --- The logical name of the sub-file.
  | 
  | Return : UNSIGNED4 The 1-based position of the sub-file
  |          within the superfile.
  | 
  | ----------------------------------------------------------------------------------------------------------------------------------
  | FUNCTION : StartSuperFileTransaction()
  | ----------------------------------------------------------------------------------------------------------------------------------
  | 
  | Starts a superfile transaction. All superfile operations within the
  | transaction will either be executed atomically or rolled back when the
  | transaction is finished.
  | 
  | Return : 
  | 
  | ----------------------------------------------------------------------------------------------------------------------------------
  | FUNCTION : AddSuperFile(varstring superName, varstring subName, unsigned4 atPos=0, boolean
  |                        addContents=FALSE, boolean strict=FALSE)
  | ----------------------------------------------------------------------------------------------------------------------------------
  | 
  | Adds a file to a superfile.
  | 
  | Parameter : superName VARSTRING --- The logical name of the superfile.
  | 
  | Parameter : strict BOOLEAN --- Check addContents only if subName is a
  |                    superfile, and ensure superfiles exist.
  | 
  | Parameter : addContents BOOLEAN --- Controls whether adding a superfile
  |                         adds the superfile, or its contents. Defaults to
  |                         FALSE (do not expand).
  | 
  | Parameter : subName VARSTRING --- The name of the logical file to add.
  | 
  | Parameter : atPos UNSIGNED4 --- The position to add the sub-file, or
  |                   0 to append. Defaults to 0.
  | 
  | Return : 
  | 
  | ----------------------------------------------------------------------------------------------------------------------------------
  | FUNCTION : RemoveSuperFile(varstring superName, varstring subName, boolean del=FALSE, boolean
  |                           removeContents=FALSE)
  | ----------------------------------------------------------------------------------------------------------------------------------
  | 
  | Removes a sub-file from a superfile.
  | 
  | Parameter : superName VARSTRING --- The logical name of the superfile.
  | 
  | Parameter : removeContents BOOLEAN --- Controls whether the contents of a
  |                            sub-file which is a superfile should be
  |                            recursively removed. Defaults to FALSE.
  | 
  | Parameter : del BOOLEAN --- Indicates whether the sub-file should
  |                 also be removed from the disk. Defaults to FALSE.
  | 
  | Parameter : subName VARSTRING --- The name of the sub-file to remove.
  | 
  | Return : 
  | 
  | ----------------------------------------------------------------------------------------------------------------------------------
  | FUNCTION : ClearSuperFile(varstring superName, boolean del=FALSE)
  | ----------------------------------------------------------------------------------------------------------------------------------
  | 
  | Removes all sub-files from a superfile.
  | 
  | Parameter : superName VARSTRING --- The logical name of the superfile.
  | 
  | Parameter : del BOOLEAN --- Indicates whether the sub-files should
  |                 also be removed from the disk. Defaults to FALSE.
  | 
  | Return : 
  | 
  | ----------------------------------------------------------------------------------------------------------------------------------
  | FUNCTION : RemoveOwnedSubFiles(varstring superName, boolean del=FALSE)
  | ----------------------------------------------------------------------------------------------------------------------------------
  | 
  | Removes all soley-owned sub-files from a superfile. If a sub-file is also
  | contained within another superfile then it is retained.
  | 
  | Parameter : superName VARSTRING --- The logical name of the superfile.
  | 
  | Parameter : del BOOLEAN --- No Doc
  | 
  | Return : 
  | 
  | ----------------------------------------------------------------------------------------------------------------------------------
  | FUNCTION : DeleteOwnedSubFiles(varstring superName)
  | ----------------------------------------------------------------------------------------------------------------------------------
  | 
  | Legacy version of RemoveOwnedSubFiles which was incorrectly named in a
  | previous version.
  | 
  | Parameter : supername VARSTRING --- No Doc
  | 
  | Return : 
  | 
  | See : RemoveOwnedSubFIles
  | 
  | ----------------------------------------------------------------------------------------------------------------------------------
  | FUNCTION : SwapSuperFile(varstring superName1, varstring superName2)
  | ----------------------------------------------------------------------------------------------------------------------------------
  | 
  | Swap the contents of two superfiles.
  | 
  | Parameter : superName1 VARSTRING --- The logical name of the first
  |                        superfile.
  | 
  | Parameter : superName2 VARSTRING --- The logical name of the second
  |                        superfile.
  | 
  | Return : 
  | 
  | ----------------------------------------------------------------------------------------------------------------------------------
  | FUNCTION : ReplaceSuperFile(varstring superName, varstring oldSubFile, varstring newSubFile)
  | ----------------------------------------------------------------------------------------------------------------------------------
  | 
  | Removes a sub-file from a superfile and replaces it with another.
  | 
  | Parameter : superName VARSTRING --- The logical name of the superfile.
  | 
  | Parameter : oldSubFile VARSTRING --- The logical name of the sub-file to
  |                        remove.
  | 
  | Parameter : newSubFile VARSTRING --- The logical name of the sub-file to
  |                        replace within the superfile.
  | 
  | Return : 
  | 
  | ----------------------------------------------------------------------------------------------------------------------------------
  | FUNCTION : FinishSuperFileTransaction(boolean rollback=FALSE)
  | ----------------------------------------------------------------------------------------------------------------------------------
  | 
  | Finishes a superfile transaction. This executes all the operations since
  | the matching StartSuperFileTransaction(). If there are any errors, then all
  | of the operations are rolled back.
  | 
  | Parameter : rollback BOOLEAN --- No Doc
  | 
  | Return : 
  | 
  | ----------------------------------------------------------------------------------------------------------------------------------
  | FUNCTION : dataset(FsLogicalFileNameRecord) SuperFileContents(varstring superName, boolean
  |                                                              recurse=FALSE)
  | ----------------------------------------------------------------------------------------------------------------------------------
  | 
  | Returns the list of sub-files contained within a superfile.
  | 
  | Parameter : superName VARSTRING --- The logical name of the superfile.
  | 
  | Parameter : recurse BOOLEAN --- Should the contents of child-
  |                     superfiles be expanded. Default is FALSE.
  | 
  | Return : TABLE ( FsLogicalFileNameRecord ) A dataset
  |          containing the names of the sub-files.
  | 
  | ----------------------------------------------------------------------------------------------------------------------------------
  | FUNCTION : dataset(FsLogicalFileNameRecord) LogicalFileSuperOwners(varstring name)
  | ----------------------------------------------------------------------------------------------------------------------------------
  | 
  | Returns the list of superfiles that a logical file is contained within.
  | 
  | Parameter : name VARSTRING --- The name of the logical file.
  | 
  | Return : TABLE ( FsLogicalFileNameRecord ) A dataset
  |          containing the names of the superfiles.
  | 
  | ----------------------------------------------------------------------------------------------------------------------------------
  | FUNCTION : dataset(FsLogicalSuperSubRecord) LogicalFileSuperSubList()
  | ----------------------------------------------------------------------------------------------------------------------------------
  | 
  | Returns the list of all the superfiles in the system and their component
  | sub-files.
  | 
  | Return : TABLE ( FsLogicalSuperSubRecord ) A dataset
  |          containing pairs of superName,subName for each
  |          component file.
  | 
  | ----------------------------------------------------------------------------------------------------------------------------------
  | FUNCTION : varstring fPromoteSuperFileList(set of varstring superNames, varstring addHead='',
  |                                           boolean delTail=FALSE, boolean createOnlyOne=FALSE, boolean reverse=FALSE)
  | ----------------------------------------------------------------------------------------------------------------------------------
  | 
  | Moves the sub-files from the first entry in the list of superfiles to the
  | next in the list, repeating the process through the list of superfiles.
  | 
  | Parameter : superNames SET ( VARSTRING ) --- A set of the names of the
  |                        superfiles to act on. Any that do not exist will
  |                        be created. The contents of each superfile will be
  |                        moved to the next in the list.
  | 
  | Parameter : createOnlyOne BOOLEAN --- Specifies whether to only create a
  |                           single superfile (truncate the list at the first
  |                           non-existent superfile). The default is FALSE.
  | 
  | Parameter : delTail BOOLEAN --- Indicates whether to physically delete
  |                     the contents moved out of the last superfile. The
  |                     default is FALSE.
  | 
  | Parameter : addHead VARSTRING --- A string containing a comma-
  |                     delimited list of logical file names to add to the
  |                     first superfile after the promotion process is
  |                     complete. Defaults to ''.
  | 
  | Parameter : reverse BOOLEAN --- Reverse the order of processing the
  |                     superfiles list, effectively 'demoting' instead of
  |                     'promoting' the sub-files. The default is FALSE.
  | 
  | Return : VARSTRING A string containing a comma separated
  |          list of the previous sub-file contents of the
  |          emptied superfile.
  | 
  | ----------------------------------------------------------------------------------------------------------------------------------
  | FUNCTION : PromoteSuperFileList(set of varstring superNames, varstring addHead='', boolean
  |                                delTail=FALSE, boolean createOnlyOne=FALSE, boolean reverse=FALSE)
  | ----------------------------------------------------------------------------------------------------------------------------------
  | 
  | Same as fPromoteSuperFileList, but does not return the DFU Workunit ID.
  | 
  | Parameter : deltail BOOLEAN --- No Doc
  | 
  | Parameter : reverse BOOLEAN --- No Doc
  | 
  | Parameter : supernames SET ( VARSTRING ) --- No Doc
  | 
  | Parameter : createonlyone BOOLEAN --- No Doc
  | 
  | Parameter : addhead VARSTRING --- No Doc
  | 
  | Return : 
  | 
  | See : fPromoteSuperFileList
  | 
