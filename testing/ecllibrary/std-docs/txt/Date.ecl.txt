IMPORTS
=======



DESCRIPTIONS
============


MODULE : Date
----------------------------------------------------------------------------------------------------------------------------------

Link : <None>
    
    RECORD : Date_rec
    ----------------------------------------------------------------------------------------------------------------------------------
    
    Link : <None>
    
    ATTRIBUTE : Date_t
    ----------------------------------------------------------------------------------------------------------------------------------
    
    Link : <None>
    
    ATTRIBUTE : Days_t
    ----------------------------------------------------------------------------------------------------------------------------------
    
    Link : <None>
    
    RECORD : Time_rec
    ----------------------------------------------------------------------------------------------------------------------------------
    
    Link : <None>
    
    ATTRIBUTE : Time_t
    ----------------------------------------------------------------------------------------------------------------------------------
    
    Link : <None>
    
    ATTRIBUTE : Seconds_t
    ----------------------------------------------------------------------------------------------------------------------------------
    
    Link : <None>
    
    RECORD : DateTime_rec
    ----------------------------------------------------------------------------------------------------------------------------------
    
    Link : <None>
    
    ATTRIBUTE : Timestamp_t
    ----------------------------------------------------------------------------------------------------------------------------------
    
    Link : <None>
    
    FUNCTION : INTEGER2 Year(Date_t date)
    ----------------------------------------------------------------------------------------------------------------------------------
    
    Extracts the year from a date type.
    
    Parameter : date ||| The date.
    
    Return : An integer representing the year.
    
    Link : <None>
    
    FUNCTION : UNSIGNED1 Month(Date_t date)
    ----------------------------------------------------------------------------------------------------------------------------------
    
    Extracts the month from a date type.
    
    Parameter : date ||| The date.
    
    Return : An integer representing the year.
    
    Link : <None>
    
    FUNCTION : UNSIGNED1 Day(Date_t date)
    ----------------------------------------------------------------------------------------------------------------------------------
    
    Extracts the day of the month from a date type.
    
    Parameter : date ||| The date.
    
    Return : An integer representing the year.
    
    Link : <None>
    
    FUNCTION : UNSIGNED1 Hour(Time_t time)
    ----------------------------------------------------------------------------------------------------------------------------------
    
    Extracts the hour from a time type.
    
    Parameter : time ||| The time.
    
    Return : An integer representing the hour.
    
    Link : <None>
    
    FUNCTION : UNSIGNED1 Minute(Time_t time)
    ----------------------------------------------------------------------------------------------------------------------------------
    
    Extracts the minutes from a time type.
    
    Parameter : time ||| The time.
    
    Return : An integer representing the minutes.
    
    Link : <None>
    
    FUNCTION : UNSIGNED1 Second(Time_t time)
    ----------------------------------------------------------------------------------------------------------------------------------
    
    Extracts the seconds from a time type.
    
    Parameter : time ||| The time.
    
    Return : An integer representing the seconds.
    
    Link : <None>
    
    FUNCTION : Date_t DateFromParts(INTEGER2 year, UNSIGNED1 month, UNSIGNED1 day)
    ----------------------------------------------------------------------------------------------------------------------------------
    
    Combines year, month day to create a date type.
    
    Parameter : year ||| The year (0-9999).
    
    Parameter : month ||| The month (1-12).
    
    Parameter : day ||| The day (1..daysInMonth).
    
    Return : A date created by combining the fields.
    
    Link : <None>
    
    FUNCTION : Time_t TimeFromParts(UNSIGNED1 hour, UNSIGNED1 minute, UNSIGNED1 second)
    ----------------------------------------------------------------------------------------------------------------------------------
    
    Combines hour, minute second to create a time type.
    
    Parameter : hour ||| The hour (0-23).
    
    Parameter : minute ||| The minute (0-59).
    
    Parameter : second ||| The second (0-59).
    
    Return : A time created by combining the fields.
    
    Link : <None>
    
    FUNCTION : Seconds_t SecondsFromParts(INTEGER2 year, UNSIGNED1 month, UNSIGNED1 day, UNSIGNED1 hour, UNSIGNED1 minute, UNSIGNED1
               second, BOOLEAN is_local_time = FALSE)
    ----------------------------------------------------------------------------------------------------------------------------------
    
    Combines date and time components to create a seconds type. The
    date must be represented within the Gregorian calendar after the
    year 1600.
    
    Parameter : year ||| The year (1601-30827).
    
    Parameter : month ||| The month (1-12).
    
    Parameter : day ||| The day (1..daysInMonth).
    
    Parameter : hour ||| The hour (0-23).
    
    Parameter : minute ||| The minute (0-59).
    
    Parameter : second ||| The second (0-59).
    
    Parameter : is_local_time ||| TRUE if the datetime components are expressed
                in local time rather than UTC, FALSE if the components are
                expressed in UTC. Optional, defaults to FALSE.
    
    Return : A Seconds_t value created by combining the fields.
    
    Link : <None>
    
    MODULE : SecondsToParts(Seconds_t seconds)
    ----------------------------------------------------------------------------------------------------------------------------------
    
    Converts the number of seconds since epoch to a structure
    containing date and time parts. The result must be representable
    within the Gregorian calendar after the year 1600.
    
    Parameter : seconds ||| The number of seconds since epoch.
    
    Return : Module with exported attributes for year, month, day, hour,
             minute, second, day_of_week, date and time.
    
    Link : <None>
        
        ATTRIBUTE : INTEGER2 year
        ----------------------------------------------------------------------------------------------------------------------------------
        
        Link : <None>
        
        ATTRIBUTE : UNSIGNED1 month
        ----------------------------------------------------------------------------------------------------------------------------------
        
        Link : <None>
        
        ATTRIBUTE : UNSIGNED1 day
        ----------------------------------------------------------------------------------------------------------------------------------
        
        Link : <None>
        
        ATTRIBUTE : UNSIGNED1 hour
        ----------------------------------------------------------------------------------------------------------------------------------
        
        Link : <None>
        
        ATTRIBUTE : UNSIGNED1 minute
        ----------------------------------------------------------------------------------------------------------------------------------
        
        Link : <None>
        
        ATTRIBUTE : UNSIGNED1 second
        ----------------------------------------------------------------------------------------------------------------------------------
        
        Link : <None>
        
        ATTRIBUTE : UNSIGNED1 day_of_week
        ----------------------------------------------------------------------------------------------------------------------------------
        
        Link : <None>
        
        ATTRIBUTE : Date_t date
        ----------------------------------------------------------------------------------------------------------------------------------
        
        Combines year, month day to create a date type.
        
        Parameter : year ||| The year (0-9999).
        
        Parameter : month ||| The month (1-12).
        
        Parameter : day ||| The day (1..daysInMonth).
        
        Return : A date created by combining the fields.
        
        Link : <None>
        
        ATTRIBUTE : Time_t time
        ----------------------------------------------------------------------------------------------------------------------------------
        
        Combines hour, minute second to create a time type.
        
        Parameter : hour ||| The hour (0-23).
        
        Parameter : minute ||| The minute (0-59).
        
        Parameter : second ||| The second (0-59).
        
        Return : A time created by combining the fields.
        
        Link : <None>
    
    FUNCTION : Seconds_t TimestampToSeconds(Timestamp_t timestamp)
    ----------------------------------------------------------------------------------------------------------------------------------
    
    Converts the number of microseconds since epoch to the number of
    seconds since epoch.
    
    Parameter : timestamp ||| The number of microseconds since epoch.
    
    Return : The number of seconds since epoch.
    
    Link : <None>
    
    FUNCTION : BOOLEAN IsLeapYear(INTEGER2 year)
    ----------------------------------------------------------------------------------------------------------------------------------
    
    Tests whether the year is a leap year in the Gregorian calendar.
    
    Parameter : year ||| The year (0-9999).
    
    Return : True if the year is a leap year.
    
    Link : <None>
    
    FUNCTION : BOOLEAN IsDateLeapYear(Date_t date)
    ----------------------------------------------------------------------------------------------------------------------------------
    
    Tests whether a date is a leap year in the Gregorian calendar.
    
    Parameter : date ||| The date.
    
    Return : True if the year is a leap year.
    
    Link : <None>
    
    FUNCTION : Days_t FromGregorianYMD(INTEGER2 year, UNSIGNED1 month, UNSIGNED1 day)
    ----------------------------------------------------------------------------------------------------------------------------------
    
    Combines year, month, day in the Gregorian calendar to create the
    number days since 31st December 1BC.
    
    Parameter : year ||| The year (-4713..9999).
    
    Parameter : month ||| The month (1-12). A missing value (0) is treated as 1.
    
    Parameter : day ||| The day (1..daysInMonth). A missing value (0) is treated
                as 1.
    
    Return : The number of elapsed days (1 Jan 1AD = 1)
    
    Link : <None>
    
    MODULE : ToGregorianYMD(Days_t days)
    ----------------------------------------------------------------------------------------------------------------------------------
    
    Converts the number days since 31st December 1BC to a date in the
    Gregorian calendar.
    
    Parameter : days ||| The number of elapsed days (1 Jan 1AD = 1)
    
    Return : Module containing Year, Month, Day in the Gregorian calendar
    
    Link : <None>
        
        ATTRIBUTE : year
        ----------------------------------------------------------------------------------------------------------------------------------
        
        Link : <None>
        
        ATTRIBUTE : month
        ----------------------------------------------------------------------------------------------------------------------------------
        
        Link : <None>
        
        ATTRIBUTE : day
        ----------------------------------------------------------------------------------------------------------------------------------
        
        Link : <None>
    
    FUNCTION : Days_t FromGregorianDate(Date_t date)
    ----------------------------------------------------------------------------------------------------------------------------------
    
    Converts a date in the Gregorian calendar to the number days
    since 31st December 1BC.
    
    Parameter : date ||| The date (using the Gregorian calendar)
    
    Return : The number of elapsed days (1 Jan 1AD = 1)
    
    Link : <None>
    
    FUNCTION : Date_t ToGregorianDate(Days_t days)
    ----------------------------------------------------------------------------------------------------------------------------------
    
    Converts the number days since 31st December 1BC to a date in the
    Gregorian calendar.
    
    Parameter : days ||| The number of elapsed days (1 Jan 1AD = 1)
    
    Return : A Date_t in the Gregorian calendar
    
    Link : <None>
    
    FUNCTION : UNSIGNED2 DayOfYear(Date_t date)
    ----------------------------------------------------------------------------------------------------------------------------------
    
    Returns a number representing the day of the year indicated by
    the given date. The date must be in the Gregorian calendar after
    the year 1600.
    
    Parameter : date ||| A Date_t value.
    
    Return : A number (1-366) representing the number of days since the
             beginning of the year.
    
    Link : <None>
    
    FUNCTION : UNSIGNED1 DayOfWeek(Date_t date)
    ----------------------------------------------------------------------------------------------------------------------------------
    
    Returns a number representing the day of the week indicated by
    the given date. The date must be in the Gregorian calendar after
    the year 1600.
    
    Parameter : date ||| A Date_t value.
    
    Return : A number 1-7 representing the day of the week, where 1 = Sunday.
    
    Link : <None>
    
    FUNCTION : BOOLEAN IsJulianLeapYear(INTEGER2 year)
    ----------------------------------------------------------------------------------------------------------------------------------
    
    Tests whether the year is a leap year in the Julian calendar.
    
    Parameter : year ||| The year (0-9999).
    
    Return : True if the year is a leap year.
    
    Link : <None>
    
    FUNCTION : Days_t FromJulianYMD(INTEGER2 year, UNSIGNED1 month, UNSIGNED1 day)
    ----------------------------------------------------------------------------------------------------------------------------------
    
    Combines year, month, day in the Julian calendar to create the
    number days since 31st December 1BC.
    
    Parameter : year ||| The year (-4800..9999).
    
    Parameter : month ||| The month (1-12).
    
    Parameter : day ||| The day (1..daysInMonth).
    
    Return : The number of elapsed days (1 Jan 1AD = 1)
    
    Link : <None>
    
    MODULE : ToJulianYMD(Days_t days)
    ----------------------------------------------------------------------------------------------------------------------------------
    
    Converts the number days since 31st December 1BC to a date in the
    Julian calendar.
    
    Parameter : days ||| The number of elapsed days (1 Jan 1AD = 1)
    
    Return : Module containing Year, Month, Day in the Julian calendar
    
    Link : <None>
        
        ATTRIBUTE : UNSIGNED1 day
        ----------------------------------------------------------------------------------------------------------------------------------
        
        Link : <None>
        
        ATTRIBUTE : UNSIGNED1 month
        ----------------------------------------------------------------------------------------------------------------------------------
        
        Link : <None>
        
        ATTRIBUTE : INTEGER2 year
        ----------------------------------------------------------------------------------------------------------------------------------
        
        Link : <None>
    
    FUNCTION : Days_t FromJulianDate(Date_t date)
    ----------------------------------------------------------------------------------------------------------------------------------
    
    Converts a date in the Julian calendar to the number days since
    31st December 1BC.
    
    Parameter : date ||| The date (using the Julian calendar)
    
    Return : The number of elapsed days (1 Jan 1AD = 1)
    
    Link : <None>
    
    FUNCTION : Date_t ToJulianDate(Days_t days)
    ----------------------------------------------------------------------------------------------------------------------------------
    
    Converts the number days since 31st December 1BC to a date in the
    Julian calendar.
    
    Parameter : days ||| The number of elapsed days (1 Jan 1AD = 1)
    
    Return : A Date_t in the Julian calendar
    
    Link : <None>
    
    FUNCTION : Days_t DaysSince1900(INTEGER2 year, UNSIGNED1 month, UNSIGNED1 day)
    ----------------------------------------------------------------------------------------------------------------------------------
    
    Returns the number of days since 1st January 1900 (using the
    Gregorian Calendar)
    
    Parameter : year ||| The year (-4713..9999).
    
    Parameter : month ||| The month (1-12). A missing value (0) is treated as 1.
    
    Parameter : day ||| The day (1..daysInMonth). A missing value (0) is treated
                as 1.
    
    Return : The number of elapsed days since 1st January 1900
    
    Link : <None>
    
    FUNCTION : Days_t ToDaysSince1900(Date_t date)
    ----------------------------------------------------------------------------------------------------------------------------------
    
    Returns the number of days since 1st January 1900 (using the
    Gregorian Calendar)
    
    Parameter : date ||| The date
    
    Return : The number of elapsed days since 1st January 1900
    
    Link : <None>
    
    FUNCTION : Date_t FromDaysSince1900(Days_t days)
    ----------------------------------------------------------------------------------------------------------------------------------
    
    Converts the number days since 1st January 1900 to a date in the
    Julian calendar.
    
    Parameter : days ||| The number of elapsed days since 1st Jan 1900
    
    Return : A Date_t in the Julian calendar
    
    Link : <None>
    
    FUNCTION : INTEGER YearsBetween (Date_t from, Date_t to)
    ----------------------------------------------------------------------------------------------------------------------------------
    
    Calculate the number of whole years between two dates.
    
    Parameter : from ||| The first date
    
    Parameter : to ||| The last date
    
    Return : The number of years between them.
    
    Link : <None>
    
    FUNCTION : INTEGER MonthsBetween(Date_t from, Date_t to)
    ----------------------------------------------------------------------------------------------------------------------------------
    
    Calculate the number of whole months between two dates.
    
    Parameter : from ||| The first date
    
    Parameter : to ||| The last date
    
    Return : The number of months between them.
    
    Link : <None>
    
    FUNCTION : INTEGER DaysBetween(Date_t from, Date_t to)
    ----------------------------------------------------------------------------------------------------------------------------------
    
    Calculate the number of days between two dates.
    
    Parameter : from ||| The first date
    
    Parameter : to ||| The last date
    
    Return : The number of days between them.
    
    Link : <None>
    
    FUNCTION : Date_t DateFromDateRec(Date_rec date)
    ----------------------------------------------------------------------------------------------------------------------------------
    
    Combines the fields from a Date_rec to create a Date_t
    
    Parameter : date ||| The row containing the date.
    
    Return : A Date_t representing the combined values.
    
    Link : <None>
    
    FUNCTION : Date_t DateFromRec(Date_rec date)
    ----------------------------------------------------------------------------------------------------------------------------------
    
    Combines the fields from a Date_rec to create a Date_t
    
    Parameter : date ||| The row containing the date.
    
    Return : A Date_t representing the combined values.
    
    Link : <None>
    
    FUNCTION : Time_t TimeFromTimeRec(Time_rec time)
    ----------------------------------------------------------------------------------------------------------------------------------
    
    Combines the fields from a Time_rec to create a Time_t
    
    Parameter : time ||| The row containing the time.
    
    Return : A Time_t representing the combined values.
    
    Link : <None>
    
    FUNCTION : Date_t DateFromDateTimeRec(DateTime_rec datetime)
    ----------------------------------------------------------------------------------------------------------------------------------
    
    Combines the date fields from a DateTime_rec to create a Date_t
    
    Parameter : datetime ||| The row containing the datetime.
    
    Return : A Date_t representing the combined values.
    
    Link : <None>
    
    FUNCTION : Time_t TimeFromDateTimeRec(DateTime_rec datetime)
    ----------------------------------------------------------------------------------------------------------------------------------
    
    Combines the time fields from a DateTime_rec to create a Time_t
    
    Parameter : datetime ||| The row containing the datetime.
    
    Return : A Time_t representing the combined values.
    
    Link : <None>
    
    FUNCTION : Seconds_t SecondsFromDateTimeRec(DateTime_rec datetime, BOOLEAN is_local_time = FALSE)
    ----------------------------------------------------------------------------------------------------------------------------------
    
    Combines the date and time fields from a DateTime_rec to create a
    Seconds_t
    
    Parameter : datetime ||| The row containing the datetime.
    
    Parameter : is_local_time ||| TRUE if the datetime components are expressed
                in local time rather than UTC, FALSE if the components are
                expressed in UTC. Optional, defaults to FALSE.
    
    Return : A Seconds_t representing the combined values.
    
    Link : <None>
    
    FUNCTION : Date_t FromStringToDate(STRING date_text, VARSTRING format)
    ----------------------------------------------------------------------------------------------------------------------------------
    
    Converts a string to a Date_t using the relevant string format.
    The resulting date must be representable within the Gregorian
    calendar after the year 1600.
    
    Parameter : date_text ||| The string to be converted.
    
    Parameter : format ||| The format of the input string. (See documentation for
                strftime)
    
    Return : The date that was matched in the string. Returns 0 if failed to
             match or if the date components match but the result is an
             invalid date. Supported characters: %B Full month name %b or %h
             Abbreviated month name %d Day of month (two digits) %e Day of
             month (two digits, or a space followed by a single digit) %m
             Month (two digits) %t Whitespace %y year within century (00-99)
             %Y Full year (yyyy) %j Julian day (1-366) Common date formats
             American '%m/%d/%Y' mm/dd/yyyy Euro '%d/%m/%Y' dd/mm/yyyy Iso
             format '%Y-%m-%d' yyyy-mm-dd Iso basic 'Y%m%d' yyyymmdd
             '%d-%b-%Y' dd-mon-yyyy e.g., '21-Mar-1954'
    
    Link : <None>
    
    FUNCTION : Date_t FromString(STRING date_text, VARSTRING format)
    ----------------------------------------------------------------------------------------------------------------------------------
    
    Converts a string to a date using the relevant string format.
    
    Parameter : date_text ||| The string to be converted.
    
    Parameter : format ||| The format of the input string. (See documentation for
                strftime)
    
    Return : The date that was matched in the string. Returns 0 if failed to
             match.
    
    Link : <None>
    
    FUNCTION : Time_t FromStringToTime(STRING time_text, VARSTRING format)
    ----------------------------------------------------------------------------------------------------------------------------------
    
    Converts a string to a Time_t using the relevant string format.
    
    Parameter : date_text ||| The string to be converted.
    
    Parameter : format ||| The format of the input string. (See documentation for
                strftime)
    
    Return : The time that was matched in the string. Returns 0 if failed to
             match. Supported characters: %H Hour (two digits) %k (two digits,
             or a space followed by a single digit) %M Minute (two digits) %S
             Second (two digits) %t Whitespace
    
    Link : <None>
    
    FUNCTION : Date_t MatchDateString(STRING date_text, SET OF VARSTRING formats)
    ----------------------------------------------------------------------------------------------------------------------------------
    
    Matches a string against a set of date string formats and returns
    a valid Date_t object from the first format that successfully
    parses the string.
    
    Parameter : date_text ||| The string to be converted.
    
    Parameter : formats ||| A set of formats to check against the string. (See
                documentation for strftime)
    
    Return : The date that was matched in the string. Returns 0 if failed to
             match.
    
    Link : <None>
    
    FUNCTION : Time_t MatchTimeString(STRING time_text, SET OF VARSTRING formats)
    ----------------------------------------------------------------------------------------------------------------------------------
    
    Matches a string against a set of time string formats and returns
    a valid Time_t object from the first format that successfully
    parses the string.
    
    Parameter : time_text ||| The string to be converted.
    
    Parameter : formats ||| A set of formats to check against the string. (See
                documentation for strftime)
    
    Return : The time that was matched in the string. Returns 0 if failed to
             match.
    
    Link : <None>
    
    FUNCTION : STRING DateToString(Date_t date, VARSTRING format = '%Y-%m-%d')
    ----------------------------------------------------------------------------------------------------------------------------------
    
    Formats a date as a string.
    
    Parameter : date ||| The date to be converted.
    
    Parameter : format ||| The format template to use for the conversion; see
                strftime() for appropriate values. The maximum length of the
                resulting string is 255 characters. Optional; defaults to
                '%Y-%m-%d' which is YYYY-MM-DD.
    
    Return : Blank if date cannot be formatted, or the date in the requested
             format.
    
    Link : <None>
    
    FUNCTION : STRING TimeToString(Time_t time, VARSTRING format = '%H:%M:%S')
    ----------------------------------------------------------------------------------------------------------------------------------
    
    Formats a time as a string.
    
    Parameter : time ||| The time to be converted.
    
    Parameter : format ||| The format template to use for the conversion; see
                strftime() for appropriate values. The maximum length of the
                resulting string is 255 characters. Optional; defaults to
                '%H:%M:%S' which is HH:MM:SS.
    
    Return : Blank if the time cannot be formatted, or the time in the
             requested format.
    
    Link : <None>
    
    FUNCTION : STRING SecondsToString(Seconds_t seconds, VARSTRING format = '%Y-%m-%dT%H:%M:%S')
    ----------------------------------------------------------------------------------------------------------------------------------
    
    Converts a Seconds_t value into a human-readable string using a
    format template.
    
    Parameter : seconds ||| The seconds since epoch.
    
    Parameter : format ||| The format template to use for the conversion; see
                strftime() for appropriate values. The maximum length of the
                resulting string is 255 characters. Optional; defaults to
                '%Y-%m-%dT%H:%M:%S' which is YYYY-MM-DDTHH:MM:SS.
    
    Return : The converted seconds as a string.
    
    Link : <None>
    
    FUNCTION : STRING ToString(Date_t date, VARSTRING format)
    ----------------------------------------------------------------------------------------------------------------------------------
    
    Formats a date as a string.
    
    Parameter : date ||| The date to be converted.
    
    Parameter : format ||| The format the date is output in. (See documentation
                for strftime)
    
    Return : Blank if date cannot be formatted, or the date in the requested
             format.
    
    Link : <None>
    
    FUNCTION : STRING ConvertDateFormat(STRING date_text, VARSTRING from_format='%m/%d/%Y', VARSTRING to_format='%Y%m%d')
    ----------------------------------------------------------------------------------------------------------------------------------
    
    Converts a date from one format to another
    
    Parameter : date_text ||| The string containing the date to be converted.
    
    Parameter : from_format ||| The format the date is to be converted from.
    
    Parameter : to_format ||| The format the date is to be converted to.
    
    Return : The converted string, or blank if it failed to match the format.
    
    Link : <None>
    
    FUNCTION : STRING ConvertFormat(STRING date_text, VARSTRING from_format='%m/%d/%Y', VARSTRING to_format='%Y%m%d')
    ----------------------------------------------------------------------------------------------------------------------------------
    
    Converts a date from one format to another
    
    Parameter : date_text ||| The string containing the date to be converted.
    
    Parameter : from_format ||| The format the date is to be converted from.
    
    Parameter : to_format ||| The format the date is to be converted to.
    
    Return : The converted string, or blank if it failed to match the format.
    
    Link : <None>
    
    FUNCTION : STRING ConvertTimeFormat(STRING time_text, VARSTRING from_format='%H%M%S', VARSTRING to_format='%H:%M:%S')
    ----------------------------------------------------------------------------------------------------------------------------------
    
    Converts a time from one format to another
    
    Parameter : time_text ||| The string containing the time to be converted.
    
    Parameter : from_format ||| The format the time is to be converted from.
    
    Parameter : to_format ||| The format the time is to be converted to.
    
    Return : The converted string, or blank if it failed to match the format.
    
    Link : <None>
    
    FUNCTION : STRING ConvertDateFormatMultiple(STRING date_text, SET OF VARSTRING from_formats, VARSTRING to_format='%Y%m%d')
    ----------------------------------------------------------------------------------------------------------------------------------
    
    Converts a date that matches one of a set of formats to another.
    
    Parameter : date_text ||| The string containing the date to be converted.
    
    Parameter : from_formats ||| The list of formats the date is to be converted
                from.
    
    Parameter : to_format ||| The format the date is to be converted to.
    
    Return : The converted string, or blank if it failed to match the format.
    
    Link : <None>
    
    FUNCTION : STRING ConvertFormatMultiple(STRING date_text, SET OF VARSTRING from_formats, VARSTRING to_format='%Y%m%d')
    ----------------------------------------------------------------------------------------------------------------------------------
    
    Converts a date that matches one of a set of formats to another.
    
    Parameter : date_text ||| The string containing the date to be converted.
    
    Parameter : from_formats ||| The list of formats the date is to be converted
                from.
    
    Parameter : to_format ||| The format the date is to be converted to.
    
    Return : The converted string, or blank if it failed to match the format.
    
    Link : <None>
    
    FUNCTION : STRING ConvertTimeFormatMultiple(STRING time_text, SET OF VARSTRING from_formats, VARSTRING to_format='%H:%m:%s')
    ----------------------------------------------------------------------------------------------------------------------------------
    
    Converts a time that matches one of a set of formats to another.
    
    Parameter : time_text ||| The string containing the time to be converted.
    
    Parameter : from_formats ||| The list of formats the time is to be converted
                from.
    
    Parameter : to_format ||| The format the time is to be converted to.
    
    Return : The converted string, or blank if it failed to match the format.
    
    Link : <None>
    
    FUNCTION : Date_t AdjustDate(Date_t date, INTEGER2 year_delta = 0, INTEGER4 month_delta = 0, INTEGER4 day_delta = 0)
    ----------------------------------------------------------------------------------------------------------------------------------
    
    Adjusts a date by incrementing or decrementing year, month and/or
    day values. The date must be in the Gregorian calendar after the
    year 1600. If the new calculated date is invalid then it will be
    normalized according to mktime() rules. Example: 20140130 + 1
    month = 20140302.
    
    Parameter : date ||| The date to adjust.
    
    Parameter : year_delta ||| The requested change to the year value; optional,
                defaults to zero.
    
    Parameter : month_delta ||| The requested change to the month value;
                optional, defaults to zero.
    
    Parameter : day_delta ||| The requested change to the day of month value;
                optional, defaults to zero.
    
    Return : The adjusted Date_t value.
    
    Link : <None>
    
    FUNCTION : Date_t AdjustDateBySeconds(Date_t date, INTEGER4 seconds_delta)
    ----------------------------------------------------------------------------------------------------------------------------------
    
    Adjusts a date by adding or subtracting seconds. The date must be
    in the Gregorian calendar after the year 1600. If the new
    calculated date is invalid then it will be normalized according
    to mktime() rules. Example: 20140130 + 172800 seconds = 20140201.
    
    Parameter : date ||| The date to adjust.
    
    Parameter : seconds_delta ||| The requested change to the date, in seconds.
    
    Return : The adjusted Date_t value.
    
    Link : <None>
    
    FUNCTION : Time_t AdjustTime(Time_t time, INTEGER2 hour_delta = 0, INTEGER4 minute_delta = 0, INTEGER4 second_delta = 0)
    ----------------------------------------------------------------------------------------------------------------------------------
    
    Adjusts a time by incrementing or decrementing hour, minute
    and/or second values. If the new calculated time is invalid then
    it will be normalized according to mktime() rules.
    
    Parameter : time ||| The time to adjust.
    
    Parameter : hour_delta ||| The requested change to the hour value; optional,
                defaults to zero.
    
    Parameter : minute_delta ||| The requested change to the minute value;
                optional, defaults to zero.
    
    Parameter : second_delta ||| The requested change to the second of month
                value; optional, defaults to zero.
    
    Return : The adjusted Time_t value.
    
    Link : <None>
    
    FUNCTION : Time_t AdjustTimeBySeconds(Time_t time, INTEGER4 seconds_delta)
    ----------------------------------------------------------------------------------------------------------------------------------
    
    Adjusts a time by adding or subtracting seconds. If the new
    calculated time is invalid then it will be normalized according
    to mktime() rules.
    
    Parameter : time ||| The time to adjust.
    
    Parameter : seconds_delta ||| The requested change to the time, in seconds.
    
    Return : The adjusted Time_t value.
    
    Link : <None>
    
    FUNCTION : Seconds_t AdjustSeconds(Seconds_t seconds, INTEGER2 year_delta = 0, INTEGER4 month_delta = 0, INTEGER4 day_delta = 0,
               INTEGER4 hour_delta = 0, INTEGER4 minute_delta = 0, INTEGER4 second_delta = 0)
    ----------------------------------------------------------------------------------------------------------------------------------
    
    Adjusts a Seconds_t value by adding or subtracting years, months,
    days, hours, minutes and/or seconds. This is performed by first
    converting the seconds into a full date/time structure, applying
    any delta values to individual date/time components, then
    converting the structure back to the number of seconds. This
    interim date must lie within Gregorian calendar after the year
    1600. If the interim structure is found to have an invalid
    date/time then it will be normalized according to mktime() rules.
    Therefore, some delta values (such as "1 month") are actually
    relative to the value of the seconds argument.
    
    Parameter : seconds ||| The number of seconds to adjust.
    
    Parameter : year_delta ||| The requested change to the year value; optional,
                defaults to zero.
    
    Parameter : month_delta ||| The requested change to the month value;
                optional, defaults to zero.
    
    Parameter : day_delta ||| The requested change to the day of month value;
                optional, defaults to zero.
    
    Parameter : hour_delta ||| The requested change to the hour value; optional,
                defaults to zero.
    
    Parameter : minute_delta ||| The requested change to the minute value;
                optional, defaults to zero.
    
    Parameter : second_delta ||| The requested change to the second of month
                value; optional, defaults to zero.
    
    Return : The adjusted Seconds_t value.
    
    Link : <None>
    
    FUNCTION : Date_t AdjustCalendar(Date_t date, INTEGER2 year_delta = 0, INTEGER4 month_delta = 0, INTEGER4 day_delta = 0)
    ----------------------------------------------------------------------------------------------------------------------------------
    
    Adjusts a date by incrementing or decrementing months and/or
    years. This routine uses the rule outlined in McGinn v. State, 46
    Neb. 427, 65 N.W. 46 (1895): "The term calendar month, whether
    employed in statutes or contracts, and not appearing to have been
    used in a different sense, denotes a period terminating with the
    day of the succeeding month numerically corresponding to the day
    of its beginning, less one. If there be no corresponding day of
    the succeeding month, it terminates with the last day thereof."
    The internet suggests similar legal positions exist in the
    Commonwealth and Germany. Note that day adjustments are performed
    after year and month adjustments using the preceding rules. As an
    example, Jan. 31, 2014 + 1 month will result in Feb. 28, 2014;
    Jan. 31, 2014 + 1 month + 1 day will result in Mar. 1, 2014.
    
    Parameter : date ||| The date to adjust, in the Gregorian calendar after
                1600.
    
    Parameter : year_delta ||| The requested change to the year value; optional,
                defaults to zero.
    
    Parameter : month_delta ||| The requested change to the month value;
                optional, defaults to zero.
    
    Parameter : day_delta ||| The requested change to the day value; optional,
                defaults to zero.
    
    Return : The adjusted Date_t value.
    
    Link : <None>
    
    FUNCTION : BOOLEAN IsLocalDaylightSavingsInEffect()
    ----------------------------------------------------------------------------------------------------------------------------------
    
    Returns a boolean indicating whether daylight savings time is
    currently in effect locally.
    
    Return : TRUE if daylight savings time is currently in effect, FALSE
             otherwise.
    
    Link : <None>
    
    FUNCTION : INTEGER4 LocalTimeZoneOffset()
    ----------------------------------------------------------------------------------------------------------------------------------
    
    Returns the offset (in seconds) of the time represented from UTC,
    with positive values indicating locations east of the Prime
    Meridian. Given a UTC time in seconds since epoch, you can find
    the local time by adding the result of this function to the
    seconds.
    
    Return : The number of seconds offset from UTC.
    
    Link : <None>
    
    FUNCTION : Date_t CurrentDate(BOOLEAN in_local_time = FALSE)
    ----------------------------------------------------------------------------------------------------------------------------------
    
    Returns the current date.
    
    Parameter : in_local_time ||| TRUE if the returned value should be local to
                the cluster computing the date, FALSE for UTC. Optional, defaults
                to FALSE.
    
    Return : A Date_t representing the current date.
    
    Link : <None>
    
    FUNCTION : Date_t Today()
    ----------------------------------------------------------------------------------------------------------------------------------
    
    Returns the current date in the local time zone.
    
    Return : A Date_t representing the current date.
    
    Link : <None>
    
    FUNCTION : Time_t CurrentTime(BOOLEAN in_local_time = FALSE)
    ----------------------------------------------------------------------------------------------------------------------------------
    
    Returns the current time of day
    
    Parameter : in_local_time ||| TRUE if the returned value should be local to
                the cluster computing the time, FALSE for UTC. Optional, defaults
                to FALSE.
    
    Return : A Time_t representing the current time of day.
    
    Link : <None>
    
    FUNCTION : Seconds_t CurrentSeconds(BOOLEAN in_local_time = FALSE)
    ----------------------------------------------------------------------------------------------------------------------------------
    
    Returns the current date and time as the number of seconds since
    epoch.
    
    Parameter : in_local_time ||| TRUE if the returned value should be local to
                the cluster computing the time, FALSE for UTC. Optional, defaults
                to FALSE.
    
    Return : A Seconds_t representing the current time in UTC or local time,
             depending on the argument.
    
    Link : <None>
    
    FUNCTION : Timestamp_t CurrentTimestamp(BOOLEAN in_local_time = FALSE)
    ----------------------------------------------------------------------------------------------------------------------------------
    
    Returns the current date and time as the number of microseconds
    since epoch.
    
    Parameter : in_local_time ||| TRUE if the returned value should be local to
                the cluster computing the time, FALSE for UTC. Optional, defaults
                to FALSE.
    
    Return : A Timestamp_t representing the current time in microseconds in
             UTC or local time, depending on the argument.
    
    Link : <None>
    
    MODULE : DatesForMonth(Date_t as_of_date = CurrentDate(FALSE))
    ----------------------------------------------------------------------------------------------------------------------------------
    
    Returns the beginning and ending dates for the month surrounding
    the given date.
    
    Parameter : as_of_date ||| The reference date from which the month will be
                calculated. This date must be a date within the Gregorian
                calendar. Optional, defaults to the current date in UTC.
    
    Return : Module with exported attributes for startDate and endDate.
    
    Link : <None>
        
        ATTRIBUTE : Date_t startDate
        ----------------------------------------------------------------------------------------------------------------------------------
        
        Link : <None>
        
        ATTRIBUTE : Date_t endDate
        ----------------------------------------------------------------------------------------------------------------------------------
        
        Link : <None>
    
    MODULE : DatesForWeek(Date_t as_of_date = CurrentDate(FALSE))
    ----------------------------------------------------------------------------------------------------------------------------------
    
    Returns the beginning and ending dates for the week surrounding
    the given date (Sunday marks the beginning of a week).
    
    Parameter : as_of_date ||| The reference date from which the week will be
                calculated. This date must be a date within the Gregorian
                calendar. Optional, defaults to the current date in UTC.
    
    Return : Module with exported attributes for startDate and endDate.
    
    Link : <None>
        
        ATTRIBUTE : Date_t startDate
        ----------------------------------------------------------------------------------------------------------------------------------
        
        Link : <None>
        
        ATTRIBUTE : Date_t endDate
        ----------------------------------------------------------------------------------------------------------------------------------
        
        Link : <None>
    
    FUNCTION : BOOLEAN IsValidDate(Date_t date, INTEGER2 yearLowerBound = 1800, INTEGER2 yearUpperBound = 2100)
    ----------------------------------------------------------------------------------------------------------------------------------
    
    Tests whether a date is valid, both by range-checking the year
    and by validating each of the other individual components.
    
    Parameter : date ||| The date to validate.
    
    Parameter : yearLowerBound ||| The minimum acceptable year. Optional;
                defaults to 1800.
    
    Parameter : yearUpperBound ||| The maximum acceptable year. Optional;
                defaults to 2100.
    
    Return : TRUE if the date is valid, FALSE otherwise.
    
    Link : <None>
    
    FUNCTION : BOOLEAN IsValidGregorianDate(Date_t date)
    ----------------------------------------------------------------------------------------------------------------------------------
    
    Tests whether a date is valid in the Gregorian calendar. The year
    must be between 1601 and 30827.
    
    Parameter : date ||| The Date_t to validate.
    
    Return : TRUE if the date is valid, FALSE otherwise.
    
    Link : <None>
    
    FUNCTION : BOOLEAN IsValidTime(Time_t time)
    ----------------------------------------------------------------------------------------------------------------------------------
    
    Tests whether a time is valid.
    
    Parameter : time ||| The time to validate.
    
    Return : TRUE if the time is valid, FALSE otherwise.
    
    Link : <None>
    
    TRANSFORM : Date_rec CreateDate(INTEGER2 year, UNSIGNED1 month, UNSIGNED1 day)
    ----------------------------------------------------------------------------------------------------------------------------------
    
    A transform to create a Date_rec from the individual elements
    
    Parameter : year ||| The year
    
    Parameter : month ||| The month (1-12).
    
    Parameter : day ||| The day (1..daysInMonth).
    
    Return : A transform that creates a Date_rec containing the date.
    
    Link : <None>
    
    TRANSFORM : Date_rec CreateDateFromSeconds(Seconds_t seconds)
    ----------------------------------------------------------------------------------------------------------------------------------
    
    A transform to create a Date_rec from a Seconds_t value.
    
    Parameter : seconds ||| The number seconds since epoch.
    
    Return : A transform that creates a Date_rec containing the date.
    
    Link : <None>
    
    TRANSFORM : Time_rec CreateTime(UNSIGNED1 hour, UNSIGNED1 minute, UNSIGNED1 second)
    ----------------------------------------------------------------------------------------------------------------------------------
    
    A transform to create a Time_rec from the individual elements
    
    Parameter : hour ||| The hour (0-23).
    
    Parameter : minute ||| The minute (0-59).
    
    Parameter : second ||| The second (0-59).
    
    Return : A transform that creates a Time_rec containing the time of day.
    
    Link : <None>
    
    TRANSFORM : Time_rec CreateTimeFromSeconds(Seconds_t seconds)
    ----------------------------------------------------------------------------------------------------------------------------------
    
    A transform to create a Time_rec from a Seconds_t value.
    
    Parameter : seconds ||| The number seconds since epoch.
    
    Return : A transform that creates a Time_rec containing the time of day.
    
    Link : <None>
    
    TRANSFORM : DateTime_rec CreateDateTime(INTEGER2 year, UNSIGNED1 month, UNSIGNED1 day, UNSIGNED1 hour, UNSIGNED1 minute, UNSIGNED1
                second)
    ----------------------------------------------------------------------------------------------------------------------------------
    
    A transform to create a DateTime_rec from the individual elements
    
    Parameter : year ||| The year
    
    Parameter : month ||| The month (1-12).
    
    Parameter : day ||| The day (1..daysInMonth).
    
    Parameter : hour ||| The hour (0-23).
    
    Parameter : minute ||| The minute (0-59).
    
    Parameter : second ||| The second (0-59).
    
    Return : A transform that creates a DateTime_rec containing date and time
             components.
    
    Link : <None>
    
    TRANSFORM : DateTime_rec CreateDateTimeFromSeconds(Seconds_t seconds)
    ----------------------------------------------------------------------------------------------------------------------------------
    
    A transform to create a DateTime_rec from a Seconds_t value.
    
    Parameter : seconds ||| The number seconds since epoch.
    
    Return : A transform that creates a DateTime_rec containing date and time
             components.
    
    Link : <None>
