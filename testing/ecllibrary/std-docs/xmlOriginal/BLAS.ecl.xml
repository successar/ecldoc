<Meta>
 <Source sourcePath="/home/sarthak/runtime/opt/HPCCSystems/6.5.0/clienttools/plugins/lib_eclblas.ecllib"/>
 <Source name="BLAS" sourcePath="/media/sarthak/Data/ecldoc/testing/ecllibrary/std/BLAS.ecl">
  <Definition body="833"
              end="11173"
              exported="1"
              fullname="blas"
              inherittype="local"
              line="19"
              name="BLAS"
              start="819">
   <Type>module</Type>
   <Definition body="925"
               end="1427"
               exported="1"
               fullname="BLAS.Types"
               inherittype="local"
               line="21"
               name="Types"
               start="910">
    <Type>module</Type>
    <Definition body="959"
                end="985"
                exported="1"
                fullname="blas.types.value_t"
                inherittype="local"
                line="22"
                name="value_t"
                start="937">
     <Type>attribute</Type>
    </Definition>
    <Definition body="1025"
                end="1055"
                exported="1"
                fullname="blas.types.dimension_t"
                inherittype="local"
                line="23"
                name="dimension_t"
                start="1003">
     <Type>attribute</Type>
    </Definition>
    <Definition body="1095"
                end="1122"
                exported="1"
                fullname="blas.types.matrix_t"
                inherittype="local"
                line="24"
                name="matrix_t"
                start="1073">
     <Type>attribute</Type>
    </Definition>
    <Definition body="1167"
                end="1194"
                exported="1"
                inherittype="local"
                line="25"
                name="Triangle"
                start="1145">
     <Type>attribute</Type>
    </Definition>
    <Definition body="1260"
                end="1287"
                exported="1"
                inherittype="local"
                line="26"
                name="Diagonal"
                start="1238">
     <Type>attribute</Type>
    </Definition>
    <Definition body="1360"
                end="1383"
                exported="1"
                inherittype="local"
                line="27"
                name="Side"
                start="1338">
     <Type>attribute</Type>
    </Definition>
    <Parents/>
   </Definition>
   <Definition body="1759"
               end="1762"
               exported="1"
               fullname="blas.icellfunc"
               inherittype="local"
               line="37"
               name="ICellFunc"
               start="1601">
    <Type>function</Type>
    <Documentation>
     <content>&#10;&#32;&#32;&#32;* Function prototype for Apply2Cell.
   * @param v the value
   * @param r the row ordinal
   * @param c the column ordinal
   * @return the updated value&#10;&#32;&#32;&#32;</content>
    </Documentation>
    <Params>
     <Param name="v"/>
     <Param name="r"/>
     <Param name="c"/>
    </Params>
   </Definition>
   <Definition body="2184"
               end="2494"
               exported="1"
               fullname="blas.apply2cells"
               inherittype="local"
               line="49"
               name="Apply2Cells"
               start="1967">
    <Type>function</Type>
    <Documentation>
     <content>&#10;&#32;&#32;&#32;* Iterate matrix and apply function to each cell
   *@param m number of rows
   *@param n number of columns
   *@param x matrix
   *@param f function to apply
   *@return updated matrix&#10;&#32;&#32;&#32;</content>
    </Documentation>
    <Params>
     <Param name="m"/>
     <Param name="n"/>
     <Param name="x"/>
     <Param name="f"/>
    </Params>
   </Definition>
   <Definition body="3005"
               end="3053"
               exported="1"
               fullname="blas.dasum"
               inherittype="local"
               line="73"
               name="dasum"
               start="2860">
    <Type>function</Type>
    <Documentation>
     <content>&#10;&#32;&#32;&#32;* Absolute sum, the 1 norm of a vector.
   *@param m the number of entries
   *@param x the column major matrix holding the vector
   *@param incx the increment for x, 1 in the case of an actual vector
   *@param skipped default is zero, the number of entries stepped over
   * to get to the first entry
   *@return the sum of the absolute values&#10;&#32;&#32;&#32;</content>
    </Documentation>
    <Params>
     <Param name="m"/>
     <Param name="x"/>
     <Param name="incx"/>
     <Param name="skipped"/>
    </Params>
   </Definition>
   <Definition body="3792"
               end="3869"
               exported="1"
               fullname="blas.daxpy"
               inherittype="local"
               line="90"
               name="daxpy"
               start="3535">
    <Type>function</Type>
    <Documentation>
     <content>&#10;&#32;* alpha*X + Y
 * @param N number of elements in vector
 * @param alpha the scalar multiplier
 * @param X the column major matrix holding the vector X
 * @param incX the increment or stride for the vector
 * @param Y the column major matrix holding the vector Y
 * @param incY the increment or stride of Y
 * @param x_skipped number of entries skipped to get to the first X
 * @param y_skipped number of entries skipped to get to the first Y
 * @return the updated matrix&#10;&#32;</content>
    </Documentation>
    <Params>
     <Param name="N"/>
     <Param name="alpha"/>
     <Param name="X"/>
     <Param name="incX"/>
     <Param name="Y"/>
     <Param name="incY"/>
     <Param name="x_skipped"/>
     <Param name="y_skipped"/>
    </Params>
   </Definition>
   <Definition body="4649"
               end="4731"
               exported="1"
               fullname="blas.dgemm"
               inherittype="local"
               line="109"
               name="dgemm"
               start="4355">
    <Type>function</Type>
    <Documentation>
     <content>&#10;&#32;&#32;&#32;* alpha*op(A) op(B) + beta*C where op() is transpose
   * @param transposeA true when transpose of A is used
   * @param transposeB true when transpose of B is used
   * @param M number of rows in product
   * @param N number of columns in product
   * @param K number of columns/rows for the multiplier/multiplicand
   * @param alpha scalar used on A
   * @param A matrix A
   * @param B matrix B
   * @param beta scalar for matrix C
   * @param C matrix C or empty&#10;&#32;&#32;&#32;</content>
    </Documentation>
    <Params>
     <Param name="transposeA"/>
     <Param name="transposeB"/>
     <Param name="M"/>
     <Param name="N"/>
     <Param name="K"/>
     <Param name="alpha"/>
     <Param name="A"/>
     <Param name="B"/>
     <Param name="beta"/>
     <Param name="C"/>
    </Params>
   </Definition>
   <Definition body="5134"
               end="5171"
               exported="1"
               fullname="blas.dgetf2"
               inherittype="local"
               line="124"
               name="dgetf2"
               start="5028">
    <Type>function</Type>
    <Documentation>
     <content>&#10;&#32;&#32;&#32;* Compute LU Factorization of matrix A.
   * @param m number of rows of A
   * @param n number of columns of A
   * @return composite matrix of factors, lower triangle has an
   *         implied diagonal of ones.  Upper triangle has the diagonal of the
   *         composite.&#10;&#32;&#32;&#32;</content>
    </Documentation>
    <Params>
     <Param name="m"/>
     <Param name="n"/>
     <Param name="a"/>
    </Params>
   </Definition>
   <Definition body="5940"
               end="5986"
               exported="1"
               fullname="blas.dpotf2"
               inherittype="local"
               line="143"
               name="dpotf2"
               start="5790">
    <Type>function</Type>
    <Documentation>
     <content>&#10;&#32;&#32;&#32;* DPOTF2 computes the Cholesky factorization of a real symmetric
   * positive definite matrix A.
   *The factorization has the form
   * A = U**T * U ,  if UPLO = &apos;U&apos;, or
   * A = L  * L**T,  if UPLO = &apos;L&apos;,
   * where U is an upper triangular matrix and L is lower triangular.
   * This is the unblocked version of the algorithm, calling Level 2 BLAS.
   * @param tri indicate whether upper or lower triangle is used
   * @param r number of rows/columns in the square matrix
   * @param A the square matrix
   * @param clear clears the unused triangle
   * @return the triangular matrix requested.&#10;&#32;&#32;&#32;</content>
    </Documentation>
    <Params>
     <Param name="tri"/>
     <Param name="r"/>
     <Param name="A"/>
     <Param name="clear"/>
    </Params>
   </Definition>
   <Definition body="6522"
               end="6577"
               exported="1"
               fullname="blas.dscal"
               inherittype="local"
               line="157"
               name="dscal"
               start="6349">
    <Type>function</Type>
    <Documentation>
     <content>&#10;&#32;&#32;&#32;* Scale a vector alpha
   * @param N number of elements in the vector
   * @param alpha the scaling factor
   * @param X the column major matrix holding the vector
   * @param incX the stride to get to the next element in the vector
   * @param skipped the number of elements skipped to get to the first element
   * @return the updated matrix&#10;&#32;&#32;&#32;</content>
    </Documentation>
    <Params>
     <Param name="N"/>
     <Param name="alpha"/>
     <Param name="X"/>
     <Param name="incX"/>
     <Param name="skipped"/>
    </Params>
   </Definition>
   <Definition body="7506"
               end="7582"
               exported="1"
               fullname="blas.dsyrk"
               inherittype="local"
               line="177"
               name="dsyrk"
               start="7237">
    <Type>function</Type>
    <Documentation>
     <content>&#10;&#32;&#32;&#32;* Implements symmetric rank update C &lt;- alpha A**T A + beta C or
   * c &lt;- alpha A A**T + beta C.  C is N x N.
   * @param tri update upper or lower triangle
   * @param transposeA Transpose the A matrix to be NxK
   * @param N number of rows
   * @param K number of columns in the update matrix or transpose
   * @param alpha the alpha scalar
   * @param A the update matrix, either NxK or KxN
   * @param beta the beta scalar
   * @param C the matrix to update
   * @param clear clear the triangle that is not updated.  BLAS assumes
   * that symmetric matrices have only one of the triangles and this
   * option lets you make that true.&#10;&#32;&#32;&#32;</content>
    </Documentation>
    <Params>
     <Param name="tri"/>
     <Param name="transposeA"/>
     <Param name="N"/>
     <Param name="K"/>
     <Param name="alpha"/>
     <Param name="A"/>
     <Param name="beta"/>
     <Param name="C"/>
     <Param name="clear"/>
    </Params>
   </Definition>
   <Definition body="8548"
               end="8628"
               exported="1"
               fullname="blas.dtrsm"
               inherittype="local"
               line="199"
               name="dtrsm"
               start="8258">
    <Type>function</Type>
    <Documentation>
     <content>&#10;&#32;&#32;&#32;* Triangular matrix solver.  op(A) X = alpha B or X op(A) = alpha B
   * where op is Transpose, X and B is MxN
   * @param side side for A, Side.Ax is op(A) X = alpha B
   * @param tri Says whether A is Upper or Lower triangle
   * @param transposeA is op(A) the transpose of A
   * @param diag is the diagonal an implied unit diagonal or supplied
   * @param M number of rows
   * @param N number of columns
   * @param lda the leading dimension of the A matrix, either M or N
   * @param alpha the scalar multiplier for B
   * @param A a triangular matrix
   * @param B the matrix of values for the solve
   * @return the matrix of coefficients to get B.&#10;&#32;&#32;&#32;</content>
    </Documentation>
    <Params>
     <Param name="side"/>
     <Param name="tri"/>
     <Param name="transposeA"/>
     <Param name="diag"/>
     <Param name="M"/>
     <Param name="N"/>
     <Param name="lda"/>
     <Param name="alpha"/>
     <Param name="A"/>
     <Param name="B"/>
    </Params>
   </Definition>
   <Definition body="9000"
               end="9304"
               exported="1"
               fullname="blas.extract_diag"
               inherittype="local"
               line="213"
               name="extract_diag"
               start="8829">
    <Type>function</Type>
    <Documentation>
     <content>&#10;&#32;&#32;&#32;* Extract the diagonal of he matrix
   * @param m number of rows
   * @param n number of columns
   * @param x matrix from which to extract the diagonal
   * @return diagonal matrix&#10;&#32;&#32;&#32;</content>
    </Documentation>
    <Params>
     <Param name="m"/>
     <Param name="n"/>
     <Param name="x"/>
    </Params>
   </Definition>
   <Definition body="9888"
               end="9939"
               exported="1"
               fullname="blas.extract_tri"
               inherittype="local"
               line="236"
               name="extract_tri"
               start="9695">
    <Type>function</Type>
    <Documentation>
     <content>&#10;&#32;&#32;&#32;* Extract the upper or lower triangle.  Diagonal can be actual or implied
   * unit diagonal.
   * @param m number of rows
   * @param n number of columns
   * @param tri Upper or Lower specifier, Triangle.Lower or Triangle.Upper
   * @param dt Use Diagonal.NotUnitTri or Diagonal.UnitTri
   * @param a Matrix, usually a composite from factoring
   * @return the triangle&#10;&#32;&#32;&#32;</content>
    </Documentation>
    <Params>
     <Param name="m"/>
     <Param name="n"/>
     <Param name="tri"/>
     <Param name="dt"/>
     <Param name="a"/>
    </Params>
   </Definition>
   <Definition body="10293"
               end="10333"
               exported="1"
               fullname="blas.make_diag"
               inherittype="local"
               line="249"
               name="make_diag"
               start="10168">
    <Type>function</Type>
    <Documentation>
     <content>&#10;&#32;&#32;&#32;* Generate a diagonal matrix.
   * @param m number of diagonal entries
   * @param v option value, defaults to 1
   * @param X optional input of diagonal values, multiplied by v.
   * @return a diagonal matrix&#10;&#32;&#32;&#32;</content>
    </Documentation>
    <Params>
     <Param name="m"/>
     <Param name="v"/>
     <Param name="X"/>
    </Params>
   </Definition>
   <Definition body="10800"
               end="10827"
               exported="1"
               fullname="blas.make_vector"
               inherittype="local"
               line="268"
               name="make_vector"
               start="10698">
    <Type>function</Type>
    <Documentation>
     <content>&#10;&#32;&#32;&#32;* Make a vector of dimension m
   * @param m number of elements
   * @param v the values, defaults to 1
   * @return the vector&#10;&#32;&#32;&#32;</content>
    </Documentation>
    <Params>
     <Param name="m"/>
     <Param name="v"/>
    </Params>
   </Definition>
   <Definition body="11142"
               end="11168"
               exported="1"
               fullname="blas.trace"
               inherittype="local"
               line="279"
               name="trace"
               start="11017">
    <Type>function</Type>
    <Documentation>
     <content>&#10;&#32;&#32;&#32;* The trace of the input matrix
   * @param m number of rows
   * @param n number of columns
   * @param x the matrix
   * @return the trace (sum of the diagonal entries)&#10;&#32;&#32;&#32;</content>
    </Documentation>
    <Params>
     <Param name="m"/>
     <Param name="n"/>
     <Param name="x"/>
    </Params>
   </Definition>
   <Parents/>
  </Definition>
  <Import body="0"
          end="790"
          fullname="lib_eclblas"
          inherittype="local"
          line="17"
          name="LIB_ECLBLAS"
          ref="lib_eclblas"
          remotescope="1"
          start="790"/>
 </Source>
</Meta>
