<?xml version='1.0' encoding='UTF-8'?>
<Meta>
 <Source name="str" sourcePath="/media/sarthak/Data/ecldoc/testing/test/str.ecl" target="str.ecl.xml">
  <Definition body="251" end="962" inherit_type="local" line="6" name="rtl" source="/media/sarthak/Data/ecldoc/testing/test/str.ecl" start="245">
   <Type>module</Type>
   <Definition body="0" end="0" exported="1" fullname="infinity" inherit_type="local" line="8" name="Infinity" start="0">
    <Type>function</Type>
    <Signature pre="" post="" name="INFINITY"></Signature><Params/>
   </Definition>
   <Definition body="0" end="0" exported="1" fullname="nan" inherit_type="local" line="9" name="Nan" start="0">
    <Type>function</Type>
    <Signature pre="" post="" name="NAN"></Signature><Params/>
   </Definition>
   <Definition body="0" end="0" exported="1" fullname="isinfinite" inherit_type="local" line="10" name="IsInfinite" start="0">
    <Type>function</Type>
    <Signature pre="" post="" name="ISINFINITE"></Signature><Params>
     <Param name="value"/>
    </Params>
   </Definition>
   <Definition body="0" end="0" exported="1" fullname="isnan" inherit_type="local" line="11" name="IsNaN" start="0">
    <Type>function</Type>
    <Signature pre="" post="" name="ISNAN"></Signature><Params>
     <Param name="value"/>
    </Params>
   </Definition>
   <Definition body="0" end="0" exported="1" fullname="isfinite" inherit_type="local" line="12" name="IsFinite" start="0">
    <Type>function</Type>
    <Signature pre="" post="" name="ISFINITE"></Signature><Params>
     <Param name="value"/>
    </Params>
   </Definition>
   <Definition body="0" end="0" exported="1" fullname="fmod" inherit_type="local" line="13" name="fmod" start="0">
    <Type>function</Type>
    <Signature pre="" post="" name="FMOD"></Signature><Params>
     <Param name="numer"/>
     <Param name="denom"/>
     <Param name="dbz"/>
    </Params>
   </Definition>
   <Definition body="0" end="0" exported="1" fullname="fmatch" inherit_type="local" line="14" name="fmatch" start="0">
    <Type>function</Type>
    <Signature pre="" post="" name="FMATCH"></Signature><Params>
     <Param name="a"/>
     <Param name="b"/>
     <Param name="epsilon"/>
    </Params>
   </Definition>
   <Signature pre="" post="" name="RTL">rtl</Signature><Parents/>
  </Definition>
  <Definition body="977" end="2549" exported="1" fullname="Str" inherit_type="local" line="17" name="Str" source="/media/sarthak/Data/ecldoc/testing/test/str.ecl" start="964">
   <Type>module</Type>
   <Definition body="1057" end="1073" exported="1" fullname="str.infinity" inherit_type="local" line="24" name="Infinity" source="/media/sarthak/Data/ecldoc/testing/test/str.ecl" start="1033">
    <Type>attribute</Type>
    <Signature pre="REAL8" post="" name="INFINITY">REAL8 Infinity</Signature><Documentation> <content>Return a real "infinity" value.</content>
    </Documentation>
   </Definition>
   <Definition body="1158" end="1169" exported="1" fullname="str.nan" inherit_type="local" line="31" name="NaN" source="/media/sarthak/Data/ecldoc/testing/test/str.ecl" start="1139">
    <Type>attribute</Type>
    <Signature pre="REAL8" post="" name="NAN">REAL8 NaN</Signature><Documentation> <content>Return a non-signalling NaN (Not a Number)value.</content>
    </Documentation>
   </Definition>
   <Definition body="1332" end="1353" exported="1" fullname="str.isinfinite" inherit_type="local" line="39" name="isInfinite" source="/media/sarthak/Data/ecldoc/testing/test/str.ecl" start="1293">
    <Type>function</Type>
    <Documentation> <content>Return whether a real value is infinite (positive or negative).</content>
     <param><name>val</name><desc>The value to test.</desc></param>
    </Documentation>
    <Signature pre="BOOLEAN" post="(REAL8 val)" name="ISINFINITE">BOOLEAN isInfinite(REAL8 val)</Signature><Params>
     <Param name="val"/>
    </Params>
   </Definition>
   <Definition body="1506" end="1522" exported="1" fullname="str.isnan" inherit_type="local" line="47" name="isNaN" source="/media/sarthak/Data/ecldoc/testing/test/str.ecl" start="1472">
    <Type>function</Type>
    <Documentation> <content>Return whether a real value is a NaN (not a number) value.</content>
     <param><name>val</name><desc>The value to test.</desc></param>
    </Documentation>
    <Signature pre="BOOLEAN" post="(REAL8 val)" name="ISNAN">BOOLEAN isNaN(REAL8 val)</Signature><Params>
     <Param name="val"/>
    </Params>
   </Definition>
   <Definition body="1692" end="1711" exported="1" fullname="str.isfinite" inherit_type="local" line="55" name="isFinite" source="/media/sarthak/Data/ecldoc/testing/test/str.ecl" start="1655">
    <Type>function</Type>
    <Documentation> <content>Return whether a real value is a valid value (neither infinite not NaN).</content>
     <param><name>val</name><desc>The value to test.</desc></param>
    </Documentation>
    <Signature pre="BOOLEAN" post="(REAL8 val)" name="ISFINITE">BOOLEAN isFinite(REAL8 val)</Signature><Params>
     <Param name="val"/>
    </Params>
   </Definition>
   <Definition body="2113" end="2218" exported="1" fullname="str.fmod" inherit_type="local" line="68" name="FMod" source="/media/sarthak/Data/ecldoc/testing/test/str.ecl" start="2067">
    <Type>function</Type>
    <Documentation> <content>Returns the floating-point remainder of numer/denom (rounded towards zero). If denom is zero, the result depends on the -fdivideByZero flag: 'zero' or unset: return zero. 'nan': return a non-signalling NaN value 'fail': throw an exception</content>
     <param><name>numer</name><desc>The numerator.</desc></param>
     <param><name>denom</name><desc>The numerator.</desc></param>
    </Documentation>
    <Signature pre="REAL8" post="(REAL8 numer, REAL8 denom)" name="FMOD">REAL8 FMod(REAL8 numer, REAL8 denom)</Signature><Params>
     <Param name="numer"/>
     <Param name="denom"/>
    </Params>
   </Definition>
   <Definition body="2516" end="2543" exported="1" fullname="str.fmatch" inherit_type="local" line="83" name="FMatch" source="/media/sarthak/Data/ecldoc/testing/test/str.ecl" start="2455">
    <Type>function</Type>
    <Documentation> <content>Returns whether two floating point values are the same, within margin of error epsilon.</content>
     <param><name>a</name><desc>The first value.</desc></param>
     <param><name>b</name><desc>The second value.</desc></param>
     <param><name>epsilon</name><desc>The allowable margin of error.</desc></param>
    </Documentation>
    <Signature pre="BOOLEAN" post="(REAL8 a, REAL8 b, REAL8 epsilon=0.0)" name="FMATCH">BOOLEAN FMatch(REAL8 a, REAL8 b, REAL8 epsilon=0.0)</Signature><Params>
     <Param name="a"/>
     <Param name="b"/>
     <Param name="epsilon"/>
    </Params>
   </Definition>
   <Signature pre="" post="" name="STR">Str</Signature><Parents/>
  </Definition>
 </Source>
</Meta>